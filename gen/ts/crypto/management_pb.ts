// @generated by protoc-gen-es v2.6.2 with parameter "target=ts,json_types=true"
// @generated from file crypto/management.proto (package io.clbs.openhes.models.crypto, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { ObjectType, ObjectTypeJson } from "../common/objects_pb";
import { file_common_objects } from "../common/objects_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file crypto/management.proto.
 */
export const file_crypto_management: GenFile = /*@__PURE__*/
  fileDesc("ChdjcnlwdG8vbWFuYWdlbWVudC5wcm90bxIdaW8uY2xicy5vcGVuaGVzLm1vZGVscy5jcnlwdG8igAEKFkdldENyeXB0b1NlY3JldFJlcXVlc3QSPgoLb2JqZWN0X3R5cGUYASABKA4yKS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5PYmplY3RUeXBlEhMKC2RyaXZlcl90eXBlGAIgASgJEhEKCWNyeXB0b19pZBgDIAEoCSJNCg1DcnlwdG9TZWNyZXRzEjwKB3NlY3JldHMYASADKAsyKy5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNyeXB0by5DcnlwdG9TZWNyZXQi3gEKDENyeXB0b1NlY3JldBIUCgxhY2Nlc3NfbGV2ZWwYASABKAkSDgoGa2V5X2lkGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnVwZGF0ZWRfYXQYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEgwKBGRhdGEYDyABKAxKBAgFEAZKBAgGEAdKBAgHEAhKBAgIEAlKBAgJEApKBAgKEAtKBAgLEAxKBAgMEA1KBAgNEA5KBAgOEA8i3gMKFlNldENyeXB0b1NlY3JldFJlcXVlc3QSPgoLb2JqZWN0X3R5cGUYASABKA4yKS5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5PYmplY3RUeXBlEhMKC2RyaXZlcl90eXBlGAIgASgJEhEKCWNyeXB0b19pZBgDIAEoCRIUCgxhY2Nlc3NfbGV2ZWwYBCABKAkSDgoGa2V5X2lkGAUgASgJEhwKFGRlY3J5cHRpb25fc2VjcmV0X2lkGAYgASgJEmYKHXNlc3Npb25fa2V5X2RlY3J5cHRpb25fbWV0aG9kGAcgASgOMj8uaW8uY2xicy5vcGVuaGVzLm1vZGVscy5jcnlwdG8uU2VjcmV0U2Vzc2lvbktleURlY3J5cHRpb25NZXRob2QSEwoLc2Vzc2lvbl9rZXkYCCABKAwSWQoWZGF0YV9kZWNyeXB0aW9uX21ldGhvZBgJIAEoDjI5LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuY3J5cHRvLlNlY3JldERhdGFEZWNyeXB0aW9uTWV0aG9kEhoKEmRhdGFfZGVjcnlwdGlvbl9pdhgKIAEoDBIMCgRkYXRhGA8gASgMSgQICxAMSgQIDBANSgQIDRAOSgQIDhAPKk4KGlNlY3JldERhdGFEZWNyeXB0aW9uTWV0aG9kEhUKEVNFQ1JFVF9EQVRBX1BMQUlOEAASGQoVU0VDUkVUX0RBVEFfQUVTMjU2Q0JDEAEqeAogU2VjcmV0U2Vzc2lvbktleURlY3J5cHRpb25NZXRob2QSFwoTU0VDUkVUX1NFU1NJT05fTk9ORRAAEhgKFFNFQ1JFVF9TRVNTSU9OX1BMQUlOEAESIQodU0VDUkVUX1NFU1NJT05fUlNBX09BRVBNX0dGMVAQAkI1WjNnaXRodWIuY29tL2N5YnJvc2xhYnMvb3Vyby1hcGktc2hhcmVkL2dlbi9nby9jcnlwdG9iCGVkaXRpb25zcOgH", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_common_objects]);

/**
 * @generated from message io.clbs.openhes.models.crypto.GetCryptoSecretRequest
 */
export type GetCryptoSecretRequest = Message<"io.clbs.openhes.models.crypto.GetCryptoSecretRequest"> & {
  /**
   * Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
   *
   * @generated from field: io.clbs.openhes.models.common.ObjectType object_type = 1;
   */
  objectType: ObjectType;

  /**
   * The driver type for which the secret is requested, e.g., "METERCONTROL_ST402D_DLMS"
   *
   * @generated from field: string driver_type = 2;
   */
  driverType: string;

  /**
   * The crypto ID of the secret to retrieve.
   *
   * @generated from field: string crypto_id = 3;
   */
  cryptoId: string;
};

/**
 * @generated from message io.clbs.openhes.models.crypto.GetCryptoSecretRequest
 */
export type GetCryptoSecretRequestJson = {
  /**
   * Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
   *
   * @generated from field: io.clbs.openhes.models.common.ObjectType object_type = 1;
   */
  objectType?: ObjectTypeJson;

  /**
   * The driver type for which the secret is requested, e.g., "METERCONTROL_ST402D_DLMS"
   *
   * @generated from field: string driver_type = 2;
   */
  driverType?: string;

  /**
   * The crypto ID of the secret to retrieve.
   *
   * @generated from field: string crypto_id = 3;
   */
  cryptoId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.crypto.GetCryptoSecretRequest.
 * Use `create(GetCryptoSecretRequestSchema)` to create a new message.
 */
export const GetCryptoSecretRequestSchema: GenMessage<GetCryptoSecretRequest, {jsonType: GetCryptoSecretRequestJson}> = /*@__PURE__*/
  messageDesc(file_crypto_management, 0);

/**
 * @generated from message io.clbs.openhes.models.crypto.CryptoSecrets
 */
export type CryptoSecrets = Message<"io.clbs.openhes.models.crypto.CryptoSecrets"> & {
  /**
   * List of secrets.
   *
   * @generated from field: repeated io.clbs.openhes.models.crypto.CryptoSecret secrets = 1;
   */
  secrets: CryptoSecret[];
};

/**
 * @generated from message io.clbs.openhes.models.crypto.CryptoSecrets
 */
export type CryptoSecretsJson = {
  /**
   * List of secrets.
   *
   * @generated from field: repeated io.clbs.openhes.models.crypto.CryptoSecret secrets = 1;
   */
  secrets?: CryptoSecretJson[];
};

/**
 * Describes the message io.clbs.openhes.models.crypto.CryptoSecrets.
 * Use `create(CryptoSecretsSchema)` to create a new message.
 */
export const CryptoSecretsSchema: GenMessage<CryptoSecrets, {jsonType: CryptoSecretsJson}> = /*@__PURE__*/
  messageDesc(file_crypto_management, 1);

/**
 * @generated from message io.clbs.openhes.models.crypto.CryptoSecret
 */
export type CryptoSecret = Message<"io.clbs.openhes.models.crypto.CryptoSecret"> & {
  /**
   * Access level for the secret, e.g., "admin", "user", etc.
   *
   * @generated from field: string access_level = 1;
   */
  accessLevel: string;

  /**
   * Unique identifier for the secret key.
   *
   * @generated from field: string key_id = 2;
   */
  keyId: string;

  /**
   * Timestamp when the secret was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * Timestamp when the secret was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: Timestamp;

  /**
   * The secret data.
   *
   * @generated from field: bytes data = 15;
   */
  data: Uint8Array;
};

/**
 * @generated from message io.clbs.openhes.models.crypto.CryptoSecret
 */
export type CryptoSecretJson = {
  /**
   * Access level for the secret, e.g., "admin", "user", etc.
   *
   * @generated from field: string access_level = 1;
   */
  accessLevel?: string;

  /**
   * Unique identifier for the secret key.
   *
   * @generated from field: string key_id = 2;
   */
  keyId?: string;

  /**
   * Timestamp when the secret was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: TimestampJson;

  /**
   * Timestamp when the secret was last updated.
   *
   * @generated from field: google.protobuf.Timestamp updated_at = 4;
   */
  updatedAt?: TimestampJson;

  /**
   * The secret data.
   *
   * @generated from field: bytes data = 15;
   */
  data?: string;
};

/**
 * Describes the message io.clbs.openhes.models.crypto.CryptoSecret.
 * Use `create(CryptoSecretSchema)` to create a new message.
 */
export const CryptoSecretSchema: GenMessage<CryptoSecret, {jsonType: CryptoSecretJson}> = /*@__PURE__*/
  messageDesc(file_crypto_management, 2);

/**
 * @generated from message io.clbs.openhes.models.crypto.SetCryptoSecretRequest
 */
export type SetCryptoSecretRequest = Message<"io.clbs.openhes.models.crypto.SetCryptoSecretRequest"> & {
  /**
   * Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
   *
   * @generated from field: io.clbs.openhes.models.common.ObjectType object_type = 1;
   */
  objectType: ObjectType;

  /**
   * The driver type for which the secret is requested, e.g., "METERCONTROL_ST402D_DLMS"
   *
   * @generated from field: string driver_type = 2;
   */
  driverType: string;

  /**
   * The crypto ID of the secret to retrieve.
   *
   * @generated from field: string crypto_id = 3;
   */
  cryptoId: string;

  /**
   * Access level for the secret, e.g., "admin", "user", etc.
   *
   * @generated from field: string access_level = 4;
   */
  accessLevel: string;

  /**
   * Unique identifier for the secret key.
   *
   * @generated from field: string key_id = 5;
   */
  keyId: string;

  /**
   * Identifier for the key used to decrypt the either the session key or the data directly.
   *
   * @generated from field: string decryption_secret_id = 6;
   */
  decryptionSecretId: string;

  /**
   * Method used to decrypt the session key. May be unset if the session key is unset and no used.
   *
   * @generated from field: io.clbs.openhes.models.crypto.SecretSessionKeyDecryptionMethod session_key_decryption_method = 7;
   */
  sessionKeyDecryptionMethod: SecretSessionKeyDecryptionMethod;

  /**
   * The session key, usually encrypted, used to decrypt the data.
   *
   * @generated from field: bytes session_key = 8;
   */
  sessionKey: Uint8Array;

  /**
   * Method used to decrypt the secret data. May be unset if the data is not encrypted and vice versa.
   *
   * @generated from field: io.clbs.openhes.models.crypto.SecretDataDecryptionMethod data_decryption_method = 9;
   */
  dataDecryptionMethod: SecretDataDecryptionMethod;

  /**
   * Initialization vector for the decryption method, if applicable.
   *
   * @generated from field: bytes data_decryption_iv = 10;
   */
  dataDecryptionIv: Uint8Array;

  /**
   * The secret data.
   *
   * @generated from field: bytes data = 15;
   */
  data: Uint8Array;
};

/**
 * @generated from message io.clbs.openhes.models.crypto.SetCryptoSecretRequest
 */
export type SetCryptoSecretRequestJson = {
  /**
   * Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
   *
   * @generated from field: io.clbs.openhes.models.common.ObjectType object_type = 1;
   */
  objectType?: ObjectTypeJson;

  /**
   * The driver type for which the secret is requested, e.g., "METERCONTROL_ST402D_DLMS"
   *
   * @generated from field: string driver_type = 2;
   */
  driverType?: string;

  /**
   * The crypto ID of the secret to retrieve.
   *
   * @generated from field: string crypto_id = 3;
   */
  cryptoId?: string;

  /**
   * Access level for the secret, e.g., "admin", "user", etc.
   *
   * @generated from field: string access_level = 4;
   */
  accessLevel?: string;

  /**
   * Unique identifier for the secret key.
   *
   * @generated from field: string key_id = 5;
   */
  keyId?: string;

  /**
   * Identifier for the key used to decrypt the either the session key or the data directly.
   *
   * @generated from field: string decryption_secret_id = 6;
   */
  decryptionSecretId?: string;

  /**
   * Method used to decrypt the session key. May be unset if the session key is unset and no used.
   *
   * @generated from field: io.clbs.openhes.models.crypto.SecretSessionKeyDecryptionMethod session_key_decryption_method = 7;
   */
  sessionKeyDecryptionMethod?: SecretSessionKeyDecryptionMethodJson;

  /**
   * The session key, usually encrypted, used to decrypt the data.
   *
   * @generated from field: bytes session_key = 8;
   */
  sessionKey?: string;

  /**
   * Method used to decrypt the secret data. May be unset if the data is not encrypted and vice versa.
   *
   * @generated from field: io.clbs.openhes.models.crypto.SecretDataDecryptionMethod data_decryption_method = 9;
   */
  dataDecryptionMethod?: SecretDataDecryptionMethodJson;

  /**
   * Initialization vector for the decryption method, if applicable.
   *
   * @generated from field: bytes data_decryption_iv = 10;
   */
  dataDecryptionIv?: string;

  /**
   * The secret data.
   *
   * @generated from field: bytes data = 15;
   */
  data?: string;
};

/**
 * Describes the message io.clbs.openhes.models.crypto.SetCryptoSecretRequest.
 * Use `create(SetCryptoSecretRequestSchema)` to create a new message.
 */
export const SetCryptoSecretRequestSchema: GenMessage<SetCryptoSecretRequest, {jsonType: SetCryptoSecretRequestJson}> = /*@__PURE__*/
  messageDesc(file_crypto_management, 3);

/**
 * DLMS crypto mode
 *
 * @generated from enum io.clbs.openhes.models.crypto.SecretDataDecryptionMethod
 */
export enum SecretDataDecryptionMethod {
  /**
   * Plain data, no decryption needed
   *
   * @generated from enum value: SECRET_DATA_PLAIN = 0;
   */
  SECRET_DATA_PLAIN = 0,

  /**
   * AES-256-CBC encryption method
   *
   * @generated from enum value: SECRET_DATA_AES256CBC = 1;
   */
  SECRET_DATA_AES256CBC = 1,
}

/**
 * DLMS crypto mode
 *
 * @generated from enum io.clbs.openhes.models.crypto.SecretDataDecryptionMethod
 */
export type SecretDataDecryptionMethodJson = "SECRET_DATA_PLAIN" | "SECRET_DATA_AES256CBC";

/**
 * Describes the enum io.clbs.openhes.models.crypto.SecretDataDecryptionMethod.
 */
export const SecretDataDecryptionMethodSchema: GenEnum<SecretDataDecryptionMethod, SecretDataDecryptionMethodJson> = /*@__PURE__*/
  enumDesc(file_crypto_management, 0);

/**
 * @generated from enum io.clbs.openhes.models.crypto.SecretSessionKeyDecryptionMethod
 */
export enum SecretSessionKeyDecryptionMethod {
  /**
   * No session key decryption method, used when the session key is not set or not used.
   *
   * @generated from enum value: SECRET_SESSION_NONE = 0;
   */
  SECRET_SESSION_NONE = 0,

  /**
   * Plain session key, no session-key decryption needed.
   *
   * @generated from enum value: SECRET_SESSION_PLAIN = 1;
   */
  SECRET_SESSION_PLAIN = 1,

  /**
   * RSA-OAEP-MGF1P decryption method, used for session keys.
   *
   * @generated from enum value: SECRET_SESSION_RSA_OAEPM_GF1P = 2;
   */
  SECRET_SESSION_RSA_OAEPM_GF1P = 2,
}

/**
 * @generated from enum io.clbs.openhes.models.crypto.SecretSessionKeyDecryptionMethod
 */
export type SecretSessionKeyDecryptionMethodJson = "SECRET_SESSION_NONE" | "SECRET_SESSION_PLAIN" | "SECRET_SESSION_RSA_OAEPM_GF1P";

/**
 * Describes the enum io.clbs.openhes.models.crypto.SecretSessionKeyDecryptionMethod.
 */
export const SecretSessionKeyDecryptionMethodSchema: GenEnum<SecretSessionKeyDecryptionMethod, SecretSessionKeyDecryptionMethodJson> = /*@__PURE__*/
  enumDesc(file_crypto_management, 1);

