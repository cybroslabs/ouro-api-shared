// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,json_types=true"
// @generated from file acquisition/timeofuse/timeofuse.proto (package io.clbs.openhes.models.acquisition.timeofuse, edition 2023)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Date, DateJson } from "../../google/type/date_pb";
import { file_google_type_date } from "../../google/type/date_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file acquisition/timeofuse/timeofuse.proto.
 */
export const file_acquisition_timeofuse_timeofuse: GenFile = /*@__PURE__*/
  fileDesc("CiVhY3F1aXNpdGlvbi90aW1lb2Z1c2UvdGltZW9mdXNlLnByb3RvEixpby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLnRpbWVvZnVzZSKJAQoJU3dpdGNoaW5nEgwKBGhvdXIYASABKAUSDgoGbWludXRlGAIgASgFEg4KBnRhcmlmZhgDIAEoBRJOCgZyZWxheXMYBCADKAsyPi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLnRpbWVvZnVzZS5SZWxheVN0YXRlUmVjb3JkIm0KEFJlbGF5U3RhdGVSZWNvcmQSEAoIcmVsYXlfaWQYASABKAUSRwoFc3RhdGUYAiABKA4yOC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLnRpbWVvZnVzZS5SZWxheVN0YXRlImgKCkRheVByb2ZpbGUSDgoGZGF5X2lkGAEgASgJEkoKCXN3aXRjaGluZxgCIAMoCzI3LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24udGltZW9mdXNlLlN3aXRjaGluZyJGCgpTcGVjaWFsRGF5EgwKBHllYXIYASABKAUSDQoFbW9udGgYAiABKAUSCwoDZGF5GAMgASgFEg4KBmRheV9pZBgEIAEoCSI7CgRXZWVrEg8KB3dlZWtfaWQYASABKAkSEQoJd2Vla19uYW1lGAIgASgJEg8KB2RheV9pZHMYAyADKAkibwoGU2Vhc29uEgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSEgoKc3RhcnRfeWVhchgDIAEoBRITCgtzdGFydF9tb250aBgEIAEoBRIRCglzdGFydF9kYXkYBSABKAUSDwoHd2Vla19pZBgGIAEoCSKrAwoSVGltZU9mVXNlVGFibGVTcGVjEi0KCWV4cGllc19hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFAoMaGRvX2dyb3VwX2lkGAQgASgJEiYKC2FjdGl2YXRlX2F0GAUgASgLMhEuZ29vZ2xlLnR5cGUuRGF0ZRJFCgdzZWFzb25zGAYgAygLMjQuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi50aW1lb2Z1c2UuU2Vhc29uEkEKBXdlZWtzGAcgAygLMjIuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5hY3F1aXNpdGlvbi50aW1lb2Z1c2UuV2VlaxJOCgxkYXlfcHJvZmlsZXMYCCADKAsyOC5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmFjcXVpc2l0aW9uLnRpbWVvZnVzZS5EYXlQcm9maWxlEk4KDHNwZWNpYWxfZGF5cxgJIAMoCzI4LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuYWNxdWlzaXRpb24udGltZW9mdXNlLlNwZWNpYWxEYXkqXgoKUmVsYXlTdGF0ZRIbChdSRUxBWV9TVEFURV9VTlNQRUNJRklFRBAAEhcKE1JFTEFZX1NUQVRFX0NPTk5FQ1QQARIaChZSRUxBWV9TVEFURV9ESVNDT05ORUNUEAJCRFpCZ2l0aHViLmNvbS9jeWJyb3NsYWJzL291cm8tYXBpLXNoYXJlZC9nZW4vZ28vYWNxdWlzaXRpb24vdGltZW9mdXNlYghlZGl0aW9uc3DoBw", [file_google_protobuf_timestamp, file_google_type_date]);

/**
 * Defines the switching configuration, including tariffs and relay states for specific times.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.Switching
 */
export type Switching = Message<"io.clbs.openhes.models.acquisition.timeofuse.Switching"> & {
  /**
   * The hour of the switching event.
   * @values: 0–23
   * @example: 7
   *
   * @generated from field: int32 hour = 1;
   */
  hour: number;

  /**
   * The minute of the switching event.
   * @values: 0–59
   * @example: 30
   *
   * @generated from field: int32 minute = 2;
   */
  minute: number;

  /**
   * The tariff ID.
   * @values: -1 means no tariff; other values are valid tariff IDs
   * @example: 2
   *
   * @generated from field: int32 tariff = 3;
   */
  tariff: number;

  /**
   * A map of relay IDs to their corresponding relay states. Duplicate IDs are not allowed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord relays = 4;
   */
  relays: RelayStateRecord[];
};

/**
 * Defines the switching configuration, including tariffs and relay states for specific times.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.Switching
 */
export type SwitchingJson = {
  /**
   * The hour of the switching event.
   * @values: 0–23
   * @example: 7
   *
   * @generated from field: int32 hour = 1;
   */
  hour?: number;

  /**
   * The minute of the switching event.
   * @values: 0–59
   * @example: 30
   *
   * @generated from field: int32 minute = 2;
   */
  minute?: number;

  /**
   * The tariff ID.
   * @values: -1 means no tariff; other values are valid tariff IDs
   * @example: 2
   *
   * @generated from field: int32 tariff = 3;
   */
  tariff?: number;

  /**
   * A map of relay IDs to their corresponding relay states. Duplicate IDs are not allowed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord relays = 4;
   */
  relays?: RelayStateRecordJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.Switching.
 * Use `create(SwitchingSchema)` to create a new message.
 */
export const SwitchingSchema: GenMessage<Switching, {jsonType: SwitchingJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 0);

/**
 * Defines the state of a relay at a specific time.
 * Each record contains the relay ID and its associated state (CONNECT or DISCONNECT).
 * The relay ID must be unique within the list of relays.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord
 */
export type RelayStateRecord = Message<"io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord"> & {
  /**
   * The unique relay identifier.
   * @example: 1
   *
   * @generated from field: int32 relay_id = 1;
   */
  relayId: number;

  /**
   * The state of the relay (`CONNECT` or `DISCONNECT`).
   * @example: CONNECT
   *
   * @generated from field: io.clbs.openhes.models.acquisition.timeofuse.RelayState state = 2;
   */
  state: RelayState;
};

/**
 * Defines the state of a relay at a specific time.
 * Each record contains the relay ID and its associated state (CONNECT or DISCONNECT).
 * The relay ID must be unique within the list of relays.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord
 */
export type RelayStateRecordJson = {
  /**
   * The unique relay identifier.
   * @example: 1
   *
   * @generated from field: int32 relay_id = 1;
   */
  relayId?: number;

  /**
   * The state of the relay (`CONNECT` or `DISCONNECT`).
   * @example: CONNECT
   *
   * @generated from field: io.clbs.openhes.models.acquisition.timeofuse.RelayState state = 2;
   */
  state?: RelayStateJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord.
 * Use `create(RelayStateRecordSchema)` to create a new message.
 */
export const RelayStateRecordSchema: GenMessage<RelayStateRecord, {jsonType: RelayStateRecordJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 1);

/**
 * Defines a single day profile, containing multiple switching times.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.DayProfile
 */
export type DayProfile = Message<"io.clbs.openhes.models.acquisition.timeofuse.DayProfile"> & {
  /**
   * The unique day profile identifier.
   * @example: "weekday-profile"
   *
   * @generated from field: string day_id = 1;
   */
  dayId: string;

  /**
   * The list of switching events. Each event specifies the time and relay states.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.Switching switching = 2;
   */
  switching: Switching[];
};

/**
 * Defines a single day profile, containing multiple switching times.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.DayProfile
 */
export type DayProfileJson = {
  /**
   * The unique day profile identifier.
   * @example: "weekday-profile"
   *
   * @generated from field: string day_id = 1;
   */
  dayId?: string;

  /**
   * The list of switching events. Each event specifies the time and relay states.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.Switching switching = 2;
   */
  switching?: SwitchingJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.DayProfile.
 * Use `create(DayProfileSchema)` to create a new message.
 */
export const DayProfileSchema: GenMessage<DayProfile, {jsonType: DayProfileJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 2);

/**
 * Defines special days, such as holidays, or other exceptions.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.SpecialDay
 */
export type SpecialDay = Message<"io.clbs.openhes.models.acquisition.timeofuse.SpecialDay"> & {
  /**
   * he year of the special day.
   * @values: full year (e.g., 2023)
   * @example: 2023
   *
   * @generated from field: int32 year = 1;
   */
  year: number;

  /**
   * The month of the special day.
   * @values: 1–12
   * @example: 12
   *
   * @generated from field: int32 month = 2;
   */
  month: number;

  /**
   * The day of the special day.
   * @values: 1–31
   * @example: 25
   *
   * @generated from field: int32 day = 3;
   */
  day: number;

  /**
   * The unique special day identifier.
   * @example: "christmas"
   *
   * @generated from field: string day_id = 4;
   */
  dayId: string;
};

/**
 * Defines special days, such as holidays, or other exceptions.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.SpecialDay
 */
export type SpecialDayJson = {
  /**
   * he year of the special day.
   * @values: full year (e.g., 2023)
   * @example: 2023
   *
   * @generated from field: int32 year = 1;
   */
  year?: number;

  /**
   * The month of the special day.
   * @values: 1–12
   * @example: 12
   *
   * @generated from field: int32 month = 2;
   */
  month?: number;

  /**
   * The day of the special day.
   * @values: 1–31
   * @example: 25
   *
   * @generated from field: int32 day = 3;
   */
  day?: number;

  /**
   * The unique special day identifier.
   * @example: "christmas"
   *
   * @generated from field: string day_id = 4;
   */
  dayId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.SpecialDay.
 * Use `create(SpecialDaySchema)` to create a new message.
 */
export const SpecialDaySchema: GenMessage<SpecialDay, {jsonType: SpecialDayJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 3);

/**
 * Defines a week of the year, containing a list of day IDs and week name.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.Week
 */
export type Week = Message<"io.clbs.openhes.models.acquisition.timeofuse.Week"> & {
  /**
   * The unique week identifier.
   * @example: "week-01"
   *
   * @generated from field: string week_id = 1;
   */
  weekId: string;

  /**
   * The name of the week.
   * @example: "Week 1"
   *
   * @generated from field: string week_name = 2;
   */
  weekName: string;

  /**
   * The list of day IDs assigned to the week.
   * @example: ["monday", "tuesday", "holiday"]
   *
   * @generated from field: repeated string day_ids = 3;
   */
  dayIds: string[];
};

/**
 * Defines a week of the year, containing a list of day IDs and week name.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.Week
 */
export type WeekJson = {
  /**
   * The unique week identifier.
   * @example: "week-01"
   *
   * @generated from field: string week_id = 1;
   */
  weekId?: string;

  /**
   * The name of the week.
   * @example: "Week 1"
   *
   * @generated from field: string week_name = 2;
   */
  weekName?: string;

  /**
   * The list of day IDs assigned to the week.
   * @example: ["monday", "tuesday", "holiday"]
   *
   * @generated from field: repeated string day_ids = 3;
   */
  dayIds?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.Week.
 * Use `create(WeekSchema)` to create a new message.
 */
export const WeekSchema: GenMessage<Week, {jsonType: WeekJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 4);

/**
 * Defines a season that starts on a specific date and is linked to a week profile.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.Season
 */
export type Season = Message<"io.clbs.openhes.models.acquisition.timeofuse.Season"> & {
  /**
   * The unique season identifier.
   * @example: "season-winter"
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The name of the season.
   * @example: "Winter"
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * The start year of the season.
   * @example: 2023
   *
   * @generated from field: int32 start_year = 3;
   */
  startYear: number;

  /**
   * The start month of the season.
   * @values: 1–12
   * @example: 12
   *
   * @generated from field: int32 start_month = 4;
   */
  startMonth: number;

  /**
   * The start day of the season.
   * @values: 1–31
   * @example: 1
   *
   * @generated from field: int32 start_day = 5;
   */
  startDay: number;

  /**
   * The reference to a week ID that applies to this season.
   * @example: "week-01"
   *
   * @generated from field: string week_id = 6;
   */
  weekId: string;
};

/**
 * Defines a season that starts on a specific date and is linked to a week profile.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.Season
 */
export type SeasonJson = {
  /**
   * The unique season identifier.
   * @example: "season-winter"
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * The name of the season.
   * @example: "Winter"
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * The start year of the season.
   * @example: 2023
   *
   * @generated from field: int32 start_year = 3;
   */
  startYear?: number;

  /**
   * The start month of the season.
   * @values: 1–12
   * @example: 12
   *
   * @generated from field: int32 start_month = 4;
   */
  startMonth?: number;

  /**
   * The start day of the season.
   * @values: 1–31
   * @example: 1
   *
   * @generated from field: int32 start_day = 5;
   */
  startDay?: number;

  /**
   * The reference to a week ID that applies to this season.
   * @example: "week-01"
   *
   * @generated from field: string week_id = 6;
   */
  weekId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.Season.
 * Use `create(SeasonSchema)` to create a new message.
 */
export const SeasonSchema: GenMessage<Season, {jsonType: SeasonJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 5);

/**
 * Defines the main Time-of-Use (TOU) table that contains all relevant definitions.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec
 */
export type TimeOfUseTableSpec = Message<"io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec"> & {
  /**
   * The expiration date of the TOU table.
   * @example: "2025-01-01T00:00:00Z"
   *
   * @generated from field: google.protobuf.Timestamp expies_at = 3;
   */
  expiesAt?: Timestamp;

  /**
   * HDO (High Demand Option) Group ID
   * @example: "group-a"
   *
   * @generated from field: string hdo_group_id = 4;
   */
  hdoGroupId: string;

  /**
   * The activation date of the TOU table.
   * @example: "2024-06-01"
   *
   * @generated from field: google.type.Date activate_at = 5;
   */
  activateAt?: Date;

  /**
   * The list of seasons defined in the TOU table.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.Season seasons = 6;
   */
  seasons: Season[];

  /**
   * The list of week profiles defined in the TOU table.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.Week weeks = 7;
   */
  weeks: Week[];

  /**
   * The list of day profiles, each defining multiple switching events.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.DayProfile day_profiles = 8;
   */
  dayProfiles: DayProfile[];

  /**
   * The list of special days, such as holidays or other exceptions.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.SpecialDay special_days = 9;
   */
  specialDays: SpecialDay[];
};

/**
 * Defines the main Time-of-Use (TOU) table that contains all relevant definitions.
 *
 * @generated from message io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec
 */
export type TimeOfUseTableSpecJson = {
  /**
   * The expiration date of the TOU table.
   * @example: "2025-01-01T00:00:00Z"
   *
   * @generated from field: google.protobuf.Timestamp expies_at = 3;
   */
  expiesAt?: TimestampJson;

  /**
   * HDO (High Demand Option) Group ID
   * @example: "group-a"
   *
   * @generated from field: string hdo_group_id = 4;
   */
  hdoGroupId?: string;

  /**
   * The activation date of the TOU table.
   * @example: "2024-06-01"
   *
   * @generated from field: google.type.Date activate_at = 5;
   */
  activateAt?: DateJson;

  /**
   * The list of seasons defined in the TOU table.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.Season seasons = 6;
   */
  seasons?: SeasonJson[];

  /**
   * The list of week profiles defined in the TOU table.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.Week weeks = 7;
   */
  weeks?: WeekJson[];

  /**
   * The list of day profiles, each defining multiple switching events.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.DayProfile day_profiles = 8;
   */
  dayProfiles?: DayProfileJson[];

  /**
   * The list of special days, such as holidays or other exceptions.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.timeofuse.SpecialDay special_days = 9;
   */
  specialDays?: SpecialDayJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.
 * Use `create(TimeOfUseTableSpecSchema)` to create a new message.
 */
export const TimeOfUseTableSpecSchema: GenMessage<TimeOfUseTableSpec, {jsonType: TimeOfUseTableSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_timeofuse_timeofuse, 6);

/**
 * Defines the possible relay states.
 *
 * @generated from enum io.clbs.openhes.models.acquisition.timeofuse.RelayState
 */
export enum RelayState {
  /**
   * Unspecified relay state. The relay state is ignored (no action).
   *
   * @generated from enum value: RELAY_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The relay connects.
   *
   * @generated from enum value: RELAY_STATE_CONNECT = 1;
   */
  CONNECT = 1,

  /**
   * The relay disconnects.
   *
   * @generated from enum value: RELAY_STATE_DISCONNECT = 2;
   */
  DISCONNECT = 2,
}

/**
 * Defines the possible relay states.
 *
 * @generated from enum io.clbs.openhes.models.acquisition.timeofuse.RelayState
 */
export type RelayStateJson = "RELAY_STATE_UNSPECIFIED" | "RELAY_STATE_CONNECT" | "RELAY_STATE_DISCONNECT";

/**
 * Describes the enum io.clbs.openhes.models.acquisition.timeofuse.RelayState.
 */
export const RelayStateSchema: GenEnum<RelayState, RelayStateJson> = /*@__PURE__*/
  enumDesc(file_acquisition_timeofuse_timeofuse, 0);

