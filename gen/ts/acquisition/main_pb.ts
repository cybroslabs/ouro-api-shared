// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,json_types=true"
// @generated from file acquisition/main.proto (package io.clbs.openhes.models.acquisition, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { MetadataFields, MetadataFieldsJson } from "../common/metadata_pb";
import { file_common_metadata } from "../common/metadata_pb";
import type { FieldDataType, FieldDataTypeJson, ListSelector, ListSelectorJson } from "../common/fields_pb";
import { file_common_fields } from "../common/fields_pb";
import type { BulkStatusCode, BulkStatusCodeJson, CommunicationBus, CommunicationBusJson, CommunicationUnit, CommunicationUnitJson, CommunicationUnitSpec, CommunicationUnitSpecJson, DeviceCommunicationUnit, DeviceCommunicationUnitJson, DeviceConfigurationRegisterSpec, DeviceConfigurationRegisterSpecJson, DeviceSpec, DeviceSpecJson, DeviceStatus, DeviceStatusJson, DriverTemplates, DriverTemplatesJson, JobAction, JobActionJson, JobActionSet, JobActionSetJson, JobDevice, JobDeviceJson, JobSettings, JobSettingsJson, JobStatus, JobStatusJson, ListOfJobDevice, ListOfJobDeviceId, ListOfJobDeviceIdJson, ListOfJobDeviceJson, MeasuredValue, MeasuredValueJson, ModemInfo, ModemInfoJson } from "./shared_pb";
import { file_acquisition_shared } from "./shared_pb";
import type { TimeOfUseTableSpec, TimeOfUseTableSpecJson } from "./timeofuse/timeofuse_pb";
import { file_acquisition_timeofuse_timeofuse } from "./timeofuse/timeofuse_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file acquisition/main.proto.
 */
export const file_acquisition_main: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_empty, file_google_protobuf_timestamp, file_common_metadata, file_common_fields, file_acquisition_shared, file_acquisition_timeofuse_timeofuse]);

/**
 * Defines a specification for creating a new communication unit.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest
 */
export type CreateCommunicationUnitRequest = Message<"io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest"> & {
  /**
   * The communication unit specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.CommunicationUnitSpec spec = 1;
   */
  spec?: CommunicationUnitSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new communication unit.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest
 */
export type CreateCommunicationUnitRequestJson = {
  /**
   * The communication unit specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.CommunicationUnitSpec spec = 1;
   */
  spec?: CommunicationUnitSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest.
 * Use `create(CreateCommunicationUnitRequestSchema)` to create a new message.
 */
export const CreateCommunicationUnitRequestSchema: GenMessage<CreateCommunicationUnitRequest, {jsonType: CreateCommunicationUnitRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 0);

/**
 * Defines a list of communication units.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationUnit
 */
export type ListOfCommunicationUnit = Message<"io.clbs.openhes.models.acquisition.ListOfCommunicationUnit"> & {
  /**
   * The list of communication unit specifications.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationUnit items = 1;
   */
  items: CommunicationUnit[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of communication units.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationUnit
 */
export type ListOfCommunicationUnitJson = {
  /**
   * The list of communication unit specifications.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationUnit items = 1;
   */
  items?: CommunicationUnitJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfCommunicationUnit.
 * Use `create(ListOfCommunicationUnitSchema)` to create a new message.
 */
export const ListOfCommunicationUnitSchema: GenMessage<ListOfCommunicationUnit, {jsonType: ListOfCommunicationUnitJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 1);

/**
 * Defines a specification for creating a new communication bus.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest
 */
export type CreateCommunicationBusRequest = Message<"io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest"> & {
  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new communication bus.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest
 */
export type CreateCommunicationBusRequestJson = {
  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest.
 * Use `create(CreateCommunicationBusRequestSchema)` to create a new message.
 */
export const CreateCommunicationBusRequestSchema: GenMessage<CreateCommunicationBusRequest, {jsonType: CreateCommunicationBusRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 2);

/**
 * Defines a list of communication buses.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationBus
 */
export type ListOfCommunicationBus = Message<"io.clbs.openhes.models.acquisition.ListOfCommunicationBus"> & {
  /**
   * The list of communication unit buses.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationBus items = 1;
   */
  items: CommunicationBus[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of communication buses.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfCommunicationBus
 */
export type ListOfCommunicationBusJson = {
  /**
   * The list of communication unit buses.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.CommunicationBus items = 1;
   */
  items?: CommunicationBusJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfCommunicationBus.
 * Use `create(ListOfCommunicationBusSchema)` to create a new message.
 */
export const ListOfCommunicationBusSchema: GenMessage<ListOfCommunicationBus, {jsonType: ListOfCommunicationBusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 3);

/**
 * Defines a specification for adding communication units to a communication bus.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest
 */
export type AddCommunicationUnitsToCommunicationBusRequest = Message<"io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest"> & {
  /**
   * The unique communication bus identifier.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId: string;

  /**
   * A list of communication unit identifiers.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId: string[];
};

/**
 * Defines a specification for adding communication units to a communication bus.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest
 */
export type AddCommunicationUnitsToCommunicationBusRequestJson = {
  /**
   * The unique communication bus identifier.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId?: string;

  /**
   * A list of communication unit identifiers.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest.
 * Use `create(AddCommunicationUnitsToCommunicationBusRequestSchema)` to create a new message.
 */
export const AddCommunicationUnitsToCommunicationBusRequestSchema: GenMessage<AddCommunicationUnitsToCommunicationBusRequest, {jsonType: AddCommunicationUnitsToCommunicationBusRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 4);

/**
 * Defines a specification for removing communication units from a communicaation bus.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest
 */
export type RemoveCommunicationUnitsFromCommunicationBusRequest = Message<"io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest"> & {
  /**
   * The unique communication bus identifier.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId: string;

  /**
   * A list of communication unit identifiers.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId: string[];
};

/**
 * Defines a specification for removing communication units from a communicaation bus.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest
 */
export type RemoveCommunicationUnitsFromCommunicationBusRequestJson = {
  /**
   * The unique communication bus identifier.
   *
   * @generated from field: string communication_bus_id = 1;
   */
  communicationBusId?: string;

  /**
   * A list of communication unit identifiers.
   *
   * @generated from field: repeated string communication_unit_id = 2;
   */
  communicationUnitId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest.
 * Use `create(RemoveCommunicationUnitsFromCommunicationBusRequestSchema)` to create a new message.
 */
export const RemoveCommunicationUnitsFromCommunicationBusRequestSchema: GenMessage<RemoveCommunicationUnitsFromCommunicationBusRequest, {jsonType: RemoveCommunicationUnitsFromCommunicationBusRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 5);

/**
 * Defines a specification for creating a new device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceRequest
 */
export type CreateDeviceRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceRequest"> & {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1;
   */
  spec?: DeviceSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceRequest
 */
export type CreateDeviceRequestJson = {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1;
   */
  spec?: DeviceSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceRequest.
 * Use `create(CreateDeviceRequestSchema)` to create a new message.
 */
export const CreateDeviceRequestSchema: GenMessage<CreateDeviceRequest, {jsonType: CreateDeviceRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 6);

/**
 * Defines a list of devices.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDevice
 */
export type ListOfDevice = Message<"io.clbs.openhes.models.acquisition.ListOfDevice"> & {
  /**
   * The list of devices.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Device items = 1;
   */
  items: Device[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of devices.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDevice
 */
export type ListOfDeviceJson = {
  /**
   * The list of devices.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Device items = 1;
   */
  items?: DeviceJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDevice.
 * Use `create(ListOfDeviceSchema)` to create a new message.
 */
export const ListOfDeviceSchema: GenMessage<ListOfDevice, {jsonType: ListOfDeviceJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 7);

/**
 * Defines a device model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Device
 */
export type Device = Message<"io.clbs.openhes.models.acquisition.Device"> & {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1;
   */
  spec?: DeviceSpec;

  /**
   * The device status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceStatus status = 2;
   */
  status?: DeviceStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a device model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Device
 */
export type DeviceJson = {
  /**
   * The device specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceSpec spec = 1;
   */
  spec?: DeviceSpecJson;

  /**
   * The device status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceStatus status = 2;
   */
  status?: DeviceStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Device.
 * Use `create(DeviceSchema)` to create a new message.
 */
export const DeviceSchema: GenMessage<Device, {jsonType: DeviceJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 8);

/**
 * Defines a partial representation of driver types for a list of devices.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesRequest
 */
export type StreamDevicesDriverTypesRequest = Message<"io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesRequest"> & {
  /**
   * The list of devices.
   *
   * @generated from field: repeated string device_id = 1;
   */
  deviceId: string[];
};

/**
 * Defines a partial representation of driver types for a list of devices.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesRequest
 */
export type StreamDevicesDriverTypesRequestJson = {
  /**
   * The list of devices.
   *
   * @generated from field: repeated string device_id = 1;
   */
  deviceId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesRequest.
 * Use `create(StreamDevicesDriverTypesRequestSchema)` to create a new message.
 */
export const StreamDevicesDriverTypesRequestSchema: GenMessage<StreamDevicesDriverTypesRequest, {jsonType: StreamDevicesDriverTypesRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 9);

/**
 * Defines the mapping of devices to their driver types in a response.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesResponse
 */
export type StreamDevicesDriverTypesResponse = Message<"io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesResponse"> & {
  /**
   * The map of devices to their driver types. The key is the unique device identifier, the value is the driver type.
   *
   * @generated from field: map<string, string> data = 1;
   */
  data: { [key: string]: string };
};

/**
 * Defines the mapping of devices to their driver types in a response.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesResponse
 */
export type StreamDevicesDriverTypesResponseJson = {
  /**
   * The map of devices to their driver types. The key is the unique device identifier, the value is the driver type.
   *
   * @generated from field: map<string, string> data = 1;
   */
  data?: { [key: string]: string };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesResponse.
 * Use `create(StreamDevicesDriverTypesResponseSchema)` to create a new message.
 */
export const StreamDevicesDriverTypesResponseSchema: GenMessage<StreamDevicesDriverTypesResponse, {jsonType: StreamDevicesDriverTypesResponseJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 10);

/**
 * Defines the list of changes in device communication units.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange
 */
export type ListOfDeviceCommunicationUnitChange = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange"> & {
  /**
   * The list of device groups.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChange items = 1;
   */
  items: DeviceCommunicationUnitChange[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines the list of changes in device communication units.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange
 */
export type ListOfDeviceCommunicationUnitChangeJson = {
  /**
   * The list of device groups.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChange items = 1;
   */
  items?: DeviceCommunicationUnitChangeJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange.
 * Use `create(ListOfDeviceCommunicationUnitChangeSchema)` to create a new message.
 */
export const ListOfDeviceCommunicationUnitChangeSchema: GenMessage<ListOfDeviceCommunicationUnitChange, {jsonType: ListOfDeviceCommunicationUnitChangeJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 11);

/**
 * Defines the changes in device communication units.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChange
 */
export type DeviceCommunicationUnitChange = Message<"io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChange"> & {
  /**
   * The device communication unit change status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChangeStatus status = 2;
   */
  status?: DeviceCommunicationUnitChangeStatus;
};

/**
 * Defines the changes in device communication units.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChange
 */
export type DeviceCommunicationUnitChangeJson = {
  /**
   * The device communication unit change status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChangeStatus status = 2;
   */
  status?: DeviceCommunicationUnitChangeStatusJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChange.
 * Use `create(DeviceCommunicationUnitChangeSchema)` to create a new message.
 */
export const DeviceCommunicationUnitChangeSchema: GenMessage<DeviceCommunicationUnitChange, {jsonType: DeviceCommunicationUnitChangeJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 12);

/**
 * Defines the status of the device communication unit change.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChangeStatus
 */
export type DeviceCommunicationUnitChangeStatus = Message<"io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChangeStatus"> & {
  /**
   * The timestamp when the change occured.
   *
   * @generated from field: google.protobuf.Timestamp change_at = 1;
   */
  changeAt?: Timestamp;

  /**
   * The unique communication unit identifier.
   *
   * @generated from field: string communication_unit_id = 2;
   */
  communicationUnitId: string;

  /**
   * The communication unit name.
   *
   * @generated from field: string communication_unit_name = 3;
   */
  communicationUnitName: string;

  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 4;
   */
  deviceId: string;

  /**
   * The device name.
   *
   * @generated from field: string device_name = 5;
   */
  deviceName: string;
};

/**
 * Defines the status of the device communication unit change.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChangeStatus
 */
export type DeviceCommunicationUnitChangeStatusJson = {
  /**
   * The timestamp when the change occured.
   *
   * @generated from field: google.protobuf.Timestamp change_at = 1;
   */
  changeAt?: TimestampJson;

  /**
   * The unique communication unit identifier.
   *
   * @generated from field: string communication_unit_id = 2;
   */
  communicationUnitId?: string;

  /**
   * The communication unit name.
   *
   * @generated from field: string communication_unit_name = 3;
   */
  communicationUnitName?: string;

  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 4;
   */
  deviceId?: string;

  /**
   * The device name.
   *
   * @generated from field: string device_name = 5;
   */
  deviceName?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceCommunicationUnitChangeStatus.
 * Use `create(DeviceCommunicationUnitChangeStatusSchema)` to create a new message.
 */
export const DeviceCommunicationUnitChangeStatusSchema: GenMessage<DeviceCommunicationUnitChangeStatus, {jsonType: DeviceCommunicationUnitChangeStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 13);

/**
 * Defines an unknown device model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.UnknownDevice
 */
export type UnknownDevice = Message<"io.clbs.openhes.models.acquisition.UnknownDevice"> & {
  /**
   * The unknown device status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.UnknownDeviceStatus status = 2;
   */
  status?: UnknownDeviceStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines an unknown device model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.UnknownDevice
 */
export type UnknownDeviceJson = {
  /**
   * The unknown device status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.UnknownDeviceStatus status = 2;
   */
  status?: UnknownDeviceStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.UnknownDevice.
 * Use `create(UnknownDeviceSchema)` to create a new message.
 */
export const UnknownDeviceSchema: GenMessage<UnknownDevice, {jsonType: UnknownDeviceJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 14);

/**
 * Defines the status of an unknown device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.UnknownDeviceStatus
 */
export type UnknownDeviceStatus = Message<"io.clbs.openhes.models.acquisition.UnknownDeviceStatus"> & {
  /**
   * The device driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;

  /**
   * The unique communication unit identifier of the device.
   *
   * @generated from field: string communication_unit_id = 2;
   */
  communicationUnitId: string;
};

/**
 * Defines the status of an unknown device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.UnknownDeviceStatus
 */
export type UnknownDeviceStatusJson = {
  /**
   * The device driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType?: string;

  /**
   * The unique communication unit identifier of the device.
   *
   * @generated from field: string communication_unit_id = 2;
   */
  communicationUnitId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.UnknownDeviceStatus.
 * Use `create(UnknownDeviceStatusSchema)` to create a new message.
 */
export const UnknownDeviceStatusSchema: GenMessage<UnknownDeviceStatus, {jsonType: UnknownDeviceStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 15);

/**
 * Defines the specification for creating a new device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest
 */
export type CreateDeviceGroupRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest"> & {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
   */
  spec?: DeviceGroupSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines the specification for creating a new device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest
 */
export type CreateDeviceGroupRequestJson = {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
   */
  spec?: DeviceGroupSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest.
 * Use `create(CreateDeviceGroupRequestSchema)` to create a new message.
 */
export const CreateDeviceGroupRequestSchema: GenMessage<CreateDeviceGroupRequest, {jsonType: CreateDeviceGroupRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 16);

/**
 * Defines a list of device groups.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceGroup
 */
export type ListOfDeviceGroup = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceGroup"> & {
  /**
   * The list of device groups.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceGroup items = 1;
   */
  items: DeviceGroup[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of device groups.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceGroup
 */
export type ListOfDeviceGroupJson = {
  /**
   * The list of device groups.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceGroup items = 1;
   */
  items?: DeviceGroupJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceGroup.
 * Use `create(ListOfDeviceGroupSchema)` to create a new message.
 */
export const ListOfDeviceGroupSchema: GenMessage<ListOfDeviceGroup, {jsonType: ListOfDeviceGroupJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 17);

/**
 * Defines a partial representation of a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroup
 */
export type StreamDeviceGroup = Message<"io.clbs.openhes.models.acquisition.StreamDeviceGroup"> & {
  /**
   * The oneof field containing the device group partial data.
   *
   * @generated from oneof io.clbs.openhes.models.acquisition.StreamDeviceGroup.parts
   */
  parts: {
    /**
     * The device group specification.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
     */
    value: DeviceGroupSpec;
    case: "spec";
  } | {
    /**
     * The device group status.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus status = 2;
     */
    value: StreamDeviceGroupStatus;
    case: "status";
  } | {
    /**
     * The metadata fields.
     *
     * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
     */
    value: MetadataFields;
    case: "metadata";
  } | { case: undefined; value?: undefined };
};

/**
 * Defines a partial representation of a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroup
 */
export type StreamDeviceGroupJson = {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
   */
  spec?: DeviceGroupSpecJson;

  /**
   * The device group status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus status = 2;
   */
  status?: StreamDeviceGroupStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamDeviceGroup.
 * Use `create(StreamDeviceGroupSchema)` to create a new message.
 */
export const StreamDeviceGroupSchema: GenMessage<StreamDeviceGroup, {jsonType: StreamDeviceGroupJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 18);

/**
 * Defines a device group model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroup
 */
export type DeviceGroup = Message<"io.clbs.openhes.models.acquisition.DeviceGroup"> & {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
   */
  spec?: DeviceGroupSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a device group model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroup
 */
export type DeviceGroupJson = {
  /**
   * The device group specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceGroupSpec spec = 1;
   */
  spec?: DeviceGroupSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroup.
 * Use `create(DeviceGroupSchema)` to create a new message.
 */
export const DeviceGroupSchema: GenMessage<DeviceGroup, {jsonType: DeviceGroupJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 19);

/**
 * Defines a device group sepcification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupSpec
 */
export type DeviceGroupSpec = Message<"io.clbs.openhes.models.acquisition.DeviceGroupSpec"> & {
  /**
   * The external identifier of the communication unit.
   *
   * @generated from field: string external_id = 1;
   */
  externalId: string;
};

/**
 * Defines a device group sepcification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupSpec
 */
export type DeviceGroupSpecJson = {
  /**
   * The external identifier of the communication unit.
   *
   * @generated from field: string external_id = 1;
   */
  externalId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroupSpec.
 * Use `create(DeviceGroupSpecSchema)` to create a new message.
 */
export const DeviceGroupSpecSchema: GenMessage<DeviceGroupSpec, {jsonType: DeviceGroupSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 20);

/**
 * Defines a partial representation of a device group status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus
 */
export type StreamDeviceGroupStatus = Message<"io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus"> & {
  /**
   * The list of devices that are part of the group. The key represents the device identifier, the value contains additional information.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice> devices = 4;
   */
  devices: { [key: string]: DeviceGroupStatusDevice };
};

/**
 * Defines a partial representation of a device group status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus
 */
export type StreamDeviceGroupStatusJson = {
  /**
   * The list of devices that are part of the group. The key represents the device identifier, the value contains additional information.
   *
   * @generated from field: map<string, io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice> devices = 4;
   */
  devices?: { [key: string]: DeviceGroupStatusDeviceJson };
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.StreamDeviceGroupStatus.
 * Use `create(StreamDeviceGroupStatusSchema)` to create a new message.
 */
export const StreamDeviceGroupStatusSchema: GenMessage<StreamDeviceGroupStatus, {jsonType: StreamDeviceGroupStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 21);

/**
 * Defines the status of a device within a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice
 */
export type DeviceGroupStatusDevice = Message<"io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice"> & {
  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;
};

/**
 * Defines the status of a device within a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice
 */
export type DeviceGroupStatusDeviceJson = {
  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceGroupStatusDevice.
 * Use `create(DeviceGroupStatusDeviceSchema)` to create a new message.
 */
export const DeviceGroupStatusDeviceSchema: GenMessage<DeviceGroupStatusDevice, {jsonType: DeviceGroupStatusDeviceJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 22);

/**
 * Defines a specification for adding or updating communication units linked to a device .
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest
 */
export type SetDeviceCommunicationUnitsRequest = Message<"io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest"> & {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit communication_units = 2;
   */
  communicationUnits: DeviceCommunicationUnit[];
};

/**
 * Defines a specification for adding or updating communication units linked to a device .
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest
 */
export type SetDeviceCommunicationUnitsRequestJson = {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId?: string;

  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit communication_units = 2;
   */
  communicationUnits?: DeviceCommunicationUnitJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest.
 * Use `create(SetDeviceCommunicationUnitsRequestSchema)` to create a new message.
 */
export const SetDeviceCommunicationUnitsRequestSchema: GenMessage<SetDeviceCommunicationUnitsRequest, {jsonType: SetDeviceCommunicationUnitsRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 23);

/**
 * Defines a list of communication units linked to a device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit
 */
export type ListOfDeviceCommunicationUnit = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit"> & {
  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit items = 1;
   */
  items: DeviceCommunicationUnit[];

  /**
   * The total number of items in the list .
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of communication units linked to a device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit
 */
export type ListOfDeviceCommunicationUnitJson = {
  /**
   * The list of linked communication units.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceCommunicationUnit items = 1;
   */
  items?: DeviceCommunicationUnitJson[];

  /**
   * The total number of items in the list .
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit.
 * Use `create(ListOfDeviceCommunicationUnitSchema)` to create a new message.
 */
export const ListOfDeviceCommunicationUnitSchema: GenMessage<ListOfDeviceCommunicationUnit, {jsonType: ListOfDeviceCommunicationUnitJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 24);

/**
 * Defines a specification for adding devices to a device groups.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest
 */
export type AddDevicesToGroupRequest = Message<"io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest"> & {
  /**
   * The unique device group identifier.
   *
   * @generated from field: string group_id = 1;
   */
  groupId: string;

  /**
   * A list of device identifiers.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId: string[];
};

/**
 * Defines a specification for adding devices to a device groups.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest
 */
export type AddDevicesToGroupRequestJson = {
  /**
   * The unique device group identifier.
   *
   * @generated from field: string group_id = 1;
   */
  groupId?: string;

  /**
   * A list of device identifiers.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest.
 * Use `create(AddDevicesToGroupRequestSchema)` to create a new message.
 */
export const AddDevicesToGroupRequestSchema: GenMessage<AddDevicesToGroupRequest, {jsonType: AddDevicesToGroupRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 25);

/**
 * Defines a specification for removing devices from a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest
 */
export type RemoveDevicesFromGroupRequest = Message<"io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest"> & {
  /**
   * The unique device group identifier.
   *
   * @generated from field: string group_id = 1;
   */
  groupId: string;

  /**
   * A list of device identifiers.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId: string[];
};

/**
 * Defines a specification for removing devices from a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest
 */
export type RemoveDevicesFromGroupRequestJson = {
  /**
   * The unique device group identifier.
   *
   * @generated from field: string group_id = 1;
   */
  groupId?: string;

  /**
   * A list of device identifiers.
   *
   * @generated from field: repeated string device_id = 2;
   */
  deviceId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest.
 * Use `create(RemoveDevicesFromGroupRequestSchema)` to create a new message.
 */
export const RemoveDevicesFromGroupRequestSchema: GenMessage<RemoveDevicesFromGroupRequest, {jsonType: RemoveDevicesFromGroupRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 26);

/**
 * Defines a list of devices withing a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest
 */
export type ListDeviceGroupDevicesRequest = Message<"io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest"> & {
  /**
   * The unique device group identifier.
   *
   * @generated from field: string group_id = 1;
   */
  groupId: string;

  /**
   * The listing criteria.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelector;
};

/**
 * Defines a list of devices withing a device group.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest
 */
export type ListDeviceGroupDevicesRequestJson = {
  /**
   * The unique device group identifier.
   *
   * @generated from field: string group_id = 1;
   */
  groupId?: string;

  /**
   * The listing criteria.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelectorJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest.
 * Use `create(ListDeviceGroupDevicesRequestSchema)` to create a new message.
 */
export const ListDeviceGroupDevicesRequestSchema: GenMessage<ListDeviceGroupDevicesRequest, {jsonType: ListDeviceGroupDevicesRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 27);

/**
 * Defines a specification for creating a new bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateBulkRequest
 */
export type CreateBulkRequest = Message<"io.clbs.openhes.models.acquisition.CreateBulkRequest"> & {
  /**
   * The bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1;
   */
  spec?: BulkSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateBulkRequest
 */
export type CreateBulkRequestJson = {
  /**
   * The bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1;
   */
  spec?: BulkSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateBulkRequest.
 * Use `create(CreateBulkRequestSchema)` to create a new message.
 */
export const CreateBulkRequestSchema: GenMessage<CreateBulkRequest, {jsonType: CreateBulkRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 28);

/**
 * Defines a list of bulks.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulk
 */
export type ListOfBulk = Message<"io.clbs.openhes.models.acquisition.ListOfBulk"> & {
  /**
   * The list of bulks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Bulk items = 1;
   */
  items: Bulk[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of bulks.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulk
 */
export type ListOfBulkJson = {
  /**
   * The list of bulks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Bulk items = 1;
   */
  items?: BulkJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfBulk.
 * Use `create(ListOfBulkSchema)` to create a new message.
 */
export const ListOfBulkSchema: GenMessage<ListOfBulk, {jsonType: ListOfBulkJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 29);

/**
 * Defines a bulk model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Bulk
 */
export type Bulk = Message<"io.clbs.openhes.models.acquisition.Bulk"> & {
  /**
   * The bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1;
   */
  spec?: BulkSpec;

  /**
   * The bulk status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a bulk model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Bulk
 */
export type BulkJson = {
  /**
   * The bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkSpec spec = 1;
   */
  spec?: BulkSpecJson;

  /**
   * The bulk status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Bulk.
 * Use `create(BulkSchema)` to create a new message.
 */
export const BulkSchema: GenMessage<Bulk, {jsonType: BulkJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 30);

/**
 * Defines a bulk specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkSpec
 */
export type BulkSpec = Message<"io.clbs.openhes.models.acquisition.BulkSpec"> & {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier that represents a non-homogenous group with various device types.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId: string;

  /**
   * @generated from oneof io.clbs.openhes.models.acquisition.BulkSpec.device
   */
  device: {
    /**
     * The list of devices in the bulk.
     *
     * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDeviceId devices = 2;
     */
    value: ListOfJobDeviceId;
    case: "devices";
  } | {
    /**
     * The unique device group identifier.
     *
     * @generated from field: string device_group_id = 3;
     */
    value: string;
    case: "deviceGroupId";
  } | { case: undefined; value?: undefined };

  /**
   * The job settings shared across all jobs in the bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettings;

  /**
   * The list of actions to be executed on each device in the bulk.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobActionSet actions = 5;
   */
  actions: JobActionSet[];
};

/**
 * Defines a bulk specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkSpec
 */
export type BulkSpecJson = {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier that represents a non-homogenous group with various device types.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId?: string;

  /**
   * The list of devices in the bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDeviceId devices = 2;
   */
  devices?: ListOfJobDeviceIdJson;

  /**
   * The unique device group identifier.
   *
   * @generated from field: string device_group_id = 3;
   */
  deviceGroupId?: string;

  /**
   * The job settings shared across all jobs in the bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettingsJson;

  /**
   * The list of actions to be executed on each device in the bulk.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobActionSet actions = 5;
   */
  actions?: JobActionSetJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkSpec.
 * Use `create(BulkSpecSchema)` to create a new message.
 */
export const BulkSpecSchema: GenMessage<BulkSpec, {jsonType: BulkSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 31);

/**
 * Defines the status of a bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkStatus
 */
export type BulkStatus = Message<"io.clbs.openhes.models.acquisition.BulkStatus"> & {
  /**
   * The overall bulk status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatusCode status = 1;
   */
  status: BulkStatusCode;

  /**
   * The total number of jobs in the bulk.
   *
   * @generated from field: int32 jobs_count = 2;
   */
  jobsCount: number;

  /**
   * The number of jobs that have finished.
   *
   * @generated from field: int32 jobs_finished = 3;
   */
  jobsFinished: number;

  /**
   * The number of jobs that finished successfully.
   *
   * @generated from field: int32 jobs_successful = 4;
   */
  jobsSuccessful: number;

  /**
   * The timestamp when the bulk was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * The timestamp when the bulk started.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 6;
   */
  startedAt?: Timestamp;

  /**
   * The timestamp when the bulk finished.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 7;
   */
  finishedAt?: Timestamp;
};

/**
 * Defines the status of a bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkStatus
 */
export type BulkStatusJson = {
  /**
   * The overall bulk status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatusCode status = 1;
   */
  status?: BulkStatusCodeJson;

  /**
   * The total number of jobs in the bulk.
   *
   * @generated from field: int32 jobs_count = 2;
   */
  jobsCount?: number;

  /**
   * The number of jobs that have finished.
   *
   * @generated from field: int32 jobs_finished = 3;
   */
  jobsFinished?: number;

  /**
   * The number of jobs that finished successfully.
   *
   * @generated from field: int32 jobs_successful = 4;
   */
  jobsSuccessful?: number;

  /**
   * The timestamp when the bulk was created.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: TimestampJson;

  /**
   * The timestamp when the bulk started.
   *
   * @generated from field: google.protobuf.Timestamp started_at = 6;
   */
  startedAt?: TimestampJson;

  /**
   * The timestamp when the bulk finished.
   *
   * @generated from field: google.protobuf.Timestamp finished_at = 7;
   */
  finishedAt?: TimestampJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkStatus.
 * Use `create(BulkStatusSchema)` to create a new message.
 */
export const BulkStatusSchema: GenMessage<BulkStatus, {jsonType: BulkStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 32);

/**
 * Defines the bulk job model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkJob
 */
export type BulkJob = Message<"io.clbs.openhes.models.acquisition.BulkJob"> & {
  /**
   * The job specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkJobSpec spec = 1;
   */
  spec?: BulkJobSpec;

  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatus status = 2;
   */
  status?: JobStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines the bulk job model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkJob
 */
export type BulkJobJson = {
  /**
   * The job specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkJobSpec spec = 1;
   */
  spec?: BulkJobSpecJson;

  /**
   * The job status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobStatus status = 2;
   */
  status?: JobStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkJob.
 * Use `create(BulkJobSchema)` to create a new message.
 */
export const BulkJobSchema: GenMessage<BulkJob, {jsonType: BulkJobJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 33);

/**
 * Defines the specification of a bulk job.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkJobSpec
 */
export type BulkJobSpec = Message<"io.clbs.openhes.models.acquisition.BulkJobSpec"> & {
  /**
   * The device information.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobDevice device = 1;
   */
  device?: JobDevice;
};

/**
 * Defines the specification of a bulk job.
 *
 * @generated from message io.clbs.openhes.models.acquisition.BulkJobSpec
 */
export type BulkJobSpecJson = {
  /**
   * The device information.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobDevice device = 1;
   */
  device?: JobDeviceJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.BulkJobSpec.
 * Use `create(BulkJobSpecSchema)` to create a new message.
 */
export const BulkJobSpecSchema: GenMessage<BulkJobSpec, {jsonType: BulkJobSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 34);

/**
 * Defines a specification for listing of jobs within a specified bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListBulkJobsRequest
 */
export type ListBulkJobsRequest = Message<"io.clbs.openhes.models.acquisition.ListBulkJobsRequest"> & {
  /**
   * The unique bulk identifier.
   *
   * @generated from field: string bulk_id = 1;
   */
  bulkId: string;

  /**
   * The listing criteria.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelector;
};

/**
 * Defines a specification for listing of jobs within a specified bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListBulkJobsRequest
 */
export type ListBulkJobsRequestJson = {
  /**
   * The unique bulk identifier.
   *
   * @generated from field: string bulk_id = 1;
   */
  bulkId?: string;

  /**
   * The listing criteria.
   *
   * @generated from field: io.clbs.openhes.models.common.ListSelector selector = 2;
   */
  selector?: ListSelectorJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListBulkJobsRequest.
 * Use `create(ListBulkJobsRequestSchema)` to create a new message.
 */
export const ListBulkJobsRequestSchema: GenMessage<ListBulkJobsRequest, {jsonType: ListBulkJobsRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 35);

/**
 * Defines a list of jobs within a bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulkJob
 */
export type ListOfBulkJob = Message<"io.clbs.openhes.models.acquisition.ListOfBulkJob"> & {
  /**
   * The list of jobs.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.BulkJob items = 1;
   */
  items: BulkJob[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of jobs within a bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfBulkJob
 */
export type ListOfBulkJobJson = {
  /**
   * The list of jobs.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.BulkJob items = 1;
   */
  items?: BulkJobJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfBulkJob.
 * Use `create(ListOfBulkJobSchema)` to create a new message.
 */
export const ListOfBulkJobSchema: GenMessage<ListOfBulkJob, {jsonType: ListOfBulkJobJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 36);

/**
 * Defines a specification for creating a new proxy bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateProxyBulkRequest
 */
export type CreateProxyBulkRequest = Message<"io.clbs.openhes.models.acquisition.CreateProxyBulkRequest"> & {
  /**
   * The proxy bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1;
   */
  spec?: ProxyBulkSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new proxy bulk.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateProxyBulkRequest
 */
export type CreateProxyBulkRequestJson = {
  /**
   * The proxy bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1;
   */
  spec?: ProxyBulkSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateProxyBulkRequest.
 * Use `create(CreateProxyBulkRequestSchema)` to create a new message.
 */
export const CreateProxyBulkRequestSchema: GenMessage<CreateProxyBulkRequest, {jsonType: CreateProxyBulkRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 37);

/**
 * Defines a proxy bulk specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulkSpec
 */
export type ProxyBulkSpec = Message<"io.clbs.openhes.models.acquisition.ProxyBulkSpec"> & {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier that represents a non-homogenous group with various device types.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId: string;

  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 2;
   */
  driverType: string;

  /**
   * The list of devices in the proxy bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDevice devices = 3;
   */
  devices?: ListOfJobDevice;

  /**
   * The job settings shared across the bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettings;

  /**
   * The list of actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobAction actions = 5;
   */
  actions: JobAction[];
};

/**
 * Defines a proxy bulk specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulkSpec
 */
export type ProxyBulkSpecJson = {
  /**
   * @gqltype: UUID
   *
   * The correlation identifier that represents a non-homogenous group with various device types.
   *
   * @generated from field: string correlation_id = 1;
   */
  correlationId?: string;

  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 2;
   */
  driverType?: string;

  /**
   * The list of devices in the proxy bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ListOfJobDevice devices = 3;
   */
  devices?: ListOfJobDeviceJson;

  /**
   * The job settings shared across the bulk.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.JobSettings settings = 4;
   */
  settings?: JobSettingsJson;

  /**
   * The list of actions to be executed.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.JobAction actions = 5;
   */
  actions?: JobActionJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ProxyBulkSpec.
 * Use `create(ProxyBulkSpecSchema)` to create a new message.
 */
export const ProxyBulkSpecSchema: GenMessage<ProxyBulkSpec, {jsonType: ProxyBulkSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 38);

/**
 * Defines a proxy bulk model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulk
 */
export type ProxyBulk = Message<"io.clbs.openhes.models.acquisition.ProxyBulk"> & {
  /**
   * The proxy bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1;
   */
  spec?: ProxyBulkSpec;

  /**
   * The proxy bulk status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a proxy bulk model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ProxyBulk
 */
export type ProxyBulkJson = {
  /**
   * The proxy bulk specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ProxyBulkSpec spec = 1;
   */
  spec?: ProxyBulkSpecJson;

  /**
   * The proxy bulk status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.BulkStatus status = 2;
   */
  status?: BulkStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ProxyBulk.
 * Use `create(ProxyBulkSchema)` to create a new message.
 */
export const ProxyBulkSchema: GenMessage<ProxyBulk, {jsonType: ProxyBulkJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 39);

/**
 * Defines a specification for creating or updating a modem pool.
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetModemPoolRequest
 */
export type SetModemPoolRequest = Message<"io.clbs.openhes.models.acquisition.SetModemPoolRequest"> & {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1;
   */
  spec?: ModemPoolSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating or updating a modem pool.
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetModemPoolRequest
 */
export type SetModemPoolRequestJson = {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1;
   */
  spec?: ModemPoolSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetModemPoolRequest.
 * Use `create(SetModemPoolRequestSchema)` to create a new message.
 */
export const SetModemPoolRequestSchema: GenMessage<SetModemPoolRequest, {jsonType: SetModemPoolRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 40);

/**
 * Defines a list of modem pools.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfModemPool
 */
export type ListOfModemPool = Message<"io.clbs.openhes.models.acquisition.ListOfModemPool"> & {
  /**
   * The list of modem pools.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemPool items = 1;
   */
  items: ModemPool[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of modem pools.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfModemPool
 */
export type ListOfModemPoolJson = {
  /**
   * The list of modem pools.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemPool items = 1;
   */
  items?: ModemPoolJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfModemPool.
 * Use `create(ListOfModemPoolSchema)` to create a new message.
 */
export const ListOfModemPoolSchema: GenMessage<ListOfModemPool, {jsonType: ListOfModemPoolJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 41);

/**
 * Defines a modem pool specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolSpec
 */
export type ModemPoolSpec = Message<"io.clbs.openhes.models.acquisition.ModemPoolSpec"> & {
};

/**
 * Defines a modem pool specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolSpec
 */
export type ModemPoolSpecJson = {
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemPoolSpec.
 * Use `create(ModemPoolSpecSchema)` to create a new message.
 */
export const ModemPoolSpecSchema: GenMessage<ModemPoolSpec, {jsonType: ModemPoolSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 42);

/**
 * Defines a modem pool status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolStatus
 */
export type ModemPoolStatus = Message<"io.clbs.openhes.models.acquisition.ModemPoolStatus"> & {
  /**
   * The list of modems in the pool.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemInfo modems = 1;
   */
  modems: ModemInfo[];
};

/**
 * Defines a modem pool status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemPoolStatus
 */
export type ModemPoolStatusJson = {
  /**
   * The list of modems in the pool.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.ModemInfo modems = 1;
   */
  modems?: ModemInfoJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemPoolStatus.
 * Use `create(ModemPoolStatusSchema)` to create a new message.
 */
export const ModemPoolStatusSchema: GenMessage<ModemPoolStatus, {jsonType: ModemPoolStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 43);

/**
 * Defines a modem pool model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemPool
 */
export type ModemPool = Message<"io.clbs.openhes.models.acquisition.ModemPool"> & {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1;
   */
  spec?: ModemPoolSpec;

  /**
   * The modem pool status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolStatus status = 2;
   */
  status?: ModemPoolStatus;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a modem pool model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ModemPool
 */
export type ModemPoolJson = {
  /**
   * The modem pool specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolSpec spec = 1;
   */
  spec?: ModemPoolSpecJson;

  /**
   * The modem pool status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemPoolStatus status = 2;
   */
  status?: ModemPoolStatusJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ModemPool.
 * Use `create(ModemPoolSchema)` to create a new message.
 */
export const ModemPoolSchema: GenMessage<ModemPool, {jsonType: ModemPoolJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 44);

/**
 * Defines a specification for creating or updating modems linked to a modem pool.
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetModemRequest
 */
export type SetModemRequest = Message<"io.clbs.openhes.models.acquisition.SetModemRequest"> & {
  /**
   * The unique modem pool identifier. Required for update operation.
   *
   * @generated from field: string pool_id = 1;
   */
  poolId: string;

  /**
   * The modem specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemInfo modem = 2;
   */
  modem?: ModemInfo;
};

/**
 * Defines a specification for creating or updating modems linked to a modem pool.
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetModemRequest
 */
export type SetModemRequestJson = {
  /**
   * The unique modem pool identifier. Required for update operation.
   *
   * @generated from field: string pool_id = 1;
   */
  poolId?: string;

  /**
   * The modem specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.ModemInfo modem = 2;
   */
  modem?: ModemInfoJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetModemRequest.
 * Use `create(SetModemRequestSchema)` to create a new message.
 */
export const SetModemRequestSchema: GenMessage<SetModemRequest, {jsonType: SetModemRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 45);

/**
 * Defines a specification for creating or updating a driver.
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetDriver
 */
export type SetDriver = Message<"io.clbs.openhes.models.acquisition.SetDriver"> & {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1;
   */
  spec?: DriverSpec;
};

/**
 * Defines a specification for creating or updating a driver.
 *
 * @generated from message io.clbs.openhes.models.acquisition.SetDriver
 */
export type SetDriverJson = {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1;
   */
  spec?: DriverSpecJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.SetDriver.
 * Use `create(SetDriverSchema)` to create a new message.
 */
export const SetDriverSchema: GenMessage<SetDriver, {jsonType: SetDriverJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 46);

/**
 * Defines a list of drivers.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDriver
 */
export type ListOfDriver = Message<"io.clbs.openhes.models.acquisition.ListOfDriver"> & {
  /**
   * The list of drivers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Driver items = 1;
   */
  items: Driver[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of drivers.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDriver
 */
export type ListOfDriverJson = {
  /**
   * The list of drivers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Driver items = 1;
   */
  items?: DriverJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDriver.
 * Use `create(ListOfDriverSchema)` to create a new message.
 */
export const ListOfDriverSchema: GenMessage<ListOfDriver, {jsonType: ListOfDriverJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 47);

/**
 * Defines a driver model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Driver
 */
export type Driver = Message<"io.clbs.openhes.models.acquisition.Driver"> & {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1;
   */
  spec?: DriverSpec;

  /**
   * The driver status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverStatus status = 2;
   */
  status?: DriverStatus;
};

/**
 * Defines a driver model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Driver
 */
export type DriverJson = {
  /**
   * The driver specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverSpec spec = 1;
   */
  spec?: DriverSpecJson;

  /**
   * The driver status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverStatus status = 2;
   */
  status?: DriverStatusJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Driver.
 * Use `create(DriverSchema)` to create a new message.
 */
export const DriverSchema: GenMessage<Driver, {jsonType: DriverJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 48);

/**
 * Defines the driver specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DriverSpec
 */
export type DriverSpec = Message<"io.clbs.openhes.models.acquisition.DriverSpec"> & {
  /**
   * The driver version. The format is not defined. Typically matches the docker image tag or another user-readable version string.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The port on which the driver's gRPC listens.
   *
   * @generated from field: uint32 listening_port = 2;
   */
  listeningPort: number;

  /**
   * The technical/internal ID of the driver.
   *
   * @generated from field: string driver_type = 3;
   */
  driverType: string;

  /**
   * The maximum number of concurrent jobs the driver can handle. A value of `0` is not allowed. The maximum value should respect `typical_mem_usage` to avoid exceeding memory resources!
   *
   * @generated from field: int32 max_concurrent_jobs = 4;
   */
  maxConcurrentJobs: number;

  /**
   * The maximum cascade depth the driver can handle. Value `1` means that cascading jobs are not supported. Value `2` means one level of cascading is allowed, and so on.
   * Value `0` means that the driver can handle any number of cascading jobs.
   *
   * @generated from field: uint32 max_cascade_depth = 5;
   */
  maxCascadeDepth: number;

  /**
   * The typical memory usage of the driver in `MB`.
   *
   * @generated from field: int32 typical_mem_usage = 6;
   */
  typicalMemUsage: number;

  /**
   * The connection and action templates.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverTemplates templates = 7;
   */
  templates?: DriverTemplates;

  /**
   * The display name of the driver. Must be in the following format: `<manufacturer> <device_type> [<device_type_version>]`.
   * Must respect upper/lower case.
   * Generic drivers, such as `cybros labs generic`, must be in the following format: `<driver_company_name> generic`.
   * @example: `Addax NP73E`, `cybros labs generic`, `Landis+Gyr S650 v2`
   *
   * @generated from field: string display_name = 8;
   */
  displayName: string;
};

/**
 * Defines the driver specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DriverSpec
 */
export type DriverSpecJson = {
  /**
   * The driver version. The format is not defined. Typically matches the docker image tag or another user-readable version string.
   *
   * @generated from field: string version = 1;
   */
  version?: string;

  /**
   * The port on which the driver's gRPC listens.
   *
   * @generated from field: uint32 listening_port = 2;
   */
  listeningPort?: number;

  /**
   * The technical/internal ID of the driver.
   *
   * @generated from field: string driver_type = 3;
   */
  driverType?: string;

  /**
   * The maximum number of concurrent jobs the driver can handle. A value of `0` is not allowed. The maximum value should respect `typical_mem_usage` to avoid exceeding memory resources!
   *
   * @generated from field: int32 max_concurrent_jobs = 4;
   */
  maxConcurrentJobs?: number;

  /**
   * The maximum cascade depth the driver can handle. Value `1` means that cascading jobs are not supported. Value `2` means one level of cascading is allowed, and so on.
   * Value `0` means that the driver can handle any number of cascading jobs.
   *
   * @generated from field: uint32 max_cascade_depth = 5;
   */
  maxCascadeDepth?: number;

  /**
   * The typical memory usage of the driver in `MB`.
   *
   * @generated from field: int32 typical_mem_usage = 6;
   */
  typicalMemUsage?: number;

  /**
   * The connection and action templates.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DriverTemplates templates = 7;
   */
  templates?: DriverTemplatesJson;

  /**
   * The display name of the driver. Must be in the following format: `<manufacturer> <device_type> [<device_type_version>]`.
   * Must respect upper/lower case.
   * Generic drivers, such as `cybros labs generic`, must be in the following format: `<driver_company_name> generic`.
   * @example: `Addax NP73E`, `cybros labs generic`, `Landis+Gyr S650 v2`
   *
   * @generated from field: string display_name = 8;
   */
  displayName?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DriverSpec.
 * Use `create(DriverSpecSchema)` to create a new message.
 */
export const DriverSpecSchema: GenMessage<DriverSpec, {jsonType: DriverSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 49);

/**
 * Defines the driver status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DriverStatus
 */
export type DriverStatus = Message<"io.clbs.openhes.models.acquisition.DriverStatus"> & {
  /**
   * Indicates whether this is the latest installed version of the driver in the system. Note that this does not necessarily mean it is the latest released version!
   *
   * @generated from field: bool is_latest = 1;
   */
  isLatest: boolean;

  /**
   * Indicates whether the update from the previous version (if any) has finished.
   *
   * @generated from field: bool update_finished = 2;
   */
  updateFinished: boolean;
};

/**
 * Defines the driver status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DriverStatus
 */
export type DriverStatusJson = {
  /**
   * Indicates whether this is the latest installed version of the driver in the system. Note that this does not necessarily mean it is the latest released version!
   *
   * @generated from field: bool is_latest = 1;
   */
  isLatest?: boolean;

  /**
   * Indicates whether the update from the previous version (if any) has finished.
   *
   * @generated from field: bool update_finished = 2;
   */
  updateFinished?: boolean;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DriverStatus.
 * Use `create(DriverStatusSchema)` to create a new message.
 */
export const DriverStatusSchema: GenMessage<DriverStatus, {jsonType: DriverStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 50);

/**
 * Defines a specification for creating a new variable.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateVariableRequest
 */
export type CreateVariableRequest = Message<"io.clbs.openhes.models.acquisition.CreateVariableRequest"> & {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1;
   */
  spec?: VariableSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new variable.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateVariableRequest
 */
export type CreateVariableRequestJson = {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1;
   */
  spec?: VariableSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateVariableRequest.
 * Use `create(CreateVariableRequestSchema)` to create a new message.
 */
export const CreateVariableRequestSchema: GenMessage<CreateVariableRequest, {jsonType: CreateVariableRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 51);

/**
 * Defines a list of variables.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfVariable
 */
export type ListOfVariable = Message<"io.clbs.openhes.models.acquisition.ListOfVariable"> & {
  /**
   * The list of variables.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Variable items = 1;
   */
  items: Variable[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of variables.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfVariable
 */
export type ListOfVariableJson = {
  /**
   * The list of variables.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Variable items = 1;
   */
  items?: VariableJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfVariable.
 * Use `create(ListOfVariableSchema)` to create a new message.
 */
export const ListOfVariableSchema: GenMessage<ListOfVariable, {jsonType: ListOfVariableJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 52);

/**
 * Defines a variable model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Variable
 */
export type Variable = Message<"io.clbs.openhes.models.acquisition.Variable"> & {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1;
   */
  spec?: VariableSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a variable model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.Variable
 */
export type VariableJson = {
  /**
   * The variable specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.VariableSpec spec = 1;
   */
  spec?: VariableSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.Variable.
 * Use `create(VariableSchema)` to create a new message.
 */
export const VariableSchema: GenMessage<Variable, {jsonType: VariableJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 53);

/**
 * Defines a variable specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.VariableSpec
 */
export type VariableSpec = Message<"io.clbs.openhes.models.acquisition.VariableSpec"> & {
  /**
   * The list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 1;
   */
  registerId: string[];

  /**
   * The data type of the variable. Only registers of the same data type can be linked to the variable.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDataType data_type = 2;
   */
  dataType: FieldDataType;

  /**
   * Indicates whether the returned data for this variabe should exclude values at `from` timestamp. If set to `true`, the returned device data returned for this variable dos not include values at `from` timestamp. Default value is `false`.
   *
   * @generated from field: bool exclude_data_from = 3;
   */
  excludeDataFrom: boolean;
};

/**
 * Defines a variable specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.VariableSpec
 */
export type VariableSpecJson = {
  /**
   * The list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 1;
   */
  registerId?: string[];

  /**
   * The data type of the variable. Only registers of the same data type can be linked to the variable.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldDataType data_type = 2;
   */
  dataType?: FieldDataTypeJson;

  /**
   * Indicates whether the returned data for this variabe should exclude values at `from` timestamp. If set to `true`, the returned device data returned for this variable dos not include values at `from` timestamp. Default value is `false`.
   *
   * @generated from field: bool exclude_data_from = 3;
   */
  excludeDataFrom?: boolean;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.VariableSpec.
 * Use `create(VariableSpecSchema)` to create a new message.
 */
export const VariableSpecSchema: GenMessage<VariableSpec, {jsonType: VariableSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 54);

/**
 * Defines a specification for adding registers to a variable.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest
 */
export type AddRegisterToVariableRequest = Message<"io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest"> & {
  /**
   * The unique variable identifier.
   *
   * @generated from field: string variable_id = 1;
   */
  variableId: string;

  /**
   * A list of register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId: string[];
};

/**
 * Defines a specification for adding registers to a variable.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest
 */
export type AddRegisterToVariableRequestJson = {
  /**
   * The unique variable identifier.
   *
   * @generated from field: string variable_id = 1;
   */
  variableId?: string;

  /**
   * A list of register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest.
 * Use `create(AddRegisterToVariableRequestSchema)` to create a new message.
 */
export const AddRegisterToVariableRequestSchema: GenMessage<AddRegisterToVariableRequest, {jsonType: AddRegisterToVariableRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 55);

/**
 * Defines a specification for removing registers from a variable.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest
 */
export type RemoveRegisterFromVariableRequest = Message<"io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest"> & {
  /**
   * The unique identifier of the variable.
   *
   * @generated from field: string variable_id = 1;
   */
  variableId: string;

  /**
   * A list of register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId: string[];
};

/**
 * Defines a specification for removing registers from a variable.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest
 */
export type RemoveRegisterFromVariableRequestJson = {
  /**
   * The unique identifier of the variable.
   *
   * @generated from field: string variable_id = 1;
   */
  variableId?: string;

  /**
   * A list of register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest.
 * Use `create(RemoveRegisterFromVariableRequestSchema)` to create a new message.
 */
export const RemoveRegisterFromVariableRequestSchema: GenMessage<RemoveRegisterFromVariableRequest, {jsonType: RemoveRegisterFromVariableRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 56);

/**
 * Defines the specification for creating a new device configuration register.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest
 */
export type CreateDeviceConfigurationRegisterRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest"> & {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1;
   */
  spec?: DeviceConfigurationRegisterSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines the specification for creating a new device configuration register.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest
 */
export type CreateDeviceConfigurationRegisterRequestJson = {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1;
   */
  spec?: DeviceConfigurationRegisterSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest.
 * Use `create(CreateDeviceConfigurationRegisterRequestSchema)` to create a new message.
 */
export const CreateDeviceConfigurationRegisterRequestSchema: GenMessage<CreateDeviceConfigurationRegisterRequest, {jsonType: CreateDeviceConfigurationRegisterRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 57);

/**
 * Defines a lost of device configuration registers.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister
 */
export type ListOfDeviceConfigurationRegister = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister"> & {
  /**
   * The list of registers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationRegister items = 1;
   */
  items: DeviceConfigurationRegister[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a lost of device configuration registers.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister
 */
export type ListOfDeviceConfigurationRegisterJson = {
  /**
   * The list of registers.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationRegister items = 1;
   */
  items?: DeviceConfigurationRegisterJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister.
 * Use `create(ListOfDeviceConfigurationRegisterSchema)` to create a new message.
 */
export const ListOfDeviceConfigurationRegisterSchema: GenMessage<ListOfDeviceConfigurationRegister, {jsonType: ListOfDeviceConfigurationRegisterJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 58);

/**
 * Defines a device configuration register specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegister
 */
export type DeviceConfigurationRegister = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationRegister"> & {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1;
   */
  spec?: DeviceConfigurationRegisterSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a device configuration register specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegister
 */
export type DeviceConfigurationRegisterJson = {
  /**
   * The register specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterSpec spec = 1;
   */
  spec?: DeviceConfigurationRegisterSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationRegister.
 * Use `create(DeviceConfigurationRegisterSchema)` to create a new message.
 */
export const DeviceConfigurationRegisterSchema: GenMessage<DeviceConfigurationRegister, {jsonType: DeviceConfigurationRegisterJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 59);

/**
 * Defines a map of device configuration registers.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMap
 */
export type DeviceConfigurationRegisterMap = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMap"> & {
  /**
   * A list of device configuration registers records to form a map.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMapRecord items = 1;
   */
  items: DeviceConfigurationRegisterMapRecord[];
};

/**
 * Defines a map of device configuration registers.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMap
 */
export type DeviceConfigurationRegisterMapJson = {
  /**
   * A list of device configuration registers records to form a map.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMapRecord items = 1;
   */
  items?: DeviceConfigurationRegisterMapRecordJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMap.
 * Use `create(DeviceConfigurationRegisterMapSchema)` to create a new message.
 */
export const DeviceConfigurationRegisterMapSchema: GenMessage<DeviceConfigurationRegisterMap, {jsonType: DeviceConfigurationRegisterMapJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 60);

/**
 * Defines a single record in the device configuration register map.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMapRecord
 */
export type DeviceConfigurationRegisterMapRecord = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMapRecord"> & {
  /**
   * The unique register identifier.
   *
   * @generated from field: int64 register_id = 1;
   */
  registerId: bigint;

  /**
   * The public register identifier.
   *
   * @generated from field: string public_register_id = 2;
   */
  publicRegisterId: string;

  /**
   * The register name.
   *
   * @generated from field: string register_name = 3;
   */
  registerName: string;

  /**
   * Variable names, if the register is assigned to any.
   *
   * @generated from field: repeated string variable_name = 4;
   */
  variableName: string[];
};

/**
 * Defines a single record in the device configuration register map.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMapRecord
 */
export type DeviceConfigurationRegisterMapRecordJson = {
  /**
   * The unique register identifier.
   *
   * @generated from field: int64 register_id = 1;
   */
  registerId?: string;

  /**
   * The public register identifier.
   *
   * @generated from field: string public_register_id = 2;
   */
  publicRegisterId?: string;

  /**
   * The register name.
   *
   * @generated from field: string register_name = 3;
   */
  registerName?: string;

  /**
   * Variable names, if the register is assigned to any.
   *
   * @generated from field: repeated string variable_name = 4;
   */
  variableName?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMapRecord.
 * Use `create(DeviceConfigurationRegisterMapRecordSchema)` to create a new message.
 */
export const DeviceConfigurationRegisterMapRecordSchema: GenMessage<DeviceConfigurationRegisterMapRecord, {jsonType: DeviceConfigurationRegisterMapRecordJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 61);

/**
 * Defines a specification for creating a new device configuration template.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest
 */
export type CreateDeviceConfigurationTemplateRequest = Message<"io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest"> & {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1;
   */
  spec?: DeviceConfigurationTemplateSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new device configuration template.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest
 */
export type CreateDeviceConfigurationTemplateRequestJson = {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1;
   */
  spec?: DeviceConfigurationTemplateSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest.
 * Use `create(CreateDeviceConfigurationTemplateRequestSchema)` to create a new message.
 */
export const CreateDeviceConfigurationTemplateRequestSchema: GenMessage<CreateDeviceConfigurationTemplateRequest, {jsonType: CreateDeviceConfigurationTemplateRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 62);

/**
 * Defines a list of device configuration templates.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate
 */
export type ListOfDeviceConfigurationTemplate = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate"> & {
  /**
   * The list of device configuration templates.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate items = 1;
   */
  items: DeviceConfigurationTemplate[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of device configuration templates.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate
 */
export type ListOfDeviceConfigurationTemplateJson = {
  /**
   * The list of device configuration templates.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate items = 1;
   */
  items?: DeviceConfigurationTemplateJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate.
 * Use `create(ListOfDeviceConfigurationTemplateSchema)` to create a new message.
 */
export const ListOfDeviceConfigurationTemplateSchema: GenMessage<ListOfDeviceConfigurationTemplate, {jsonType: ListOfDeviceConfigurationTemplateJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 63);

/**
 * Defines a device configuration template model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate
 */
export type DeviceConfigurationTemplate = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate"> & {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1;
   */
  spec?: DeviceConfigurationTemplateSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a device configuration template model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate
 */
export type DeviceConfigurationTemplateJson = {
  /**
   * The device configuration template specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec spec = 1;
   */
  spec?: DeviceConfigurationTemplateSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate.
 * Use `create(DeviceConfigurationTemplateSchema)` to create a new message.
 */
export const DeviceConfigurationTemplateSchema: GenMessage<DeviceConfigurationTemplate, {jsonType: DeviceConfigurationTemplateJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 64);

/**
 * Defines a device configuration template specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec
 */
export type DeviceConfigurationTemplateSpec = Message<"io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec"> & {
  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType: string;

  /**
   * A list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId: string[];
};

/**
 * Defines a device configuration template specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec
 */
export type DeviceConfigurationTemplateSpecJson = {
  /**
   * The driver type.
   *
   * @generated from field: string driver_type = 1;
   */
  driverType?: string;

  /**
   * A list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceConfigurationTemplateSpec.
 * Use `create(DeviceConfigurationTemplateSpecSchema)` to create a new message.
 */
export const DeviceConfigurationTemplateSpecSchema: GenMessage<DeviceConfigurationTemplateSpec, {jsonType: DeviceConfigurationTemplateSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 65);

/**
 * Defines the specification for adding device configuration registers to device configuration templates.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest
 */
export type AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest = Message<"io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest"> & {
  /**
   * The unique device configuration template identifier.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId: string;

  /**
   * A list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId: string[];
};

/**
 * Defines the specification for adding device configuration registers to device configuration templates.
 *
 * @generated from message io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest
 */
export type AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestJson = {
  /**
   * The unique device configuration template identifier.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId?: string;

  /**
   * A list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.
 * Use `create(AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestSchema)` to create a new message.
 */
export const AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestSchema: GenMessage<AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, {jsonType: AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 66);

/**
 * Defines the specification for removing device configuration registers to device configuration templates.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest
 */
export type RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest = Message<"io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest"> & {
  /**
   * The unique device configuration template identifier.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId: string;

  /**
   * A list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId: string[];
};

/**
 * Defines the specification for removing device configuration registers to device configuration templates.
 *
 * @generated from message io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest
 */
export type RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestJson = {
  /**
   * The unique device configuration template identifier.
   *
   * @generated from field: string dct_id = 1;
   */
  dctId?: string;

  /**
   * A list of device configuration register identifiers.
   *
   * @generated from field: repeated string register_id = 2;
   */
  registerId?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.
 * Use `create(RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestSchema)` to create a new message.
 */
export const RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestSchema: GenMessage<RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, {jsonType: RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 67);

/**
 * Defines a specification for retrieving device data.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceDataRequest
 */
export type GetDeviceDataRequest = Message<"io.clbs.openhes.models.acquisition.GetDeviceDataRequest"> & {
  /**
   * The start timestamp of the requested data. The exclusivness/inclusiveness of the timestamp is defined in a variable.
   *
   * @generated from field: google.protobuf.Timestamp range_start = 1;
   */
  rangeStart?: Timestamp;

  /**
   * The end timestamp of the data. The timestamp is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_end = 2;
   */
  rangeEnd?: Timestamp;

  /**
   * One or more selectors identifying devices and variables for which data is requested.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.GetDeviceDataSeriesSelector series = 3;
   */
  series: GetDeviceDataSeriesSelector[];

  /**
   * The status bit filter. Only values with these status bits will be included in the response.
   *
   * @generated from field: int64 filter_include_status = 4;
   */
  filterIncludeStatus: bigint;

  /**
   * The status bit filter. Values with these status bits will not be included in the response.
   *
   * @generated from field: int64 filter_exclude_status = 5;
   */
  filterExcludeStatus: bigint;

  /**
   * If set, returns a snapshot of stoered data from the given point in time.
   *
   * @generated from field: google.protobuf.Timestamp snapshot = 6;
   */
  snapshot?: Timestamp;
};

/**
 * Defines a specification for retrieving device data.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceDataRequest
 */
export type GetDeviceDataRequestJson = {
  /**
   * The start timestamp of the requested data. The exclusivness/inclusiveness of the timestamp is defined in a variable.
   *
   * @generated from field: google.protobuf.Timestamp range_start = 1;
   */
  rangeStart?: TimestampJson;

  /**
   * The end timestamp of the data. The timestamp is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_end = 2;
   */
  rangeEnd?: TimestampJson;

  /**
   * One or more selectors identifying devices and variables for which data is requested.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.GetDeviceDataSeriesSelector series = 3;
   */
  series?: GetDeviceDataSeriesSelectorJson[];

  /**
   * The status bit filter. Only values with these status bits will be included in the response.
   *
   * @generated from field: int64 filter_include_status = 4;
   */
  filterIncludeStatus?: string;

  /**
   * The status bit filter. Values with these status bits will not be included in the response.
   *
   * @generated from field: int64 filter_exclude_status = 5;
   */
  filterExcludeStatus?: string;

  /**
   * If set, returns a snapshot of stoered data from the given point in time.
   *
   * @generated from field: google.protobuf.Timestamp snapshot = 6;
   */
  snapshot?: TimestampJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDeviceDataRequest.
 * Use `create(GetDeviceDataRequestSchema)` to create a new message.
 */
export const GetDeviceDataRequestSchema: GenMessage<GetDeviceDataRequest, {jsonType: GetDeviceDataRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 68);

/**
 * Defines a selector for identifying device and variable pairs.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceDataSeriesSelector
 */
export type GetDeviceDataSeriesSelector = Message<"io.clbs.openhes.models.acquisition.GetDeviceDataSeriesSelector"> & {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * The unique variable identifier.
   *
   * @generated from field: string variable_id = 2;
   */
  variableId: string;
};

/**
 * Defines a selector for identifying device and variable pairs.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceDataSeriesSelector
 */
export type GetDeviceDataSeriesSelectorJson = {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId?: string;

  /**
   * The unique variable identifier.
   *
   * @generated from field: string variable_id = 2;
   */
  variableId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDeviceDataSeriesSelector.
 * Use `create(GetDeviceDataSeriesSelectorSchema)` to create a new message.
 */
export const GetDeviceDataSeriesSelectorSchema: GenMessage<GetDeviceDataSeriesSelector, {jsonType: GetDeviceDataSeriesSelectorJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 69);

/**
 * Defines a list of data items.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceData
 */
export type DeviceData = Message<"io.clbs.openhes.models.acquisition.DeviceData"> & {
  /**
   * A list of device data items.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceDeviceData devices = 1;
   */
  devices: DeviceDeviceData[];
};

/**
 * Defines a list of data items.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceData
 */
export type DeviceDataJson = {
  /**
   * A list of device data items.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceDeviceData devices = 1;
   */
  devices?: DeviceDeviceDataJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceData.
 * Use `create(DeviceDataSchema)` to create a new message.
 */
export const DeviceDataSchema: GenMessage<DeviceData, {jsonType: DeviceDataJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 70);

/**
 * Defines data items for a specific device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDeviceData
 */
export type DeviceDeviceData = Message<"io.clbs.openhes.models.acquisition.DeviceDeviceData"> & {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * A list of variable data items.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.VariableDeviceData data = 2;
   */
  data: VariableDeviceData[];
};

/**
 * Defines data items for a specific device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDeviceData
 */
export type DeviceDeviceDataJson = {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId?: string;

  /**
   * A list of variable data items.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.VariableDeviceData data = 2;
   */
  data?: VariableDeviceDataJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceDeviceData.
 * Use `create(DeviceDeviceDataSchema)` to create a new message.
 */
export const DeviceDeviceDataSchema: GenMessage<DeviceDeviceData, {jsonType: DeviceDeviceDataJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 71);

/**
 * Defines data for a specific variable within a device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.VariableDeviceData
 */
export type VariableDeviceData = Message<"io.clbs.openhes.models.acquisition.VariableDeviceData"> & {
  /**
   * The unique variable identifier.
   *
   * @generated from field: string variable_id = 1;
   */
  variableId: string;

  /**
   * A list of timestamps for the variable data.
   *
   * @generated from field: repeated google.protobuf.Timestamp timestamps = 2;
   */
  timestamps: Timestamp[];

  /**
   * A list of units for the variable data.
   *
   * @generated from field: repeated string units = 3;
   */
  units: string[];

  /**
   * A list of measured values for the variable data.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.MeasuredValue values = 4;
   */
  values: MeasuredValue[];
};

/**
 * Defines data for a specific variable within a device.
 *
 * @generated from message io.clbs.openhes.models.acquisition.VariableDeviceData
 */
export type VariableDeviceDataJson = {
  /**
   * The unique variable identifier.
   *
   * @generated from field: string variable_id = 1;
   */
  variableId?: string;

  /**
   * A list of timestamps for the variable data.
   *
   * @generated from field: repeated google.protobuf.Timestamp timestamps = 2;
   */
  timestamps?: TimestampJson[];

  /**
   * A list of units for the variable data.
   *
   * @generated from field: repeated string units = 3;
   */
  units?: string[];

  /**
   * A list of measured values for the variable data.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.MeasuredValue values = 4;
   */
  values?: MeasuredValueJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.VariableDeviceData.
 * Use `create(VariableDeviceDataSchema)` to create a new message.
 */
export const VariableDeviceDataSchema: GenMessage<VariableDeviceData, {jsonType: VariableDeviceDataJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 72);

/**
 * Defines device data information model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDataInfo
 */
export type DeviceDataInfo = Message<"io.clbs.openhes.models.acquisition.DeviceDataInfo"> & {
  /**
   * The device data info specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceDataInfoSpec spec = 1;
   */
  spec?: DeviceDataInfoSpec;

  /**
   * The device data info status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceDataInfoStatus status = 2;
   */
  status?: DeviceDataInfoStatus;
};

/**
 * Defines device data information model.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDataInfo
 */
export type DeviceDataInfoJson = {
  /**
   * The device data info specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceDataInfoSpec spec = 1;
   */
  spec?: DeviceDataInfoSpecJson;

  /**
   * The device data info status.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.DeviceDataInfoStatus status = 2;
   */
  status?: DeviceDataInfoStatusJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceDataInfo.
 * Use `create(DeviceDataInfoSchema)` to create a new message.
 */
export const DeviceDataInfoSchema: GenMessage<DeviceDataInfo, {jsonType: DeviceDataInfoJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 73);

/**
 * Defines the device data information specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDataInfoSpec
 */
export type DeviceDataInfoSpec = Message<"io.clbs.openhes.models.acquisition.DeviceDataInfoSpec"> & {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId: string;

  /**
   * The unique register identifier.
   *
   * @generated from field: string register_id = 2;
   */
  registerId: string;
};

/**
 * Defines the device data information specification.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDataInfoSpec
 */
export type DeviceDataInfoSpecJson = {
  /**
   * The unique device identifier.
   *
   * @generated from field: string device_id = 1;
   */
  deviceId?: string;

  /**
   * The unique register identifier.
   *
   * @generated from field: string register_id = 2;
   */
  registerId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceDataInfoSpec.
 * Use `create(DeviceDataInfoSpecSchema)` to create a new message.
 */
export const DeviceDataInfoSpecSchema: GenMessage<DeviceDataInfoSpec, {jsonType: DeviceDataInfoSpecJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 74);

/**
 * Defines the device data information status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDataInfoStatus
 */
export type DeviceDataInfoStatus = Message<"io.clbs.openhes.models.acquisition.DeviceDataInfoStatus"> & {
  /**
   * The register name.
   *
   * @generated from field: string register_name = 1;
   */
  registerName: string;

  /**
   * The period of the regular profile values, if applicable.
   *
   * @generated from field: int32 period = 2;
   */
  period: number;

  /**
   * The timestamp of the last stored value.
   *
   * @generated from field: google.protobuf.Timestamp last_value_at = 3;
   */
  lastValueAt?: Timestamp;
};

/**
 * Defines the device data information status.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceDataInfoStatus
 */
export type DeviceDataInfoStatusJson = {
  /**
   * The register name.
   *
   * @generated from field: string register_name = 1;
   */
  registerName?: string;

  /**
   * The period of the regular profile values, if applicable.
   *
   * @generated from field: int32 period = 2;
   */
  period?: number;

  /**
   * The timestamp of the last stored value.
   *
   * @generated from field: google.protobuf.Timestamp last_value_at = 3;
   */
  lastValueAt?: TimestampJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceDataInfoStatus.
 * Use `create(DeviceDataInfoStatusSchema)` to create a new message.
 */
export const DeviceDataInfoStatusSchema: GenMessage<DeviceDataInfoStatus, {jsonType: DeviceDataInfoStatusJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 75);

/**
 * Defines a list of device data information items.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo
 */
export type ListOfDeviceDataInfo = Message<"io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo"> & {
  /**
   * The list of device data info items.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceDataInfo items = 1;
   */
  items: DeviceDataInfo[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of device data information items.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo
 */
export type ListOfDeviceDataInfoJson = {
  /**
   * The list of device data info items.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.DeviceDataInfo items = 1;
   */
  items?: DeviceDataInfoJson[];

  /**
   * The total number of items.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo.
 * Use `create(ListOfDeviceDataInfoSchema)` to create a new message.
 */
export const ListOfDeviceDataInfoSchema: GenMessage<ListOfDeviceDataInfo, {jsonType: ListOfDeviceDataInfoJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 76);

/**
 * Defines a specification for retrieving device events.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceEventsRequest
 */
export type GetDeviceEventsRequest = Message<"io.clbs.openhes.models.acquisition.GetDeviceEventsRequest"> & {
  /**
   * The start timestamp of the device events selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_start = 1;
   */
  rangeStart?: Timestamp;

  /**
   * The end timestamp of the device events selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_end = 2;
   */
  rangeEnd?: Timestamp;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 3;
   */
  deviceId: string;
};

/**
 * Defines a specification for retrieving device events.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceEventsRequest
 */
export type GetDeviceEventsRequestJson = {
  /**
   * The start timestamp of the device events selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_start = 1;
   */
  rangeStart?: TimestampJson;

  /**
   * The end timestamp of the device events selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_end = 2;
   */
  rangeEnd?: TimestampJson;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 3;
   */
  deviceId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDeviceEventsRequest.
 * Use `create(GetDeviceEventsRequestSchema)` to create a new message.
 */
export const GetDeviceEventsRequestSchema: GenMessage<GetDeviceEventsRequest, {jsonType: GetDeviceEventsRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 77);

/**
 * Defines a specification for retrieving device bulks from a specified time range.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceBulksRequest
 */
export type GetDeviceBulksRequest = Message<"io.clbs.openhes.models.acquisition.GetDeviceBulksRequest"> & {
  /**
   * The start timestamp of the bulks selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_start = 1;
   */
  rangeStart?: Timestamp;

  /**
   * The end timestamp of the bulks selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_end = 2;
   */
  rangeEnd?: Timestamp;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 3;
   */
  deviceId: string;
};

/**
 * Defines a specification for retrieving device bulks from a specified time range.
 *
 * @generated from message io.clbs.openhes.models.acquisition.GetDeviceBulksRequest
 */
export type GetDeviceBulksRequestJson = {
  /**
   * The start timestamp of the bulks selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_start = 1;
   */
  rangeStart?: TimestampJson;

  /**
   * The end timestamp of the bulks selection. It is inclusive.
   *
   * @generated from field: google.protobuf.Timestamp range_end = 2;
   */
  rangeEnd?: TimestampJson;

  /**
   * The unique identifier of the device.
   *
   * @generated from field: string device_id = 3;
   */
  deviceId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.GetDeviceBulksRequest.
 * Use `create(GetDeviceBulksRequestSchema)` to create a new message.
 */
export const GetDeviceBulksRequestSchema: GenMessage<GetDeviceBulksRequest, {jsonType: GetDeviceBulksRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 78);

/**
 * Defines a list of device bulks.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceBulks
 */
export type DeviceBulks = Message<"io.clbs.openhes.models.acquisition.DeviceBulks"> & {
  /**
   * The list of bulks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Bulk bulks = 1;
   */
  bulks: Bulk[];
};

/**
 * Defines a list of device bulks.
 *
 * @generated from message io.clbs.openhes.models.acquisition.DeviceBulks
 */
export type DeviceBulksJson = {
  /**
   * The list of bulks.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.Bulk bulks = 1;
   */
  bulks?: BulkJson[];
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.DeviceBulks.
 * Use `create(DeviceBulksSchema)` to create a new message.
 */
export const DeviceBulksSchema: GenMessage<DeviceBulks, {jsonType: DeviceBulksJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 79);

/**
 * Defines a specification for creating a new time-of-use table.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest
 */
export type CreateTimeOfUseTableRequest = Message<"io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest"> & {
  /**
   * The time-of-use table specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec spec = 1;
   */
  spec?: TimeOfUseTableSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFields;
};

/**
 * Defines a specification for creating a new time-of-use table.
 *
 * @generated from message io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest
 */
export type CreateTimeOfUseTableRequestJson = {
  /**
   * The time-of-use table specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec spec = 1;
   */
  spec?: TimeOfUseTableSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 2;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest.
 * Use `create(CreateTimeOfUseTableRequestSchema)` to create a new message.
 */
export const CreateTimeOfUseTableRequestSchema: GenMessage<CreateTimeOfUseTableRequest, {jsonType: CreateTimeOfUseTableRequestJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 80);

/**
 * Defines a list of time-of-use tables.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable
 */
export type ListOfTimeOfUseTable = Message<"io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable"> & {
  /**
   * The list of time-of-use tables.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.TimeOfUseTable items = 1;
   */
  items: TimeOfUseTable[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount: number;
};

/**
 * Defines a list of time-of-use tables.
 *
 * @generated from message io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable
 */
export type ListOfTimeOfUseTableJson = {
  /**
   * The list of time-of-use tables.
   *
   * @generated from field: repeated io.clbs.openhes.models.acquisition.TimeOfUseTable items = 1;
   */
  items?: TimeOfUseTableJson[];

  /**
   * The total number of items in the list.
   *
   * @generated from field: int32 total_count = 2;
   */
  totalCount?: number;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable.
 * Use `create(ListOfTimeOfUseTableSchema)` to create a new message.
 */
export const ListOfTimeOfUseTableSchema: GenMessage<ListOfTimeOfUseTable, {jsonType: ListOfTimeOfUseTableJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 81);

/**
 * @generated from message io.clbs.openhes.models.acquisition.TimeOfUseTable
 */
export type TimeOfUseTable = Message<"io.clbs.openhes.models.acquisition.TimeOfUseTable"> & {
  /**
   * The time-of-use table specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec spec = 1;
   */
  spec?: TimeOfUseTableSpec;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFields;
};

/**
 * @generated from message io.clbs.openhes.models.acquisition.TimeOfUseTable
 */
export type TimeOfUseTableJson = {
  /**
   * The time-of-use table specification.
   *
   * @generated from field: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec spec = 1;
   */
  spec?: TimeOfUseTableSpecJson;

  /**
   * The metadata fields.
   *
   * @generated from field: io.clbs.openhes.models.common.MetadataFields metadata = 3;
   */
  metadata?: MetadataFieldsJson;
};

/**
 * Describes the message io.clbs.openhes.models.acquisition.TimeOfUseTable.
 * Use `create(TimeOfUseTableSchema)` to create a new message.
 */
export const TimeOfUseTableSchema: GenMessage<TimeOfUseTable, {jsonType: TimeOfUseTableJson}> = /*@__PURE__*/
  messageDesc(file_acquisition_main, 82);

