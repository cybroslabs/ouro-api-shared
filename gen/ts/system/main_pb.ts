// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,json_types=true"
// @generated from file system/main.proto (package io.clbs.openhes.models.system, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { FieldDescriptor, FieldDescriptorJson, FieldValues, FieldValuesJson } from "../common/fields_pb";
import { file_common_fields } from "../common/fields_pb";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file system/main.proto.
 */
export const file_system_main: GenFile = /*@__PURE__*/
  fileDesc("ChFzeXN0ZW0vbWFpbi5wcm90bxIdaW8uY2xicy5vcGVuaGVzLm1vZGVscy5zeXN0ZW0iUgoRQXBwbGljYXRpb25Db25maWcSPQoFaXRlbXMYAiADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLnN5c3RlbS5Db21wb25lbnRDb25maWciWgoPQ29tcG9uZW50Q29uZmlnEgwKBG5hbWUYASABKAkSOQoFaXRlbXMYAiABKAsyKi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZFZhbHVlcyJoChlDb21wb25lbnRDb25maWdEZXNjcmlwdG9yEgwKBG5hbWUYASABKAkSPQoFaXRlbXMYAiADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZERlc2NyaXB0b3IiqwEKG0FwcGxpY2F0aW9uQ29uZmlnRGVzY3JpcHRvchJNCgtkZXNjcmlwdG9ycxgBIAMoCzI4LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuc3lzdGVtLkNvbXBvbmVudENvbmZpZ0Rlc2NyaXB0b3ISPQoFaXRlbXMYAiADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLnN5c3RlbS5Db21wb25lbnRDb25maWcizgEKB0xpY2Vuc2USDQoFdG9rZW4YASABKAkSCgoCaWQYAiABKAkSDAoEbmFtZRgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRJECgdvcHRpb25zGAUgAygLMjMuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5zeXN0ZW0uTGljZW5zZS5PcHRpb25zRW50cnkSDwoHdmVyc2lvbhgGIAEoBRouCgxPcHRpb25zRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASImChNPcGVuSWRDb25maWd1cmF0aW9uEg8KB2NvbnRlbnQYASABKAxCNVozZ2l0aHViLmNvbS9jeWJyb3NsYWJzL291cm8tYXBpLXNoYXJlZC9nZW4vZ28vc3lzdGVtYghlZGl0aW9uc3DoBw", [file_common_fields, file_google_protobuf_struct]);

/**
 * Defines a specification for application configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfig
 */
export type ApplicationConfig = Message<"io.clbs.openhes.models.system.ApplicationConfig"> & {
  /**
   * The default values for the application configuration.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items: ComponentConfig[];
};

/**
 * Defines a specification for application configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfig
 */
export type ApplicationConfigJson = {
  /**
   * The default values for the application configuration.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items?: ComponentConfigJson[];
};

/**
 * Describes the message io.clbs.openhes.models.system.ApplicationConfig.
 * Use `create(ApplicationConfigSchema)` to create a new message.
 */
export const ApplicationConfigSchema: GenMessage<ApplicationConfig, {jsonType: ApplicationConfigJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 0);

/**
 * Defines a specification for a single component configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfig
 */
export type ComponentConfig = Message<"io.clbs.openhes.models.system.ComponentConfig"> & {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The component configuration values.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValues items = 2;
   */
  items?: FieldValues;
};

/**
 * Defines a specification for a single component configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfig
 */
export type ComponentConfigJson = {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The component configuration values.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValues items = 2;
   */
  items?: FieldValuesJson;
};

/**
 * Describes the message io.clbs.openhes.models.system.ComponentConfig.
 * Use `create(ComponentConfigSchema)` to create a new message.
 */
export const ComponentConfigSchema: GenMessage<ComponentConfig, {jsonType: ComponentConfigJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 1);

/**
 * Defines a specification for component configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfigDescriptor
 */
export type ComponentConfigDescriptor = Message<"io.clbs.openhes.models.system.ComponentConfigDescriptor"> & {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of component configuration field descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldDescriptor items = 2;
   */
  items: FieldDescriptor[];
};

/**
 * Defines a specification for component configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfigDescriptor
 */
export type ComponentConfigDescriptorJson = {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The list of component configuration field descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldDescriptor items = 2;
   */
  items?: FieldDescriptorJson[];
};

/**
 * Describes the message io.clbs.openhes.models.system.ComponentConfigDescriptor.
 * Use `create(ComponentConfigDescriptorSchema)` to create a new message.
 */
export const ComponentConfigDescriptorSchema: GenMessage<ComponentConfigDescriptor, {jsonType: ComponentConfigDescriptorJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 2);

/**
 * Defines a specification for application configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfigDescriptor
 */
export type ApplicationConfigDescriptor = Message<"io.clbs.openhes.models.system.ApplicationConfigDescriptor"> & {
  /**
   * The list of component configuration descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfigDescriptor descriptors = 1;
   */
  descriptors: ComponentConfigDescriptor[];

  /**
   * The list of default configuration values for the application component.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items: ComponentConfig[];
};

/**
 * Defines a specification for application configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfigDescriptor
 */
export type ApplicationConfigDescriptorJson = {
  /**
   * The list of component configuration descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfigDescriptor descriptors = 1;
   */
  descriptors?: ComponentConfigDescriptorJson[];

  /**
   * The list of default configuration values for the application component.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items?: ComponentConfigJson[];
};

/**
 * Describes the message io.clbs.openhes.models.system.ApplicationConfigDescriptor.
 * Use `create(ApplicationConfigDescriptorSchema)` to create a new message.
 */
export const ApplicationConfigDescriptorSchema: GenMessage<ApplicationConfigDescriptor, {jsonType: ApplicationConfigDescriptorJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 3);

/**
 * Defines the license information for the application.
 *
 * @generated from message io.clbs.openhes.models.system.License
 */
export type License = Message<"io.clbs.openhes.models.system.License"> & {
  /**
   * The license token.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * The license ID.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The license name.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * The license description.
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * The licensed options.
   *
   * @generated from field: map<string, string> options = 5;
   */
  options: { [key: string]: string };

  /**
   * The license options structure version.
   *
   * @generated from field: int32 version = 6;
   */
  version: number;
};

/**
 * Defines the license information for the application.
 *
 * @generated from message io.clbs.openhes.models.system.License
 */
export type LicenseJson = {
  /**
   * The license token.
   *
   * @generated from field: string token = 1;
   */
  token?: string;

  /**
   * The license ID.
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * The license name.
   *
   * @generated from field: string name = 3;
   */
  name?: string;

  /**
   * The license description.
   *
   * @generated from field: string description = 4;
   */
  description?: string;

  /**
   * The licensed options.
   *
   * @generated from field: map<string, string> options = 5;
   */
  options?: { [key: string]: string };

  /**
   * The license options structure version.
   *
   * @generated from field: int32 version = 6;
   */
  version?: number;
};

/**
 * Describes the message io.clbs.openhes.models.system.License.
 * Use `create(LicenseSchema)` to create a new message.
 */
export const LicenseSchema: GenMessage<License, {jsonType: LicenseJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 4);

/**
 * Defines the OpenID Connect (OIDC) configuration.
 *
 * @generated from message io.clbs.openhes.models.system.OpenIdConfiguration
 */
export type OpenIdConfiguration = Message<"io.clbs.openhes.models.system.OpenIdConfiguration"> & {
  /**
   * The raw JSON configuration of the OIDC service.
   *
   * @generated from field: bytes content = 1;
   */
  content: Uint8Array;
};

/**
 * Defines the OpenID Connect (OIDC) configuration.
 *
 * @generated from message io.clbs.openhes.models.system.OpenIdConfiguration
 */
export type OpenIdConfigurationJson = {
  /**
   * The raw JSON configuration of the OIDC service.
   *
   * @generated from field: bytes content = 1;
   */
  content?: string;
};

/**
 * Describes the message io.clbs.openhes.models.system.OpenIdConfiguration.
 * Use `create(OpenIdConfigurationSchema)` to create a new message.
 */
export const OpenIdConfigurationSchema: GenMessage<OpenIdConfiguration, {jsonType: OpenIdConfigurationJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 5);

