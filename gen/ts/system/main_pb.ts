// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,json_types=true"
// @generated from file system/main.proto (package io.clbs.openhes.models.system, edition 2023)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { FieldDescriptor, FieldDescriptorJson, FieldValues, FieldValuesJson } from "../common/fields_pb";
import { file_common_fields } from "../common/fields_pb";
import type { Timestamp, TimestampJson } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file system/main.proto.
 */
export const file_system_main: GenFile = /*@__PURE__*/
  fileDesc("ChFzeXN0ZW0vbWFpbi5wcm90bxIdaW8uY2xicy5vcGVuaGVzLm1vZGVscy5zeXN0ZW0iUgoRQXBwbGljYXRpb25Db25maWcSPQoFaXRlbXMYAiADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLnN5c3RlbS5Db21wb25lbnRDb25maWciWgoPQ29tcG9uZW50Q29uZmlnEgwKBG5hbWUYASABKAkSOQoFaXRlbXMYAiABKAsyKi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZFZhbHVlcyJoChlDb21wb25lbnRDb25maWdEZXNjcmlwdG9yEgwKBG5hbWUYASABKAkSPQoFaXRlbXMYAiADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLmNvbW1vbi5GaWVsZERlc2NyaXB0b3IiqwEKG0FwcGxpY2F0aW9uQ29uZmlnRGVzY3JpcHRvchJNCgtkZXNjcmlwdG9ycxgBIAMoCzI4LmlvLmNsYnMub3Blbmhlcy5tb2RlbHMuc3lzdGVtLkNvbXBvbmVudENvbmZpZ0Rlc2NyaXB0b3ISPQoFaXRlbXMYAiADKAsyLi5pby5jbGJzLm9wZW5oZXMubW9kZWxzLnN5c3RlbS5Db21wb25lbnRDb25maWci9AIKB0xpY2Vuc2USDQoFdG9rZW4YASABKAkSCgoCaWQYAiABKAkSDAoEbmFtZRgDIAEoCRITCgtkZXNjcmlwdGlvbhgEIAEoCRJECgdvcHRpb25zGAUgAygLMjMuaW8uY2xicy5vcGVuaGVzLm1vZGVscy5zeXN0ZW0uTGljZW5zZS5PcHRpb25zRW50cnkSDwoHdmVyc2lvbhgGIAEoBRI0ChB0b2tlbl9leHBpcmF0aW9uGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI2ChJsaWNlbnNlX2V4cGlyYXRpb24YCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjYKEnNlcnZpY2VfZXhwaXJhdGlvbhgKIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAaLgoMT3B0aW9uc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiPgoLVXNlclByb2ZpbGUSCgoCaWQYASABKAkSFAoMZGlzcGxheV9uYW1lGAIgASgJEg0KBXJvbGVzGAMgAygJIlUKFlNldFNjcmVlbkNvbmZpZ1JlcXVlc3QSFgoOYXBwbGljYXRpb25faWQYASABKAkSEQoJc2NyZWVuX2lkGAIgASgJEhAKCHNldHRpbmdzGAMgASgJIkEKFFNjcmVlbkNvbmZpZ1NlbGVjdG9yEhYKDmFwcGxpY2F0aW9uX2lkGAEgASgJEhEKCXNjcmVlbl9pZBgCIAEoCUI1WjNnaXRodWIuY29tL2N5YnJvc2xhYnMvb3Vyby1hcGktc2hhcmVkL2dlbi9nby9zeXN0ZW1iCGVkaXRpb25zcOgH", [file_common_fields, file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * Defines a specification for application configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfig
 */
export type ApplicationConfig = Message<"io.clbs.openhes.models.system.ApplicationConfig"> & {
  /**
   * The default values for the application configuration.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items: ComponentConfig[];
};

/**
 * Defines a specification for application configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfig
 */
export type ApplicationConfigJson = {
  /**
   * The default values for the application configuration.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items?: ComponentConfigJson[];
};

/**
 * Describes the message io.clbs.openhes.models.system.ApplicationConfig.
 * Use `create(ApplicationConfigSchema)` to create a new message.
 */
export const ApplicationConfigSchema: GenMessage<ApplicationConfig, {jsonType: ApplicationConfigJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 0);

/**
 * Defines a specification for a single component configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfig
 */
export type ComponentConfig = Message<"io.clbs.openhes.models.system.ComponentConfig"> & {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The component configuration values.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValues items = 2;
   */
  items?: FieldValues;
};

/**
 * Defines a specification for a single component configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfig
 */
export type ComponentConfigJson = {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The component configuration values.
   *
   * @generated from field: io.clbs.openhes.models.common.FieldValues items = 2;
   */
  items?: FieldValuesJson;
};

/**
 * Describes the message io.clbs.openhes.models.system.ComponentConfig.
 * Use `create(ComponentConfigSchema)` to create a new message.
 */
export const ComponentConfigSchema: GenMessage<ComponentConfig, {jsonType: ComponentConfigJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 1);

/**
 * Defines a specification for component configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfigDescriptor
 */
export type ComponentConfigDescriptor = Message<"io.clbs.openhes.models.system.ComponentConfigDescriptor"> & {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The list of component configuration field descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldDescriptor items = 2;
   */
  items: FieldDescriptor[];
};

/**
 * Defines a specification for component configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ComponentConfigDescriptor
 */
export type ComponentConfigDescriptorJson = {
  /**
   * The component name.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * The list of component configuration field descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.common.FieldDescriptor items = 2;
   */
  items?: FieldDescriptorJson[];
};

/**
 * Describes the message io.clbs.openhes.models.system.ComponentConfigDescriptor.
 * Use `create(ComponentConfigDescriptorSchema)` to create a new message.
 */
export const ComponentConfigDescriptorSchema: GenMessage<ComponentConfigDescriptor, {jsonType: ComponentConfigDescriptorJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 2);

/**
 * Defines a specification for application configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfigDescriptor
 */
export type ApplicationConfigDescriptor = Message<"io.clbs.openhes.models.system.ApplicationConfigDescriptor"> & {
  /**
   * The list of component configuration descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfigDescriptor descriptors = 1;
   */
  descriptors: ComponentConfigDescriptor[];

  /**
   * The list of default configuration values for the application component.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items: ComponentConfig[];
};

/**
 * Defines a specification for application configuration descriptors.
 *
 * @generated from message io.clbs.openhes.models.system.ApplicationConfigDescriptor
 */
export type ApplicationConfigDescriptorJson = {
  /**
   * The list of component configuration descriptors.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfigDescriptor descriptors = 1;
   */
  descriptors?: ComponentConfigDescriptorJson[];

  /**
   * The list of default configuration values for the application component.
   *
   * @generated from field: repeated io.clbs.openhes.models.system.ComponentConfig items = 2;
   */
  items?: ComponentConfigJson[];
};

/**
 * Describes the message io.clbs.openhes.models.system.ApplicationConfigDescriptor.
 * Use `create(ApplicationConfigDescriptorSchema)` to create a new message.
 */
export const ApplicationConfigDescriptorSchema: GenMessage<ApplicationConfigDescriptor, {jsonType: ApplicationConfigDescriptorJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 3);

/**
 * Defines the license information for the application.
 *
 * @generated from message io.clbs.openhes.models.system.License
 */
export type License = Message<"io.clbs.openhes.models.system.License"> & {
  /**
   * The license token.
   *
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * The license ID.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The license name.
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * The license description.
   *
   * @generated from field: string description = 4;
   */
  description: string;

  /**
   * The licensed options.
   *
   * @generated from field: map<string, string> options = 5;
   */
  options: { [key: string]: string };

  /**
   * The license options structure version.
   *
   * @generated from field: int32 version = 6;
   */
  version: number;

  /**
   * The license token expiration date. This does not necessarily reflect the actual license expiry date but the date when the license token is no longer valid. For air-gapped systems at this point the license key must be renewed. The value is taken from the 'exp' claim in the license token.
   *
   * @generated from field: google.protobuf.Timestamp token_expiration = 7;
   */
  tokenExpiration?: Timestamp;

  /**
   * The actual license expiration date. This can be any date or unset for perpetual licenses.
   *
   * @generated from field: google.protobuf.Timestamp license_expiration = 9;
   */
  licenseExpiration?: Timestamp;

  /**
   * The service expiration date. This is the date until when the license entitles to free updates and support.
   *
   * @generated from field: google.protobuf.Timestamp service_expiration = 10;
   */
  serviceExpiration?: Timestamp;
};

/**
 * Defines the license information for the application.
 *
 * @generated from message io.clbs.openhes.models.system.License
 */
export type LicenseJson = {
  /**
   * The license token.
   *
   * @generated from field: string token = 1;
   */
  token?: string;

  /**
   * The license ID.
   *
   * @generated from field: string id = 2;
   */
  id?: string;

  /**
   * The license name.
   *
   * @generated from field: string name = 3;
   */
  name?: string;

  /**
   * The license description.
   *
   * @generated from field: string description = 4;
   */
  description?: string;

  /**
   * The licensed options.
   *
   * @generated from field: map<string, string> options = 5;
   */
  options?: { [key: string]: string };

  /**
   * The license options structure version.
   *
   * @generated from field: int32 version = 6;
   */
  version?: number;

  /**
   * The license token expiration date. This does not necessarily reflect the actual license expiry date but the date when the license token is no longer valid. For air-gapped systems at this point the license key must be renewed. The value is taken from the 'exp' claim in the license token.
   *
   * @generated from field: google.protobuf.Timestamp token_expiration = 7;
   */
  tokenExpiration?: TimestampJson;

  /**
   * The actual license expiration date. This can be any date or unset for perpetual licenses.
   *
   * @generated from field: google.protobuf.Timestamp license_expiration = 9;
   */
  licenseExpiration?: TimestampJson;

  /**
   * The service expiration date. This is the date until when the license entitles to free updates and support.
   *
   * @generated from field: google.protobuf.Timestamp service_expiration = 10;
   */
  serviceExpiration?: TimestampJson;
};

/**
 * Describes the message io.clbs.openhes.models.system.License.
 * Use `create(LicenseSchema)` to create a new message.
 */
export const LicenseSchema: GenMessage<License, {jsonType: LicenseJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 4);

/**
 * Defines the user information structure.
 *
 * @generated from message io.clbs.openhes.models.system.UserProfile
 */
export type UserProfile = Message<"io.clbs.openhes.models.system.UserProfile"> & {
  /**
   * The UUID of the user.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The display name of the user.
   *
   * @generated from field: string display_name = 2;
   */
  displayName: string;

  /**
   * The list of user roles.
   *
   * @generated from field: repeated string roles = 3;
   */
  roles: string[];
};

/**
 * Defines the user information structure.
 *
 * @generated from message io.clbs.openhes.models.system.UserProfile
 */
export type UserProfileJson = {
  /**
   * The UUID of the user.
   *
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * The display name of the user.
   *
   * @generated from field: string display_name = 2;
   */
  displayName?: string;

  /**
   * The list of user roles.
   *
   * @generated from field: repeated string roles = 3;
   */
  roles?: string[];
};

/**
 * Describes the message io.clbs.openhes.models.system.UserProfile.
 * Use `create(UserProfileSchema)` to create a new message.
 */
export const UserProfileSchema: GenMessage<UserProfile, {jsonType: UserProfileJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 5);

/**
 * Defines the
 *
 * @generated from message io.clbs.openhes.models.system.SetScreenConfigRequest
 */
export type SetScreenConfigRequest = Message<"io.clbs.openhes.models.system.SetScreenConfigRequest"> & {
  /**
   * The application or ui-plugin identifier.
   *
   * @generated from field: string application_id = 1;
   */
  applicationId: string;

  /**
   * The screen identifier within the application/ui-plugin.
   *
   * @generated from field: string screen_id = 2;
   */
  screenId: string;

  /**
   * Generic data model holding data related for the screen.
   *
   * @generated from field: string settings = 3;
   */
  settings: string;
};

/**
 * Defines the
 *
 * @generated from message io.clbs.openhes.models.system.SetScreenConfigRequest
 */
export type SetScreenConfigRequestJson = {
  /**
   * The application or ui-plugin identifier.
   *
   * @generated from field: string application_id = 1;
   */
  applicationId?: string;

  /**
   * The screen identifier within the application/ui-plugin.
   *
   * @generated from field: string screen_id = 2;
   */
  screenId?: string;

  /**
   * Generic data model holding data related for the screen.
   *
   * @generated from field: string settings = 3;
   */
  settings?: string;
};

/**
 * Describes the message io.clbs.openhes.models.system.SetScreenConfigRequest.
 * Use `create(SetScreenConfigRequestSchema)` to create a new message.
 */
export const SetScreenConfigRequestSchema: GenMessage<SetScreenConfigRequest, {jsonType: SetScreenConfigRequestJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 6);

/**
 * Defines the selection criteria for UI screen configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ScreenConfigSelector
 */
export type ScreenConfigSelector = Message<"io.clbs.openhes.models.system.ScreenConfigSelector"> & {
  /**
   * The application or ui-plugin identifier.
   *
   * @generated from field: string application_id = 1;
   */
  applicationId: string;

  /**
   * The screen identifier within the application/ui-plugin.
   *
   * @generated from field: string screen_id = 2;
   */
  screenId: string;
};

/**
 * Defines the selection criteria for UI screen configuration.
 *
 * @generated from message io.clbs.openhes.models.system.ScreenConfigSelector
 */
export type ScreenConfigSelectorJson = {
  /**
   * The application or ui-plugin identifier.
   *
   * @generated from field: string application_id = 1;
   */
  applicationId?: string;

  /**
   * The screen identifier within the application/ui-plugin.
   *
   * @generated from field: string screen_id = 2;
   */
  screenId?: string;
};

/**
 * Describes the message io.clbs.openhes.models.system.ScreenConfigSelector.
 * Use `create(ScreenConfigSelectorSchema)` to create a new message.
 */
export const ScreenConfigSelectorSchema: GenMessage<ScreenConfigSelector, {jsonType: ScreenConfigSelectorJson}> = /*@__PURE__*/
  messageDesc(file_system_main, 7);

