// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: acquisition/timeofuse/timeofuse.proto

package timeofuse

import (
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration for Relay State
type RelayState int32

const (
	RelayState_RELAY_STATE_UNSPECIFIED RelayState = 0 // Unspecified relay state. Relay state is ignored (no action)
	RelayState_RELAY_STATE_CONNECT     RelayState = 1 // Relay connects
	RelayState_RELAY_STATE_DISCONNECT  RelayState = 2 // Relay disconnects
)

// Enum value maps for RelayState.
var (
	RelayState_name = map[int32]string{
		0: "RELAY_STATE_UNSPECIFIED",
		1: "RELAY_STATE_CONNECT",
		2: "RELAY_STATE_DISCONNECT",
	}
	RelayState_value = map[string]int32{
		"RELAY_STATE_UNSPECIFIED": 0,
		"RELAY_STATE_CONNECT":     1,
		"RELAY_STATE_DISCONNECT":  2,
	}
)

func (x RelayState) Enum() *RelayState {
	p := new(RelayState)
	*p = x
	return p
}

func (x RelayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelayState) Descriptor() protoreflect.EnumDescriptor {
	return file_acquisition_timeofuse_timeofuse_proto_enumTypes[0].Descriptor()
}

func (RelayState) Type() protoreflect.EnumType {
	return &file_acquisition_timeofuse_timeofuse_proto_enumTypes[0]
}

func (x RelayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Switching data includes tariffs and relay states for specific times
type Switching struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Hour        int32                  `protobuf:"varint,1,opt,name=hour"`
	xxx_hidden_Minute      int32                  `protobuf:"varint,2,opt,name=minute"`
	xxx_hidden_Tariff      int32                  `protobuf:"varint,3,opt,name=tariff"`
	xxx_hidden_Relays      *[]*RelayStateRecord   `protobuf:"bytes,4,rep,name=relays"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Switching) Reset() {
	*x = Switching{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Switching) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switching) ProtoMessage() {}

func (x *Switching) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Switching) GetHour() int32 {
	if x != nil {
		return x.xxx_hidden_Hour
	}
	return 0
}

func (x *Switching) GetMinute() int32 {
	if x != nil {
		return x.xxx_hidden_Minute
	}
	return 0
}

func (x *Switching) GetTariff() int32 {
	if x != nil {
		return x.xxx_hidden_Tariff
	}
	return 0
}

func (x *Switching) GetRelays() []*RelayStateRecord {
	if x != nil {
		if x.xxx_hidden_Relays != nil {
			return *x.xxx_hidden_Relays
		}
	}
	return nil
}

func (x *Switching) SetHour(v int32) {
	x.xxx_hidden_Hour = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *Switching) SetMinute(v int32) {
	x.xxx_hidden_Minute = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *Switching) SetTariff(v int32) {
	x.xxx_hidden_Tariff = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *Switching) SetRelays(v []*RelayStateRecord) {
	x.xxx_hidden_Relays = &v
}

func (x *Switching) HasHour() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Switching) HasMinute() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Switching) HasTariff() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Switching) ClearHour() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Hour = 0
}

func (x *Switching) ClearMinute() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Minute = 0
}

func (x *Switching) ClearTariff() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Tariff = 0
}

type Switching_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Hour of the switching event.
	// @values: 0–23
	// @example: 7
	Hour *int32
	// Minute of the switching event.
	// @values: 0–59
	// @example: 30
	Minute *int32
	// Tariff ID.
	// @values: -1 means no tariff; other values are valid tariff IDs
	// @example: 2
	Tariff *int32
	// Map of relay ID to relay state. The list must not contain duplicit relay IDs.
	Relays []*RelayStateRecord
}

func (b0 Switching_builder) Build() *Switching {
	m0 := &Switching{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Hour != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Hour = *b.Hour
	}
	if b.Minute != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Minute = *b.Minute
	}
	if b.Tariff != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Tariff = *b.Tariff
	}
	x.xxx_hidden_Relays = &b.Relays
	return m0
}

// RelayStateRecord represents the state of a relay at a specific time.
// It contains the relay ID and its state (CONNECT or DISCONNECT).
// The relay ID must be unique within the list of relays.
type RelayStateRecord struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RelayId     int32                  `protobuf:"varint,1,opt,name=relay_id,json=relayId"`
	xxx_hidden_State       RelayState             `protobuf:"varint,2,opt,name=state,enum=io.clbs.openhes.models.acquisition.timeofuse.RelayState"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RelayStateRecord) Reset() {
	*x = RelayStateRecord{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RelayStateRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayStateRecord) ProtoMessage() {}

func (x *RelayStateRecord) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *RelayStateRecord) GetRelayId() int32 {
	if x != nil {
		return x.xxx_hidden_RelayId
	}
	return 0
}

func (x *RelayStateRecord) GetState() RelayState {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 1) {
			return x.xxx_hidden_State
		}
	}
	return RelayState_RELAY_STATE_UNSPECIFIED
}

func (x *RelayStateRecord) SetRelayId(v int32) {
	x.xxx_hidden_RelayId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *RelayStateRecord) SetState(v RelayState) {
	x.xxx_hidden_State = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *RelayStateRecord) HasRelayId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *RelayStateRecord) HasState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *RelayStateRecord) ClearRelayId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_RelayId = 0
}

func (x *RelayStateRecord) ClearState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_State = RelayState_RELAY_STATE_UNSPECIFIED
}

type RelayStateRecord_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Relay ID
	// @example: 1
	RelayId *int32
	// State of the relay (CONNECT or DISCONNECT)
	// @example: CONNECT
	State *RelayState
}

func (b0 RelayStateRecord_builder) Build() *RelayStateRecord {
	m0 := &RelayStateRecord{}
	b, x := &b0, m0
	_, _ = b, x
	if b.RelayId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_RelayId = *b.RelayId
	}
	if b.State != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_State = *b.State
	}
	return m0
}

// DayProfile represents the profile for a single day, containing multiple Switching times
type DayProfile struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_DayId       *string                `protobuf:"bytes,1,opt,name=day_id,json=dayId"`
	xxx_hidden_Switching   *[]*Switching          `protobuf:"bytes,2,rep,name=switching"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DayProfile) Reset() {
	*x = DayProfile{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DayProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayProfile) ProtoMessage() {}

func (x *DayProfile) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DayProfile) GetDayId() string {
	if x != nil {
		if x.xxx_hidden_DayId != nil {
			return *x.xxx_hidden_DayId
		}
		return ""
	}
	return ""
}

func (x *DayProfile) GetSwitching() []*Switching {
	if x != nil {
		if x.xxx_hidden_Switching != nil {
			return *x.xxx_hidden_Switching
		}
	}
	return nil
}

func (x *DayProfile) SetDayId(v string) {
	x.xxx_hidden_DayId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *DayProfile) SetSwitching(v []*Switching) {
	x.xxx_hidden_Switching = &v
}

func (x *DayProfile) HasDayId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DayProfile) ClearDayId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_DayId = nil
}

type DayProfile_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for the day profile
	// @example: "weekday-profile"
	DayId *string
	// List of switching events (each with specific time and relay states)
	Switching []*Switching
}

func (b0 DayProfile_builder) Build() *DayProfile {
	m0 := &DayProfile{}
	b, x := &b0, m0
	_, _ = b, x
	if b.DayId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_DayId = b.DayId
	}
	x.xxx_hidden_Switching = &b.Switching
	return m0
}

// SpecialDay represents specific days such as holidays or exceptions
type SpecialDay struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Year        int32                  `protobuf:"varint,1,opt,name=year"`
	xxx_hidden_Month       int32                  `protobuf:"varint,2,opt,name=month"`
	xxx_hidden_Day         int32                  `protobuf:"varint,3,opt,name=day"`
	xxx_hidden_DayId       *string                `protobuf:"bytes,4,opt,name=day_id,json=dayId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SpecialDay) Reset() {
	*x = SpecialDay{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpecialDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialDay) ProtoMessage() {}

func (x *SpecialDay) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SpecialDay) GetYear() int32 {
	if x != nil {
		return x.xxx_hidden_Year
	}
	return 0
}

func (x *SpecialDay) GetMonth() int32 {
	if x != nil {
		return x.xxx_hidden_Month
	}
	return 0
}

func (x *SpecialDay) GetDay() int32 {
	if x != nil {
		return x.xxx_hidden_Day
	}
	return 0
}

func (x *SpecialDay) GetDayId() string {
	if x != nil {
		if x.xxx_hidden_DayId != nil {
			return *x.xxx_hidden_DayId
		}
		return ""
	}
	return ""
}

func (x *SpecialDay) SetYear(v int32) {
	x.xxx_hidden_Year = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 4)
}

func (x *SpecialDay) SetMonth(v int32) {
	x.xxx_hidden_Month = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *SpecialDay) SetDay(v int32) {
	x.xxx_hidden_Day = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *SpecialDay) SetDayId(v string) {
	x.xxx_hidden_DayId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *SpecialDay) HasYear() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *SpecialDay) HasMonth() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SpecialDay) HasDay() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SpecialDay) HasDayId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SpecialDay) ClearYear() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Year = 0
}

func (x *SpecialDay) ClearMonth() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Month = 0
}

func (x *SpecialDay) ClearDay() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Day = 0
}

func (x *SpecialDay) ClearDayId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_DayId = nil
}

type SpecialDay_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Year of the special day
	// @values: full year (e.g., 2023)
	// @example: 2023
	Year *int32
	// Month of the special day
	// @values: 1–12
	// @example: 12
	Month *int32
	// Day of the special day
	// @values: 1–31
	// @example: 25
	Day *int32
	// Unique identifier for the special day
	// @example: "christmas"
	DayId *string
}

func (b0 SpecialDay_builder) Build() *SpecialDay {
	m0 := &SpecialDay{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Year != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 4)
		x.xxx_hidden_Year = *b.Year
	}
	if b.Month != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Month = *b.Month
	}
	if b.Day != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Day = *b.Day
	}
	if b.DayId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_DayId = b.DayId
	}
	return m0
}

// Week represents a week of the year, containing a list of Day IDs and Week Name
type Week struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_WeekId      *string                `protobuf:"bytes,1,opt,name=week_id,json=weekId"`
	xxx_hidden_WeekName    *string                `protobuf:"bytes,2,opt,name=week_name,json=weekName"`
	xxx_hidden_DayIds      []string               `protobuf:"bytes,3,rep,name=day_ids,json=dayIds"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Week) Reset() {
	*x = Week{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Week) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Week) ProtoMessage() {}

func (x *Week) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Week) GetWeekId() string {
	if x != nil {
		if x.xxx_hidden_WeekId != nil {
			return *x.xxx_hidden_WeekId
		}
		return ""
	}
	return ""
}

func (x *Week) GetWeekName() string {
	if x != nil {
		if x.xxx_hidden_WeekName != nil {
			return *x.xxx_hidden_WeekName
		}
		return ""
	}
	return ""
}

func (x *Week) GetDayIds() []string {
	if x != nil {
		return x.xxx_hidden_DayIds
	}
	return nil
}

func (x *Week) SetWeekId(v string) {
	x.xxx_hidden_WeekId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *Week) SetWeekName(v string) {
	x.xxx_hidden_WeekName = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *Week) SetDayIds(v []string) {
	x.xxx_hidden_DayIds = v
}

func (x *Week) HasWeekId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Week) HasWeekName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Week) ClearWeekId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_WeekId = nil
}

func (x *Week) ClearWeekName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_WeekName = nil
}

type Week_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for the week
	// @example: "week-01"
	WeekId *string
	// Name of the week
	// @example: "Week 1"
	WeekName *string
	// List of day IDs that belong to this week
	// @example: ["monday", "tuesday", "holiday"]
	DayIds []string
}

func (b0 Week_builder) Build() *Week {
	m0 := &Week{}
	b, x := &b0, m0
	_, _ = b, x
	if b.WeekId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_WeekId = b.WeekId
	}
	if b.WeekName != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_WeekName = b.WeekName
	}
	x.xxx_hidden_DayIds = b.DayIds
	return m0
}

// Season represents a season which spans across a specific start date and references a week
type Season struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          *string                `protobuf:"bytes,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_StartYear   int32                  `protobuf:"varint,3,opt,name=start_year,json=startYear"`
	xxx_hidden_StartMonth  int32                  `protobuf:"varint,4,opt,name=start_month,json=startMonth"`
	xxx_hidden_StartDay    int32                  `protobuf:"varint,5,opt,name=start_day,json=startDay"`
	xxx_hidden_WeekId      *string                `protobuf:"bytes,6,opt,name=week_id,json=weekId"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Season) Reset() {
	*x = Season{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Season) ProtoMessage() {}

func (x *Season) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Season) GetId() string {
	if x != nil {
		if x.xxx_hidden_Id != nil {
			return *x.xxx_hidden_Id
		}
		return ""
	}
	return ""
}

func (x *Season) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Season) GetStartYear() int32 {
	if x != nil {
		return x.xxx_hidden_StartYear
	}
	return 0
}

func (x *Season) GetStartMonth() int32 {
	if x != nil {
		return x.xxx_hidden_StartMonth
	}
	return 0
}

func (x *Season) GetStartDay() int32 {
	if x != nil {
		return x.xxx_hidden_StartDay
	}
	return 0
}

func (x *Season) GetWeekId() string {
	if x != nil {
		if x.xxx_hidden_WeekId != nil {
			return *x.xxx_hidden_WeekId
		}
		return ""
	}
	return ""
}

func (x *Season) SetId(v string) {
	x.xxx_hidden_Id = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *Season) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *Season) SetStartYear(v int32) {
	x.xxx_hidden_StartYear = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *Season) SetStartMonth(v int32) {
	x.xxx_hidden_StartMonth = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *Season) SetStartDay(v int32) {
	x.xxx_hidden_StartDay = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 6)
}

func (x *Season) SetWeekId(v string) {
	x.xxx_hidden_WeekId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *Season) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Season) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Season) HasStartYear() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Season) HasStartMonth() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Season) HasStartDay() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Season) HasWeekId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *Season) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = nil
}

func (x *Season) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *Season) ClearStartYear() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_StartYear = 0
}

func (x *Season) ClearStartMonth() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_StartMonth = 0
}

func (x *Season) ClearStartDay() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_StartDay = 0
}

func (x *Season) ClearWeekId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_WeekId = nil
}

type Season_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Unique identifier for the season
	// @example: "season-winter"
	Id *string
	// Name of the season
	// @example: "Winter"
	Name *string
	// Start year of the season
	// @example: 2023
	StartYear *int32
	// Start month of the season
	// @values: 1–12
	// @example: 12
	StartMonth *int32
	// Start day of the season
	// @values: 1–31
	// @example: 1
	StartDay *int32
	// Reference to a Week ID that this season is associated with
	// @example: "week-01"
	WeekId *string
}

func (b0 Season_builder) Build() *Season {
	m0 := &Season{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Id = b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Name = b.Name
	}
	if b.StartYear != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_StartYear = *b.StartYear
	}
	if b.StartMonth != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_StartMonth = *b.StartMonth
	}
	if b.StartDay != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 6)
		x.xxx_hidden_StartDay = *b.StartDay
	}
	if b.WeekId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_WeekId = b.WeekId
	}
	return m0
}

// TimeOfUse represents the main Time-of-Use (TOU) table containing all relevant definitions
type TimeOfUseTableSpec struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ExpiesAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expies_at,json=expiesAt"`
	xxx_hidden_HdoGroupId  *string                `protobuf:"bytes,4,opt,name=hdo_group_id,json=hdoGroupId"`
	xxx_hidden_ActivateAt  *date.Date             `protobuf:"bytes,5,opt,name=activate_at,json=activateAt"`
	xxx_hidden_Seasons     *[]*Season             `protobuf:"bytes,6,rep,name=seasons"`
	xxx_hidden_Weeks       *[]*Week               `protobuf:"bytes,7,rep,name=weeks"`
	xxx_hidden_DayProfiles *[]*DayProfile         `protobuf:"bytes,8,rep,name=day_profiles,json=dayProfiles"`
	xxx_hidden_SpecialDays *[]*SpecialDay         `protobuf:"bytes,9,rep,name=special_days,json=specialDays"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TimeOfUseTableSpec) Reset() {
	*x = TimeOfUseTableSpec{}
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeOfUseTableSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOfUseTableSpec) ProtoMessage() {}

func (x *TimeOfUseTableSpec) ProtoReflect() protoreflect.Message {
	mi := &file_acquisition_timeofuse_timeofuse_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TimeOfUseTableSpec) GetExpiesAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_ExpiesAt
	}
	return nil
}

func (x *TimeOfUseTableSpec) GetHdoGroupId() string {
	if x != nil {
		if x.xxx_hidden_HdoGroupId != nil {
			return *x.xxx_hidden_HdoGroupId
		}
		return ""
	}
	return ""
}

func (x *TimeOfUseTableSpec) GetActivateAt() *date.Date {
	if x != nil {
		return x.xxx_hidden_ActivateAt
	}
	return nil
}

func (x *TimeOfUseTableSpec) GetSeasons() []*Season {
	if x != nil {
		if x.xxx_hidden_Seasons != nil {
			return *x.xxx_hidden_Seasons
		}
	}
	return nil
}

func (x *TimeOfUseTableSpec) GetWeeks() []*Week {
	if x != nil {
		if x.xxx_hidden_Weeks != nil {
			return *x.xxx_hidden_Weeks
		}
	}
	return nil
}

func (x *TimeOfUseTableSpec) GetDayProfiles() []*DayProfile {
	if x != nil {
		if x.xxx_hidden_DayProfiles != nil {
			return *x.xxx_hidden_DayProfiles
		}
	}
	return nil
}

func (x *TimeOfUseTableSpec) GetSpecialDays() []*SpecialDay {
	if x != nil {
		if x.xxx_hidden_SpecialDays != nil {
			return *x.xxx_hidden_SpecialDays
		}
	}
	return nil
}

func (x *TimeOfUseTableSpec) SetExpiesAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_ExpiesAt = v
}

func (x *TimeOfUseTableSpec) SetHdoGroupId(v string) {
	x.xxx_hidden_HdoGroupId = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *TimeOfUseTableSpec) SetActivateAt(v *date.Date) {
	x.xxx_hidden_ActivateAt = v
}

func (x *TimeOfUseTableSpec) SetSeasons(v []*Season) {
	x.xxx_hidden_Seasons = &v
}

func (x *TimeOfUseTableSpec) SetWeeks(v []*Week) {
	x.xxx_hidden_Weeks = &v
}

func (x *TimeOfUseTableSpec) SetDayProfiles(v []*DayProfile) {
	x.xxx_hidden_DayProfiles = &v
}

func (x *TimeOfUseTableSpec) SetSpecialDays(v []*SpecialDay) {
	x.xxx_hidden_SpecialDays = &v
}

func (x *TimeOfUseTableSpec) HasExpiesAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ExpiesAt != nil
}

func (x *TimeOfUseTableSpec) HasHdoGroupId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TimeOfUseTableSpec) HasActivateAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_ActivateAt != nil
}

func (x *TimeOfUseTableSpec) ClearExpiesAt() {
	x.xxx_hidden_ExpiesAt = nil
}

func (x *TimeOfUseTableSpec) ClearHdoGroupId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_HdoGroupId = nil
}

func (x *TimeOfUseTableSpec) ClearActivateAt() {
	x.xxx_hidden_ActivateAt = nil
}

type TimeOfUseTableSpec_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Expiration date of the TOU table
	// @example: "2025-01-01T00:00:00Z"
	ExpiesAt *timestamppb.Timestamp
	// HDO (High Demand Option) Group ID
	// @example: "group-a"
	HdoGroupId *string
	// Activation date of the TOU table
	// @example: "2024-06-01"
	ActivateAt *date.Date
	// List of seasons defined in the TOU
	Seasons []*Season
	// List of weeks defined in the TOU
	Weeks []*Week
	// List of day profiles (each day having a list of switching events)
	DayProfiles []*DayProfile
	// List of special days (e.g., holidays, exceptions)
	SpecialDays []*SpecialDay
}

func (b0 TimeOfUseTableSpec_builder) Build() *TimeOfUseTableSpec {
	m0 := &TimeOfUseTableSpec{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ExpiesAt = b.ExpiesAt
	if b.HdoGroupId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_HdoGroupId = b.HdoGroupId
	}
	x.xxx_hidden_ActivateAt = b.ActivateAt
	x.xxx_hidden_Seasons = &b.Seasons
	x.xxx_hidden_Weeks = &b.Weeks
	x.xxx_hidden_DayProfiles = &b.DayProfiles
	x.xxx_hidden_SpecialDays = &b.SpecialDays
	return m0
}

var File_acquisition_timeofuse_timeofuse_proto protoreflect.FileDescriptor

const file_acquisition_timeofuse_timeofuse_proto_rawDesc = "" +
	"\n" +
	"%acquisition/timeofuse/timeofuse.proto\x12,io.clbs.openhes.models.acquisition.timeofuse\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16google/type/date.proto\"\xa7\x01\n" +
	"\tSwitching\x12\x12\n" +
	"\x04hour\x18\x01 \x01(\x05R\x04hour\x12\x16\n" +
	"\x06minute\x18\x02 \x01(\x05R\x06minute\x12\x16\n" +
	"\x06tariff\x18\x03 \x01(\x05R\x06tariff\x12V\n" +
	"\x06relays\x18\x04 \x03(\v2>.io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecordR\x06relays\"}\n" +
	"\x10RelayStateRecord\x12\x19\n" +
	"\brelay_id\x18\x01 \x01(\x05R\arelayId\x12N\n" +
	"\x05state\x18\x02 \x01(\x0e28.io.clbs.openhes.models.acquisition.timeofuse.RelayStateR\x05state\"z\n" +
	"\n" +
	"DayProfile\x12\x15\n" +
	"\x06day_id\x18\x01 \x01(\tR\x05dayId\x12U\n" +
	"\tswitching\x18\x02 \x03(\v27.io.clbs.openhes.models.acquisition.timeofuse.SwitchingR\tswitching\"_\n" +
	"\n" +
	"SpecialDay\x12\x12\n" +
	"\x04year\x18\x01 \x01(\x05R\x04year\x12\x14\n" +
	"\x05month\x18\x02 \x01(\x05R\x05month\x12\x10\n" +
	"\x03day\x18\x03 \x01(\x05R\x03day\x12\x15\n" +
	"\x06day_id\x18\x04 \x01(\tR\x05dayId\"U\n" +
	"\x04Week\x12\x17\n" +
	"\aweek_id\x18\x01 \x01(\tR\x06weekId\x12\x1b\n" +
	"\tweek_name\x18\x02 \x01(\tR\bweekName\x12\x17\n" +
	"\aday_ids\x18\x03 \x03(\tR\x06dayIds\"\xa2\x01\n" +
	"\x06Season\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"start_year\x18\x03 \x01(\x05R\tstartYear\x12\x1f\n" +
	"\vstart_month\x18\x04 \x01(\x05R\n" +
	"startMonth\x12\x1b\n" +
	"\tstart_day\x18\x05 \x01(\x05R\bstartDay\x12\x17\n" +
	"\aweek_id\x18\x06 \x01(\tR\x06weekId\"\xf7\x03\n" +
	"\x12TimeOfUseTableSpec\x127\n" +
	"\texpies_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bexpiesAt\x12 \n" +
	"\fhdo_group_id\x18\x04 \x01(\tR\n" +
	"hdoGroupId\x122\n" +
	"\vactivate_at\x18\x05 \x01(\v2\x11.google.type.DateR\n" +
	"activateAt\x12N\n" +
	"\aseasons\x18\x06 \x03(\v24.io.clbs.openhes.models.acquisition.timeofuse.SeasonR\aseasons\x12H\n" +
	"\x05weeks\x18\a \x03(\v22.io.clbs.openhes.models.acquisition.timeofuse.WeekR\x05weeks\x12[\n" +
	"\fday_profiles\x18\b \x03(\v28.io.clbs.openhes.models.acquisition.timeofuse.DayProfileR\vdayProfiles\x12[\n" +
	"\fspecial_days\x18\t \x03(\v28.io.clbs.openhes.models.acquisition.timeofuse.SpecialDayR\vspecialDays*^\n" +
	"\n" +
	"RelayState\x12\x1b\n" +
	"\x17RELAY_STATE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13RELAY_STATE_CONNECT\x10\x01\x12\x1a\n" +
	"\x16RELAY_STATE_DISCONNECT\x10\x02BDZBgithub.com/cybroslabs/ouro-api-shared/gen/go/acquisition/timeofuseb\beditionsp\xe8\a"

var file_acquisition_timeofuse_timeofuse_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_acquisition_timeofuse_timeofuse_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_acquisition_timeofuse_timeofuse_proto_goTypes = []any{
	(RelayState)(0),               // 0: io.clbs.openhes.models.acquisition.timeofuse.RelayState
	(*Switching)(nil),             // 1: io.clbs.openhes.models.acquisition.timeofuse.Switching
	(*RelayStateRecord)(nil),      // 2: io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord
	(*DayProfile)(nil),            // 3: io.clbs.openhes.models.acquisition.timeofuse.DayProfile
	(*SpecialDay)(nil),            // 4: io.clbs.openhes.models.acquisition.timeofuse.SpecialDay
	(*Week)(nil),                  // 5: io.clbs.openhes.models.acquisition.timeofuse.Week
	(*Season)(nil),                // 6: io.clbs.openhes.models.acquisition.timeofuse.Season
	(*TimeOfUseTableSpec)(nil),    // 7: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*date.Date)(nil),             // 9: google.type.Date
}
var file_acquisition_timeofuse_timeofuse_proto_depIdxs = []int32{
	2, // 0: io.clbs.openhes.models.acquisition.timeofuse.Switching.relays:type_name -> io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord
	0, // 1: io.clbs.openhes.models.acquisition.timeofuse.RelayStateRecord.state:type_name -> io.clbs.openhes.models.acquisition.timeofuse.RelayState
	1, // 2: io.clbs.openhes.models.acquisition.timeofuse.DayProfile.switching:type_name -> io.clbs.openhes.models.acquisition.timeofuse.Switching
	8, // 3: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.expies_at:type_name -> google.protobuf.Timestamp
	9, // 4: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.activate_at:type_name -> google.type.Date
	6, // 5: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.seasons:type_name -> io.clbs.openhes.models.acquisition.timeofuse.Season
	5, // 6: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.weeks:type_name -> io.clbs.openhes.models.acquisition.timeofuse.Week
	3, // 7: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.day_profiles:type_name -> io.clbs.openhes.models.acquisition.timeofuse.DayProfile
	4, // 8: io.clbs.openhes.models.acquisition.timeofuse.TimeOfUseTableSpec.special_days:type_name -> io.clbs.openhes.models.acquisition.timeofuse.SpecialDay
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_acquisition_timeofuse_timeofuse_proto_init() }
func file_acquisition_timeofuse_timeofuse_proto_init() {
	if File_acquisition_timeofuse_timeofuse_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_acquisition_timeofuse_timeofuse_proto_rawDesc), len(file_acquisition_timeofuse_timeofuse_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_acquisition_timeofuse_timeofuse_proto_goTypes,
		DependencyIndexes: file_acquisition_timeofuse_timeofuse_proto_depIdxs,
		EnumInfos:         file_acquisition_timeofuse_timeofuse_proto_enumTypes,
		MessageInfos:      file_acquisition_timeofuse_timeofuse_proto_msgTypes,
	}.Build()
	File_acquisition_timeofuse_timeofuse_proto = out.File
	file_acquisition_timeofuse_timeofuse_proto_goTypes = nil
	file_acquisition_timeofuse_timeofuse_proto_depIdxs = nil
}
