// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/svcdeviceregistry/deviceregistry.proto

package svcdeviceregistry

import (
	context "context"
	acquisition "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition"
	common "github.com/cybroslabs/ouro-api-shared/gen/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceRegistryService_CreateVariable_FullMethodName                                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateVariable"
	DeviceRegistryService_ListVariables_FullMethodName                                                    = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListVariables"
	DeviceRegistryService_GetVariable_FullMethodName                                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetVariable"
	DeviceRegistryService_UpdateVariable_FullMethodName                                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateVariable"
	DeviceRegistryService_DeleteVariable_FullMethodName                                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteVariable"
	DeviceRegistryService_AddRegisterToVariable_FullMethodName                                            = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/AddRegisterToVariable"
	DeviceRegistryService_RemoveRegisterFromVariable_FullMethodName                                       = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/RemoveRegisterFromVariable"
	DeviceRegistryService_CreateDeviceConfigurationRegister_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateDeviceConfigurationRegister"
	DeviceRegistryService_ListDeviceConfigurationRegisters_FullMethodName                                 = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDeviceConfigurationRegisters"
	DeviceRegistryService_GetDeviceConfigurationRegister_FullMethodName                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceConfigurationRegister"
	DeviceRegistryService_UpdateDeviceConfigurationRegister_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateDeviceConfigurationRegister"
	DeviceRegistryService_DeleteDeviceConfigurationRegister_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteDeviceConfigurationRegister"
	DeviceRegistryService_GetDeviceConfigurationRegisterMap_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceConfigurationRegisterMap"
	DeviceRegistryService_CreateDeviceConfigurationTemplate_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateDeviceConfigurationTemplate"
	DeviceRegistryService_ListDeviceConfigurationTemplates_FullMethodName                                 = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDeviceConfigurationTemplates"
	DeviceRegistryService_GetDeviceConfigurationTemplate_FullMethodName                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceConfigurationTemplate"
	DeviceRegistryService_UpdateDeviceConfigurationTemplate_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateDeviceConfigurationTemplate"
	DeviceRegistryService_DeleteDeviceConfigurationTemplate_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteDeviceConfigurationTemplate"
	DeviceRegistryService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_FullMethodName      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/AddDeviceConfigurationRegisterToDeviceConfigurationTemplate"
	DeviceRegistryService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_FullMethodName = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate"
	DeviceRegistryService_ListDrivers_FullMethodName                                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDrivers"
	DeviceRegistryService_CreateDriver_FullMethodName                                                     = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateDriver"
	DeviceRegistryService_GetDriver_FullMethodName                                                        = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDriver"
	DeviceRegistryService_CreateCommunicationUnit_FullMethodName                                          = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateCommunicationUnit"
	DeviceRegistryService_UpdateCommunicationUnit_FullMethodName                                          = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateCommunicationUnit"
	DeviceRegistryService_ListCommunicationUnits_FullMethodName                                           = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListCommunicationUnits"
	DeviceRegistryService_GetCommunicationUnit_FullMethodName                                             = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetCommunicationUnit"
	DeviceRegistryService_DeleteCommunicationUnit_FullMethodName                                          = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteCommunicationUnit"
	DeviceRegistryService_GetCommunicationUnitNetworkMap_FullMethodName                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetCommunicationUnitNetworkMap"
	DeviceRegistryService_ListCommunicationUnitLogRecords_FullMethodName                                  = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListCommunicationUnitLogRecords"
	DeviceRegistryService_CreateCommunicationBus_FullMethodName                                           = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateCommunicationBus"
	DeviceRegistryService_ListCommunicationBuses_FullMethodName                                           = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListCommunicationBuses"
	DeviceRegistryService_DeleteCommunicationBus_FullMethodName                                           = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteCommunicationBus"
	DeviceRegistryService_AddCommunicationUnitsToCommunicationBus_FullMethodName                          = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/AddCommunicationUnitsToCommunicationBus"
	DeviceRegistryService_RemoveCommunicationUnitsFromCommunicationBus_FullMethodName                     = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/RemoveCommunicationUnitsFromCommunicationBus"
	DeviceRegistryService_CreateDevice_FullMethodName                                                     = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateDevice"
	DeviceRegistryService_UpdateDevice_FullMethodName                                                     = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateDevice"
	DeviceRegistryService_ListDevices_FullMethodName                                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDevices"
	DeviceRegistryService_GetDevice_FullMethodName                                                        = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDevice"
	DeviceRegistryService_DeleteDevice_FullMethodName                                                     = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteDevice"
	DeviceRegistryService_StreamDeviceType_FullMethodName                                                 = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/StreamDeviceType"
	DeviceRegistryService_SetDeviceCommunicationUnits_FullMethodName                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/SetDeviceCommunicationUnits"
	DeviceRegistryService_GetDeviceCommunicationUnits_FullMethodName                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceCommunicationUnits"
	DeviceRegistryService_ListDeviceCommunicationUnitChanges_FullMethodName                               = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDeviceCommunicationUnitChanges"
	DeviceRegistryService_GetDeviceConnectionInfo_FullMethodName                                          = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceConnectionInfo"
	DeviceRegistryService_SetDeviceInfo_FullMethodName                                                    = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/SetDeviceInfo"
	DeviceRegistryService_GetDeviceInfo_FullMethodName                                                    = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceInfo"
	DeviceRegistryService_GetDeviceDeviceGroups_FullMethodName                                            = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceDeviceGroups"
	DeviceRegistryService_GetDeviceNetworkMap_FullMethodName                                              = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceNetworkMap"
	DeviceRegistryService_CreateDeviceGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateDeviceGroup"
	DeviceRegistryService_UpdateDeviceGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateDeviceGroup"
	DeviceRegistryService_ListDeviceGroups_FullMethodName                                                 = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDeviceGroups"
	DeviceRegistryService_GetDeviceGroup_FullMethodName                                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetDeviceGroup"
	DeviceRegistryService_DeleteDeviceGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteDeviceGroup"
	DeviceRegistryService_StreamDeviceGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/StreamDeviceGroup"
	DeviceRegistryService_AddDevicesToGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/AddDevicesToGroup"
	DeviceRegistryService_RemoveDevicesFromGroup_FullMethodName                                           = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/RemoveDevicesFromGroup"
	DeviceRegistryService_ListDeviceGroupDevices_FullMethodName                                           = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListDeviceGroupDevices"
	DeviceRegistryService_ListModemPools_FullMethodName                                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListModemPools"
	DeviceRegistryService_GetModemPool_FullMethodName                                                     = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetModemPool"
	DeviceRegistryService_CreateModemPool_FullMethodName                                                  = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateModemPool"
	DeviceRegistryService_UpdateModemPool_FullMethodName                                                  = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateModemPool"
	DeviceRegistryService_DeleteModemPool_FullMethodName                                                  = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteModemPool"
	DeviceRegistryService_CreateModem_FullMethodName                                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateModem"
	DeviceRegistryService_UpdateModem_FullMethodName                                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateModem"
	DeviceRegistryService_DeleteModem_FullMethodName                                                      = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteModem"
	DeviceRegistryService_CreateTimeOfUseTable_FullMethodName                                             = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateTimeOfUseTable"
	DeviceRegistryService_ListTimeOfUseTables_FullMethodName                                              = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/ListTimeOfUseTables"
	DeviceRegistryService_GetTimeOfUseTable_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetTimeOfUseTable"
	DeviceRegistryService_UpdateTimeOfUseTable_FullMethodName                                             = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateTimeOfUseTable"
	DeviceRegistryService_DeleteTimeOfUseTable_FullMethodName                                             = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteTimeOfUseTable"
	DeviceRegistryService_CreateFieldDescriptor_FullMethodName                                            = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/CreateFieldDescriptor"
	DeviceRegistryService_UpdateFieldDescriptor_FullMethodName                                            = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateFieldDescriptor"
	DeviceRegistryService_DeleteFieldDescriptor_FullMethodName                                            = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/DeleteFieldDescriptor"
	DeviceRegistryService_SetManagedFields_FullMethodName                                                 = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/SetManagedFields"
	DeviceRegistryService_GetMapDeviceKeyXId_FullMethodName                                               = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/GetMapDeviceKeyXId"
	DeviceRegistryService_AddCommunicationUnitLogs_FullMethodName                                         = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/AddCommunicationUnitLogs"
	DeviceRegistryService_SetUnknownDevices_FullMethodName                                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/SetUnknownDevices"
	DeviceRegistryService_SetNeightbours_FullMethodName                                                   = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/SetNeightbours"
	DeviceRegistryService_SetCurrentDeviceCommunicationUnit_FullMethodName                                = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/SetCurrentDeviceCommunicationUnit"
	DeviceRegistryService_UpdateObjectFields_FullMethodName                                               = "/io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService/UpdateObjectFields"
)

// DeviceRegistryServiceClient is the client API for DeviceRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Deviceregistry service definition.
type DeviceRegistryServiceClient interface {
	// Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
	CreateVariable(ctx context.Context, in *acquisition.CreateVariableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Retrieves a paginated list of variables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListVariables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfVariable, error)
	// Retrieves the details of the specified variable.
	GetVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Variable, error)
	// Updates the details of an existing variable. Fields that are omitted from the request will be left unchanged.
	UpdateVariable(ctx context.Context, in *acquisition.Variable, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the specified variable.
	DeleteVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Adds a specified register to and existing variable.
	AddRegisterToVariable(ctx context.Context, in *acquisition.AddRegisterToVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Removes a specified register from a variable.
	RemoveRegisterFromVariable(ctx context.Context, in *acquisition.RemoveRegisterFromVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new device configuration register. Returns the identifier of the newly created register.
	CreateDeviceConfigurationRegister(ctx context.Context, in *acquisition.CreateDeviceConfigurationRegisterRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Retrieves a paginated list of configuration registers based on the specified criteria. The page size and page number (zero-based) are defined in the request.
	ListDeviceConfigurationRegisters(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationRegister, error)
	// Retrieves the details of the specified device configuration register.
	GetDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationRegister, error)
	// Updates the details of an existing device configuration register. Fields that are omitted from the request will be left unchanged.
	UpdateDeviceConfigurationRegister(ctx context.Context, in *acquisition.DeviceConfigurationRegister, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the specified device configuration register.
	DeleteDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDeviceConfigurationRegisterMap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationRegisterMap, error)
	// Creates a new device configuration template. Returns the identifier of the newly created template.
	CreateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.CreateDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Retrieves a paginated list of device configuration templates based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDeviceConfigurationTemplates(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationTemplate, error)
	// Retrieves the details of the specified device configuration template.
	GetDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationTemplate, error)
	// Updates the details of an existing device configuration template. Fields that are omitted from the request will be left unchanged.
	UpdateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.DeviceConfigurationTemplate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the specified device configuration template.
	DeleteDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Adds a specified device configuration register to an existing device configuration template.
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context, in *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Removes a specified device configuration register from a device configuration template.
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context, in *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves a paginated list of drivers based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDrivers(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDriver, error)
	// The method called by the Ouro Operator to set the driver templates. The parameter contains the driver templates.
	CreateDriver(ctx context.Context, in *acquisition.SetDriver, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves the details of the specified driver.
	GetDriver(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Driver, error)
	// @group: Devices
	// @tag: communicationunit
	// Creates a new communication unit. Returns the identifier of the newly created register.
	CreateCommunicationUnit(ctx context.Context, in *acquisition.CreateCommunicationUnitRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationunit
	// Updates an exiting communication unit. Requires the full unit specification; partial updates are not supported.
	UpdateCommunicationUnit(ctx context.Context, in *acquisition.CommunicationUnit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieve a paginated list of communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListCommunicationUnits(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the details of the specified communication unit.
	GetCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.CommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// Deletes the specified communication unit.
	DeleteCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the network map (topology) reported by the data concentrator reports for the specified communication unit.
	GetCommunicationUnitNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves a paginated list of communication unit log records based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListCommunicationUnitLogRecords(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnitLogRecord, error)
	// @group: Devices
	// @tag: communicationbus
	// Creates a new communication bus. Returns the identifier of the newly created communication bus.
	CreateCommunicationBus(ctx context.Context, in *acquisition.CreateCommunicationBusRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationbus
	// Retrieves a paginated list of communication buses. The page size and page number (zero-based) can be defined in the request.
	ListCommunicationBuses(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationBus, error)
	// @group: Devices
	// @tag: communicationbus
	// Deletes the specified communication bus.
	DeleteCommunicationBus(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	// Adds a specified communication unit to an existing communication bus.
	AddCommunicationUnitsToCommunicationBus(ctx context.Context, in *acquisition.AddCommunicationUnitsToCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	// Removes a specified communication bus from an existing communication bus.
	RemoveCommunicationUnitsFromCommunicationBus(ctx context.Context, in *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// Creates a new device. Returns the identifier of the newly created device.
	CreateDevice(ctx context.Context, in *acquisition.CreateDeviceRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: device
	// Updates the details of an existing device. Fields that are omitted from the request will be left unchanged.
	UpdateDevice(ctx context.Context, in *acquisition.Device, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// Retrieves a paginated list of devices based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDevices(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error)
	// @group: Devices
	// @tag: device
	// Retrieves the details of the specified device.
	GetDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Device, error)
	// @group: Devices
	// @tag: device
	// Deletes the specified device.
	DeleteDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	StreamDeviceType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse], error)
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(ctx context.Context, in *acquisition.SetDeviceCommunicationUnitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves a list of communication units linked to the specified device.
	GetDeviceCommunicationUnits(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnit, error)
	// @group: Devices
	// @tag: device
	// Retrieves a paginated list of changes to device communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDeviceCommunicationUnitChanges(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnitChange, error)
	// The method called by the DataProxy to resolve connection info for given device(s).
	GetDeviceConnectionInfo(ctx context.Context, in *structpb.ListValue, opts ...grpc.CallOption) (*acquisition.MapDeviceConnectionInfo, error)
	// Sets the device information.
	SetDeviceInfo(ctx context.Context, in *acquisition.SetDeviceInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// Retrieves the profile-typed info of the specified device.
	GetDeviceInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceInfo, error)
	// @group: Devices
	// @tag: device
	// Retrieves a list of device groups that contain the specified device.
	GetDeviceDeviceGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error)
	// @group: Devices
	// @tag: device
	// Retrieves the network map (topology) reported by the data concentrator reports for the specified  device.
	GetDeviceNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error)
	// Creates a new device group. Returns the identifier of the newly created device group.
	CreateDeviceGroup(ctx context.Context, in *acquisition.CreateDeviceGroupRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Updates the details of an existing device group. Fields that are omitted from the request will be left unchanged.
	UpdateDeviceGroup(ctx context.Context, in *acquisition.DeviceGroup, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves a paginated list of devices groups based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDeviceGroups(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error)
	// @param The device group identifier.
	// @return The device group specification.
	// Retrieves the details of the specified device group.
	GetDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceGroup, error)
	// @group: Devices
	// @tag: devicegroup
	// Deletes the specified device group.
	DeleteDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// The method returns stream of devices from the device group.
	// @param The device group identifier.
	StreamDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.StreamDeviceGroup], error)
	// Adds the specified devices to an existing device group.
	AddDevicesToGroup(ctx context.Context, in *acquisition.AddDevicesToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Removes the specified devices from an existing device group.
	RemoveDevicesFromGroup(ctx context.Context, in *acquisition.RemoveDevicesFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves a paginated list of devices in the specified device group. The page size and page number (zero-based) can be defined in the request.
	ListDeviceGroupDevices(ctx context.Context, in *acquisition.ListDeviceGroupDevicesRequest, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error)
	// Retrieves a paginated list of modem pools. The page size and page number (zero-based) can be defined in the request.
	ListModemPools(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfModemPool, error)
	// Retrieves the details of the specified modem pool.
	GetModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ModemPool, error)
	// Creates a new modem pool. Returns the identifier of the newly created modem pool.
	CreateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Updates the details of an existing modem pool. Fields that are omitted from the request will be left unchanged.
	UpdateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes the specified modem pool.
	DeleteModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new modem within an existing modem pool. Returns the identifier of the newly created modem.
	CreateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// Updates the details of an existing modem within the specified modem pool.
	UpdateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes th specified modem.
	DeleteModem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Time-Of-Use Tables
	// Creates a new time-of-use table. Returns the identifier of the newly created table.
	CreateTimeOfUseTable(ctx context.Context, in *acquisition.CreateTimeOfUseTableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Time-Of-Use Tables
	// Retrieves a paginated list of time-of-use tables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListTimeOfUseTables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfTimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// Retrieves the details of the spcified time-of-use table.
	GetTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.TimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// Updates the details of an existing time-of-use table.
	UpdateTimeOfUseTable(ctx context.Context, in *acquisition.TimeOfUseTable, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Time-Of-Use Tables
	// Deletes the specified time-of-use table.
	DeleteTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Fields
	// Creates a new field descriptor. Returns the identifier of the newly created field descriptor.
	CreateFieldDescriptor(ctx context.Context, in *common.CreateFieldDescriptorRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Fields
	// Updates the details of an existing field descriptor. Fields that are omitted from the request will be left unchanged.
	UpdateFieldDescriptor(ctx context.Context, in *common.FieldDescriptor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Fields
	// Deletes the specified field descriptor.
	DeleteFieldDescriptor(ctx context.Context, in *common.FieldDescriptorSelector, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Metadata
	// The method to set the managed fields of the resource(s).
	SetManagedFields(ctx context.Context, in *common.SetManagedFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: device
	// The method returns the list of x-device-identifiers that match the given device-type specific key.
	// The key can be any byte-array like unique physical identifier of the device (e.g. serial number, MAC address, etc.) which must be unique for give driver type.
	// If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
	GetMapDeviceKeyXId(ctx context.Context, in *common.ListOfDeviceKey, opts ...grpc.CallOption) (*common.MapDeviceKeyXId, error)
	// @group: Internal
	// @tag: communicationunit
	// Adds a new log records to the communication unit. Duplicit records are ignored.
	AddCommunicationUnitLogs(ctx context.Context, in *acquisition.AddCommunicationUnitLogsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: communicationunit
	// The method sets currently known unknown devices visible by the communication unit.
	SetUnknownDevices(ctx context.Context, in *acquisition.SetUnknownDevicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: communicationunit
	// The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
	// If there were other neighbours not listed within the request, they are removed from the neighbours list.
	SetNeightbours(ctx context.Context, in *acquisition.SetNeighboursRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: device
	// The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
	// The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
	// The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
	SetCurrentDeviceCommunicationUnit(ctx context.Context, in *acquisition.SetCurrentDeviceCommunicationUnitInternalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Metadata
	// Updates the fields of the specified object. Field values provided in the request are merged with existing fields, preserving any fields not included in the update.
	UpdateObjectFields(ctx context.Context, in *common.UpdateObjectFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type deviceRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceRegistryServiceClient(cc grpc.ClientConnInterface) DeviceRegistryServiceClient {
	return &deviceRegistryServiceClient{cc}
}

func (c *deviceRegistryServiceClient) CreateVariable(ctx context.Context, in *acquisition.CreateVariableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListVariables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfVariable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfVariable)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListVariables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Variable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Variable)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateVariable(ctx context.Context, in *acquisition.Variable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) AddRegisterToVariable(ctx context.Context, in *acquisition.AddRegisterToVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_AddRegisterToVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) RemoveRegisterFromVariable(ctx context.Context, in *acquisition.RemoveRegisterFromVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_RemoveRegisterFromVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDeviceConfigurationRegister(ctx context.Context, in *acquisition.CreateDeviceConfigurationRegisterRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDeviceConfigurationRegisters(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationRegister, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceConfigurationRegister)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDeviceConfigurationRegisters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationRegister, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceConfigurationRegister)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateDeviceConfigurationRegister(ctx context.Context, in *acquisition.DeviceConfigurationRegister, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceConfigurationRegisterMap(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationRegisterMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceConfigurationRegisterMap)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceConfigurationRegisterMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.CreateDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDeviceConfigurationTemplates(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceConfigurationTemplate)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDeviceConfigurationTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceConfigurationTemplate)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.DeviceConfigurationTemplate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context, in *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context, in *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDrivers(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDriver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDriver)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDriver(ctx context.Context, in *acquisition.SetDriver, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDriver(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Driver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Driver)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateCommunicationUnit(ctx context.Context, in *acquisition.CreateCommunicationUnitRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateCommunicationUnit(ctx context.Context, in *acquisition.CommunicationUnit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListCommunicationUnits(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationUnit)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.CommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.CommunicationUnit)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetCommunicationUnitNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.NetworkMap)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetCommunicationUnitNetworkMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListCommunicationUnitLogRecords(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnitLogRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationUnitLogRecord)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListCommunicationUnitLogRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateCommunicationBus(ctx context.Context, in *acquisition.CreateCommunicationBusRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListCommunicationBuses(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationBus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationBus)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListCommunicationBuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteCommunicationBus(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) AddCommunicationUnitsToCommunicationBus(ctx context.Context, in *acquisition.AddCommunicationUnitsToCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_AddCommunicationUnitsToCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) RemoveCommunicationUnitsFromCommunicationBus(ctx context.Context, in *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_RemoveCommunicationUnitsFromCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDevice(ctx context.Context, in *acquisition.CreateDeviceRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateDevice(ctx context.Context, in *acquisition.Device, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDevices(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDevice)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Device)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) StreamDeviceType(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceRegistryService_ServiceDesc.Streams[0], DeviceRegistryService_StreamDeviceType_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceRegistryService_StreamDeviceTypeClient = grpc.BidiStreamingClient[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse]

func (c *deviceRegistryServiceClient) SetDeviceCommunicationUnits(ctx context.Context, in *acquisition.SetDeviceCommunicationUnitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetDeviceCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceCommunicationUnits(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceCommunicationUnit)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDeviceCommunicationUnitChanges(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnitChange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceCommunicationUnitChange)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDeviceCommunicationUnitChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceConnectionInfo(ctx context.Context, in *structpb.ListValue, opts ...grpc.CallOption) (*acquisition.MapDeviceConnectionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.MapDeviceConnectionInfo)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceConnectionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) SetDeviceInfo(ctx context.Context, in *acquisition.SetDeviceInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetDeviceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceInfo)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceDeviceGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceGroup)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceDeviceGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.NetworkMap)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceNetworkMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateDeviceGroup(ctx context.Context, in *acquisition.CreateDeviceGroupRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateDeviceGroup(ctx context.Context, in *acquisition.DeviceGroup, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDeviceGroups(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceGroup)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDeviceGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceGroup)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) StreamDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.StreamDeviceGroup], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DeviceRegistryService_ServiceDesc.Streams[1], DeviceRegistryService_StreamDeviceGroup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[wrapperspb.StringValue, acquisition.StreamDeviceGroup]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceRegistryService_StreamDeviceGroupClient = grpc.ServerStreamingClient[acquisition.StreamDeviceGroup]

func (c *deviceRegistryServiceClient) AddDevicesToGroup(ctx context.Context, in *acquisition.AddDevicesToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_AddDevicesToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) RemoveDevicesFromGroup(ctx context.Context, in *acquisition.RemoveDevicesFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_RemoveDevicesFromGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListDeviceGroupDevices(ctx context.Context, in *acquisition.ListDeviceGroupDevicesRequest, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDevice)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListDeviceGroupDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListModemPools(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfModemPool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfModemPool)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListModemPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ModemPool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ModemPool)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteModem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateTimeOfUseTable(ctx context.Context, in *acquisition.CreateTimeOfUseTableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) ListTimeOfUseTables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfTimeOfUseTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfTimeOfUseTable)
	err := c.cc.Invoke(ctx, DeviceRegistryService_ListTimeOfUseTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.TimeOfUseTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.TimeOfUseTable)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateTimeOfUseTable(ctx context.Context, in *acquisition.TimeOfUseTable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) CreateFieldDescriptor(ctx context.Context, in *common.CreateFieldDescriptorRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, DeviceRegistryService_CreateFieldDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateFieldDescriptor(ctx context.Context, in *common.FieldDescriptor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateFieldDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) DeleteFieldDescriptor(ctx context.Context, in *common.FieldDescriptorSelector, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_DeleteFieldDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) SetManagedFields(ctx context.Context, in *common.SetManagedFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetManagedFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) GetMapDeviceKeyXId(ctx context.Context, in *common.ListOfDeviceKey, opts ...grpc.CallOption) (*common.MapDeviceKeyXId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.MapDeviceKeyXId)
	err := c.cc.Invoke(ctx, DeviceRegistryService_GetMapDeviceKeyXId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) AddCommunicationUnitLogs(ctx context.Context, in *acquisition.AddCommunicationUnitLogsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_AddCommunicationUnitLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) SetUnknownDevices(ctx context.Context, in *acquisition.SetUnknownDevicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetUnknownDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) SetNeightbours(ctx context.Context, in *acquisition.SetNeighboursRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetNeightbours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) SetCurrentDeviceCommunicationUnit(ctx context.Context, in *acquisition.SetCurrentDeviceCommunicationUnitInternalRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_SetCurrentDeviceCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRegistryServiceClient) UpdateObjectFields(ctx context.Context, in *common.UpdateObjectFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeviceRegistryService_UpdateObjectFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceRegistryServiceServer is the server API for DeviceRegistryService service.
// All implementations must embed UnimplementedDeviceRegistryServiceServer
// for forward compatibility.
//
// The Deviceregistry service definition.
type DeviceRegistryServiceServer interface {
	// Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
	CreateVariable(context.Context, *acquisition.CreateVariableRequest) (*wrapperspb.StringValue, error)
	// Retrieves a paginated list of variables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListVariables(context.Context, *common.ListSelector) (*acquisition.ListOfVariable, error)
	// Retrieves the details of the specified variable.
	GetVariable(context.Context, *wrapperspb.StringValue) (*acquisition.Variable, error)
	// Updates the details of an existing variable. Fields that are omitted from the request will be left unchanged.
	UpdateVariable(context.Context, *acquisition.Variable) (*emptypb.Empty, error)
	// Deletes the specified variable.
	DeleteVariable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// Adds a specified register to and existing variable.
	AddRegisterToVariable(context.Context, *acquisition.AddRegisterToVariableRequest) (*emptypb.Empty, error)
	// Removes a specified register from a variable.
	RemoveRegisterFromVariable(context.Context, *acquisition.RemoveRegisterFromVariableRequest) (*emptypb.Empty, error)
	// Creates a new device configuration register. Returns the identifier of the newly created register.
	CreateDeviceConfigurationRegister(context.Context, *acquisition.CreateDeviceConfigurationRegisterRequest) (*wrapperspb.StringValue, error)
	// Retrieves a paginated list of configuration registers based on the specified criteria. The page size and page number (zero-based) are defined in the request.
	ListDeviceConfigurationRegisters(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationRegister, error)
	// Retrieves the details of the specified device configuration register.
	GetDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationRegister, error)
	// Updates the details of an existing device configuration register. Fields that are omitted from the request will be left unchanged.
	UpdateDeviceConfigurationRegister(context.Context, *acquisition.DeviceConfigurationRegister) (*emptypb.Empty, error)
	// Deletes the specified device configuration register.
	DeleteDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	GetDeviceConfigurationRegisterMap(context.Context, *emptypb.Empty) (*acquisition.DeviceConfigurationRegisterMap, error)
	// Creates a new device configuration template. Returns the identifier of the newly created template.
	CreateDeviceConfigurationTemplate(context.Context, *acquisition.CreateDeviceConfigurationTemplateRequest) (*wrapperspb.StringValue, error)
	// Retrieves a paginated list of device configuration templates based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDeviceConfigurationTemplates(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationTemplate, error)
	// Retrieves the details of the specified device configuration template.
	GetDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationTemplate, error)
	// Updates the details of an existing device configuration template. Fields that are omitted from the request will be left unchanged.
	UpdateDeviceConfigurationTemplate(context.Context, *acquisition.DeviceConfigurationTemplate) (*emptypb.Empty, error)
	// Deletes the specified device configuration template.
	DeleteDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// Adds a specified device configuration register to an existing device configuration template.
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) (*emptypb.Empty, error)
	// Removes a specified device configuration register from a device configuration template.
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) (*emptypb.Empty, error)
	// Retrieves a paginated list of drivers based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDrivers(context.Context, *common.ListSelector) (*acquisition.ListOfDriver, error)
	// The method called by the Ouro Operator to set the driver templates. The parameter contains the driver templates.
	CreateDriver(context.Context, *acquisition.SetDriver) (*emptypb.Empty, error)
	// Retrieves the details of the specified driver.
	GetDriver(context.Context, *wrapperspb.StringValue) (*acquisition.Driver, error)
	// @group: Devices
	// @tag: communicationunit
	// Creates a new communication unit. Returns the identifier of the newly created register.
	CreateCommunicationUnit(context.Context, *acquisition.CreateCommunicationUnitRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationunit
	// Updates an exiting communication unit. Requires the full unit specification; partial updates are not supported.
	UpdateCommunicationUnit(context.Context, *acquisition.CommunicationUnit) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieve a paginated list of communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListCommunicationUnits(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the details of the specified communication unit.
	GetCommunicationUnit(context.Context, *wrapperspb.StringValue) (*acquisition.CommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// Deletes the specified communication unit.
	DeleteCommunicationUnit(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the network map (topology) reported by the data concentrator reports for the specified communication unit.
	GetCommunicationUnitNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves a paginated list of communication unit log records based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListCommunicationUnitLogRecords(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnitLogRecord, error)
	// @group: Devices
	// @tag: communicationbus
	// Creates a new communication bus. Returns the identifier of the newly created communication bus.
	CreateCommunicationBus(context.Context, *acquisition.CreateCommunicationBusRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationbus
	// Retrieves a paginated list of communication buses. The page size and page number (zero-based) can be defined in the request.
	ListCommunicationBuses(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationBus, error)
	// @group: Devices
	// @tag: communicationbus
	// Deletes the specified communication bus.
	DeleteCommunicationBus(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	// Adds a specified communication unit to an existing communication bus.
	AddCommunicationUnitsToCommunicationBus(context.Context, *acquisition.AddCommunicationUnitsToCommunicationBusRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	// Removes a specified communication bus from an existing communication bus.
	RemoveCommunicationUnitsFromCommunicationBus(context.Context, *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// Creates a new device. Returns the identifier of the newly created device.
	CreateDevice(context.Context, *acquisition.CreateDeviceRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: device
	// Updates the details of an existing device. Fields that are omitted from the request will be left unchanged.
	UpdateDevice(context.Context, *acquisition.Device) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// Retrieves a paginated list of devices based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDevices(context.Context, *common.ListSelector) (*acquisition.ListOfDevice, error)
	// @group: Devices
	// @tag: device
	// Retrieves the details of the specified device.
	GetDevice(context.Context, *wrapperspb.StringValue) (*acquisition.Device, error)
	// @group: Devices
	// @tag: device
	// Deletes the specified device.
	DeleteDevice(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	StreamDeviceType(grpc.BidiStreamingServer[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse]) error
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *acquisition.SetDeviceCommunicationUnitsRequest) (*emptypb.Empty, error)
	// Retrieves a list of communication units linked to the specified device.
	GetDeviceCommunicationUnits(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceCommunicationUnit, error)
	// @group: Devices
	// @tag: device
	// Retrieves a paginated list of changes to device communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDeviceCommunicationUnitChanges(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceCommunicationUnitChange, error)
	// The method called by the DataProxy to resolve connection info for given device(s).
	GetDeviceConnectionInfo(context.Context, *structpb.ListValue) (*acquisition.MapDeviceConnectionInfo, error)
	// Sets the device information.
	SetDeviceInfo(context.Context, *acquisition.SetDeviceInfoRequest) (*emptypb.Empty, error)
	// @group: Devices
	// Retrieves the profile-typed info of the specified device.
	GetDeviceInfo(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceInfo, error)
	// @group: Devices
	// @tag: device
	// Retrieves a list of device groups that contain the specified device.
	GetDeviceDeviceGroups(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceGroup, error)
	// @group: Devices
	// @tag: device
	// Retrieves the network map (topology) reported by the data concentrator reports for the specified  device.
	GetDeviceNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error)
	// Creates a new device group. Returns the identifier of the newly created device group.
	CreateDeviceGroup(context.Context, *acquisition.CreateDeviceGroupRequest) (*wrapperspb.StringValue, error)
	// Updates the details of an existing device group. Fields that are omitted from the request will be left unchanged.
	UpdateDeviceGroup(context.Context, *acquisition.DeviceGroup) (*emptypb.Empty, error)
	// Retrieves a paginated list of devices groups based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListDeviceGroups(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceGroup, error)
	// @param The device group identifier.
	// @return The device group specification.
	// Retrieves the details of the specified device group.
	GetDeviceGroup(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceGroup, error)
	// @group: Devices
	// @tag: devicegroup
	// Deletes the specified device group.
	DeleteDeviceGroup(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// The method returns stream of devices from the device group.
	// @param The device group identifier.
	StreamDeviceGroup(*wrapperspb.StringValue, grpc.ServerStreamingServer[acquisition.StreamDeviceGroup]) error
	// Adds the specified devices to an existing device group.
	AddDevicesToGroup(context.Context, *acquisition.AddDevicesToGroupRequest) (*emptypb.Empty, error)
	// Removes the specified devices from an existing device group.
	RemoveDevicesFromGroup(context.Context, *acquisition.RemoveDevicesFromGroupRequest) (*emptypb.Empty, error)
	// Retrieves a paginated list of devices in the specified device group. The page size and page number (zero-based) can be defined in the request.
	ListDeviceGroupDevices(context.Context, *acquisition.ListDeviceGroupDevicesRequest) (*acquisition.ListOfDevice, error)
	// Retrieves a paginated list of modem pools. The page size and page number (zero-based) can be defined in the request.
	ListModemPools(context.Context, *common.ListSelector) (*acquisition.ListOfModemPool, error)
	// Retrieves the details of the specified modem pool.
	GetModemPool(context.Context, *wrapperspb.StringValue) (*acquisition.ModemPool, error)
	// Creates a new modem pool. Returns the identifier of the newly created modem pool.
	CreateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*wrapperspb.StringValue, error)
	// Updates the details of an existing modem pool. Fields that are omitted from the request will be left unchanged.
	UpdateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*emptypb.Empty, error)
	// Deletes the specified modem pool.
	DeleteModemPool(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// Creates a new modem within an existing modem pool. Returns the identifier of the newly created modem.
	CreateModem(context.Context, *acquisition.SetModemRequest) (*wrapperspb.StringValue, error)
	// Updates the details of an existing modem within the specified modem pool.
	UpdateModem(context.Context, *acquisition.SetModemRequest) (*emptypb.Empty, error)
	// Deletes th specified modem.
	DeleteModem(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Time-Of-Use Tables
	// Creates a new time-of-use table. Returns the identifier of the newly created table.
	CreateTimeOfUseTable(context.Context, *acquisition.CreateTimeOfUseTableRequest) (*wrapperspb.StringValue, error)
	// @group: Time-Of-Use Tables
	// Retrieves a paginated list of time-of-use tables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
	ListTimeOfUseTables(context.Context, *common.ListSelector) (*acquisition.ListOfTimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// Retrieves the details of the spcified time-of-use table.
	GetTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*acquisition.TimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// Updates the details of an existing time-of-use table.
	UpdateTimeOfUseTable(context.Context, *acquisition.TimeOfUseTable) (*emptypb.Empty, error)
	// @group: Time-Of-Use Tables
	// Deletes the specified time-of-use table.
	DeleteTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Fields
	// Creates a new field descriptor. Returns the identifier of the newly created field descriptor.
	CreateFieldDescriptor(context.Context, *common.CreateFieldDescriptorRequest) (*wrapperspb.StringValue, error)
	// @group: Fields
	// Updates the details of an existing field descriptor. Fields that are omitted from the request will be left unchanged.
	UpdateFieldDescriptor(context.Context, *common.FieldDescriptor) (*emptypb.Empty, error)
	// @group: Fields
	// Deletes the specified field descriptor.
	DeleteFieldDescriptor(context.Context, *common.FieldDescriptorSelector) (*emptypb.Empty, error)
	// @group: Metadata
	// The method to set the managed fields of the resource(s).
	SetManagedFields(context.Context, *common.SetManagedFieldsRequest) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: device
	// The method returns the list of x-device-identifiers that match the given device-type specific key.
	// The key can be any byte-array like unique physical identifier of the device (e.g. serial number, MAC address, etc.) which must be unique for give driver type.
	// If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
	GetMapDeviceKeyXId(context.Context, *common.ListOfDeviceKey) (*common.MapDeviceKeyXId, error)
	// @group: Internal
	// @tag: communicationunit
	// Adds a new log records to the communication unit. Duplicit records are ignored.
	AddCommunicationUnitLogs(context.Context, *acquisition.AddCommunicationUnitLogsRequest) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: communicationunit
	// The method sets currently known unknown devices visible by the communication unit.
	SetUnknownDevices(context.Context, *acquisition.SetUnknownDevicesRequest) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: communicationunit
	// The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
	// If there were other neighbours not listed within the request, they are removed from the neighbours list.
	SetNeightbours(context.Context, *acquisition.SetNeighboursRequest) (*emptypb.Empty, error)
	// @group: Internal
	// @tag: device
	// The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
	// The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
	// The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
	SetCurrentDeviceCommunicationUnit(context.Context, *acquisition.SetCurrentDeviceCommunicationUnitInternalRequest) (*emptypb.Empty, error)
	// @group: Metadata
	// Updates the fields of the specified object. Field values provided in the request are merged with existing fields, preserving any fields not included in the update.
	UpdateObjectFields(context.Context, *common.UpdateObjectFieldsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDeviceRegistryServiceServer()
}

// UnimplementedDeviceRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceRegistryServiceServer struct{}

func (UnimplementedDeviceRegistryServiceServer) CreateVariable(context.Context, *acquisition.CreateVariableRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListVariables(context.Context, *common.ListSelector) (*acquisition.ListOfVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetVariable(context.Context, *wrapperspb.StringValue) (*acquisition.Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateVariable(context.Context, *acquisition.Variable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteVariable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) AddRegisterToVariable(context.Context, *acquisition.AddRegisterToVariableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegisterToVariable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) RemoveRegisterFromVariable(context.Context, *acquisition.RemoveRegisterFromVariableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRegisterFromVariable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDeviceConfigurationRegister(context.Context, *acquisition.CreateDeviceConfigurationRegisterRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceConfigurationRegister not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDeviceConfigurationRegisters(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConfigurationRegisters not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigurationRegister not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateDeviceConfigurationRegister(context.Context, *acquisition.DeviceConfigurationRegister) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfigurationRegister not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceConfigurationRegister not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceConfigurationRegisterMap(context.Context, *emptypb.Empty) (*acquisition.DeviceConfigurationRegisterMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigurationRegisterMap not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDeviceConfigurationTemplate(context.Context, *acquisition.CreateDeviceConfigurationTemplateRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceConfigurationTemplate not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDeviceConfigurationTemplates(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConfigurationTemplates not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigurationTemplate not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateDeviceConfigurationTemplate(context.Context, *acquisition.DeviceConfigurationTemplate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfigurationTemplate not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceConfigurationTemplate not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceConfigurationRegisterToDeviceConfigurationTemplate not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDrivers(context.Context, *common.ListSelector) (*acquisition.ListOfDriver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrivers not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDriver(context.Context, *acquisition.SetDriver) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDriver not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDriver(context.Context, *wrapperspb.StringValue) (*acquisition.Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriver not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateCommunicationUnit(context.Context, *acquisition.CreateCommunicationUnitRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateCommunicationUnit(context.Context, *acquisition.CommunicationUnit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListCommunicationUnits(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationUnits not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetCommunicationUnit(context.Context, *wrapperspb.StringValue) (*acquisition.CommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteCommunicationUnit(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetCommunicationUnitNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunicationUnitNetworkMap not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListCommunicationUnitLogRecords(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnitLogRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationUnitLogRecords not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateCommunicationBus(context.Context, *acquisition.CreateCommunicationBusRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunicationBus not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListCommunicationBuses(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationBus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationBuses not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteCommunicationBus(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunicationBus not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) AddCommunicationUnitsToCommunicationBus(context.Context, *acquisition.AddCommunicationUnitsToCommunicationBusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunicationUnitsToCommunicationBus not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) RemoveCommunicationUnitsFromCommunicationBus(context.Context, *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCommunicationUnitsFromCommunicationBus not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDevice(context.Context, *acquisition.CreateDeviceRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateDevice(context.Context, *acquisition.Device) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDevices(context.Context, *common.ListSelector) (*acquisition.ListOfDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDevice(context.Context, *wrapperspb.StringValue) (*acquisition.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteDevice(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) StreamDeviceType(grpc.BidiStreamingServer[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceType not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetDeviceCommunicationUnits(context.Context, *acquisition.SetDeviceCommunicationUnitsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceCommunicationUnits not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceCommunicationUnits(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceCommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCommunicationUnits not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDeviceCommunicationUnitChanges(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceCommunicationUnitChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceCommunicationUnitChanges not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceConnectionInfo(context.Context, *structpb.ListValue) (*acquisition.MapDeviceConnectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConnectionInfo not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetDeviceInfo(context.Context, *acquisition.SetDeviceInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceInfo not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceInfo(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceDeviceGroups(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDeviceGroups not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceNetworkMap not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateDeviceGroup(context.Context, *acquisition.CreateDeviceGroupRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateDeviceGroup(context.Context, *acquisition.DeviceGroup) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDeviceGroups(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceGroups not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetDeviceGroup(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteDeviceGroup(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) StreamDeviceGroup(*wrapperspb.StringValue, grpc.ServerStreamingServer[acquisition.StreamDeviceGroup]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDeviceGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) AddDevicesToGroup(context.Context, *acquisition.AddDevicesToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevicesToGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) RemoveDevicesFromGroup(context.Context, *acquisition.RemoveDevicesFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDevicesFromGroup not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListDeviceGroupDevices(context.Context, *acquisition.ListDeviceGroupDevicesRequest) (*acquisition.ListOfDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceGroupDevices not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListModemPools(context.Context, *common.ListSelector) (*acquisition.ListOfModemPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModemPools not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetModemPool(context.Context, *wrapperspb.StringValue) (*acquisition.ModemPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteModemPool(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModemPool not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateModem(context.Context, *acquisition.SetModemRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModem not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateModem(context.Context, *acquisition.SetModemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModem not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteModem(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModem not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateTimeOfUseTable(context.Context, *acquisition.CreateTimeOfUseTableRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeOfUseTable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) ListTimeOfUseTables(context.Context, *common.ListSelector) (*acquisition.ListOfTimeOfUseTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeOfUseTables not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*acquisition.TimeOfUseTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeOfUseTable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateTimeOfUseTable(context.Context, *acquisition.TimeOfUseTable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeOfUseTable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimeOfUseTable not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) CreateFieldDescriptor(context.Context, *common.CreateFieldDescriptorRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFieldDescriptor not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateFieldDescriptor(context.Context, *common.FieldDescriptor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFieldDescriptor not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) DeleteFieldDescriptor(context.Context, *common.FieldDescriptorSelector) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFieldDescriptor not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetManagedFields(context.Context, *common.SetManagedFieldsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManagedFields not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) GetMapDeviceKeyXId(context.Context, *common.ListOfDeviceKey) (*common.MapDeviceKeyXId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapDeviceKeyXId not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) AddCommunicationUnitLogs(context.Context, *acquisition.AddCommunicationUnitLogsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunicationUnitLogs not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetUnknownDevices(context.Context, *acquisition.SetUnknownDevicesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUnknownDevices not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetNeightbours(context.Context, *acquisition.SetNeighboursRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNeightbours not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) SetCurrentDeviceCommunicationUnit(context.Context, *acquisition.SetCurrentDeviceCommunicationUnitInternalRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentDeviceCommunicationUnit not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) UpdateObjectFields(context.Context, *common.UpdateObjectFieldsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectFields not implemented")
}
func (UnimplementedDeviceRegistryServiceServer) mustEmbedUnimplementedDeviceRegistryServiceServer() {}
func (UnimplementedDeviceRegistryServiceServer) testEmbeddedByValue()                               {}

// UnsafeDeviceRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceRegistryServiceServer will
// result in compilation errors.
type UnsafeDeviceRegistryServiceServer interface {
	mustEmbedUnimplementedDeviceRegistryServiceServer()
}

func RegisterDeviceRegistryServiceServer(s grpc.ServiceRegistrar, srv DeviceRegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceRegistryService_ServiceDesc, srv)
}

func _DeviceRegistryService_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateVariable(ctx, req.(*acquisition.CreateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListVariables(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetVariable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateVariable(ctx, req.(*acquisition.Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteVariable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_AddRegisterToVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddRegisterToVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).AddRegisterToVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_AddRegisterToVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).AddRegisterToVariable(ctx, req.(*acquisition.AddRegisterToVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_RemoveRegisterFromVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveRegisterFromVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).RemoveRegisterFromVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_RemoveRegisterFromVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).RemoveRegisterFromVariable(ctx, req.(*acquisition.RemoveRegisterFromVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceConfigurationRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDeviceConfigurationRegister(ctx, req.(*acquisition.CreateDeviceConfigurationRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDeviceConfigurationRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDeviceConfigurationRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDeviceConfigurationRegisters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDeviceConfigurationRegisters(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceConfigurationRegister(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.DeviceConfigurationRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateDeviceConfigurationRegister(ctx, req.(*acquisition.DeviceConfigurationRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteDeviceConfigurationRegister(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceConfigurationRegisterMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceConfigurationRegisterMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceConfigurationRegisterMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceConfigurationRegisterMap(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceConfigurationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDeviceConfigurationTemplate(ctx, req.(*acquisition.CreateDeviceConfigurationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDeviceConfigurationTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDeviceConfigurationTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDeviceConfigurationTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDeviceConfigurationTemplates(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceConfigurationTemplate(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.DeviceConfigurationTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateDeviceConfigurationTemplate(ctx, req.(*acquisition.DeviceConfigurationTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteDeviceConfigurationTemplate(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx, req.(*acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx, req.(*acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDrivers(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetDriver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDriver(ctx, req.(*acquisition.SetDriver))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDriver(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateCommunicationUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateCommunicationUnit(ctx, req.(*acquisition.CreateCommunicationUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CommunicationUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateCommunicationUnit(ctx, req.(*acquisition.CommunicationUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListCommunicationUnits(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetCommunicationUnit(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteCommunicationUnit(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetCommunicationUnitNetworkMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetCommunicationUnitNetworkMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetCommunicationUnitNetworkMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetCommunicationUnitNetworkMap(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListCommunicationUnitLogRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListCommunicationUnitLogRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListCommunicationUnitLogRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListCommunicationUnitLogRecords(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateCommunicationBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateCommunicationBus(ctx, req.(*acquisition.CreateCommunicationBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListCommunicationBuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListCommunicationBuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListCommunicationBuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListCommunicationBuses(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteCommunicationBus(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_AddCommunicationUnitsToCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddCommunicationUnitsToCommunicationBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).AddCommunicationUnitsToCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_AddCommunicationUnitsToCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).AddCommunicationUnitsToCommunicationBus(ctx, req.(*acquisition.AddCommunicationUnitsToCommunicationBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_RemoveCommunicationUnitsFromCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).RemoveCommunicationUnitsFromCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_RemoveCommunicationUnitsFromCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).RemoveCommunicationUnitsFromCommunicationBus(ctx, req.(*acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDevice(ctx, req.(*acquisition.CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateDevice(ctx, req.(*acquisition.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDevices(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDevice(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteDevice(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_StreamDeviceType_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceRegistryServiceServer).StreamDeviceType(&grpc.GenericServerStream[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceRegistryService_StreamDeviceTypeServer = grpc.BidiStreamingServer[acquisition.StreamDevicesDriverTypesRequest, acquisition.StreamDevicesDriverTypesResponse]

func _DeviceRegistryService_SetDeviceCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetDeviceCommunicationUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetDeviceCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetDeviceCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetDeviceCommunicationUnits(ctx, req.(*acquisition.SetDeviceCommunicationUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceCommunicationUnits(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDeviceCommunicationUnitChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDeviceCommunicationUnitChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDeviceCommunicationUnitChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDeviceCommunicationUnitChanges(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceConnectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceConnectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceConnectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceConnectionInfo(ctx, req.(*structpb.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_SetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetDeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetDeviceInfo(ctx, req.(*acquisition.SetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceInfo(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceDeviceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceDeviceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceDeviceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceDeviceGroups(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceNetworkMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceNetworkMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceNetworkMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceNetworkMap(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateDeviceGroup(ctx, req.(*acquisition.CreateDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.DeviceGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateDeviceGroup(ctx, req.(*acquisition.DeviceGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDeviceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDeviceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDeviceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDeviceGroups(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetDeviceGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteDeviceGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_StreamDeviceGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceRegistryServiceServer).StreamDeviceGroup(m, &grpc.GenericServerStream[wrapperspb.StringValue, acquisition.StreamDeviceGroup]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DeviceRegistryService_StreamDeviceGroupServer = grpc.ServerStreamingServer[acquisition.StreamDeviceGroup]

func _DeviceRegistryService_AddDevicesToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddDevicesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).AddDevicesToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_AddDevicesToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).AddDevicesToGroup(ctx, req.(*acquisition.AddDevicesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_RemoveDevicesFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveDevicesFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).RemoveDevicesFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_RemoveDevicesFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).RemoveDevicesFromGroup(ctx, req.(*acquisition.RemoveDevicesFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListDeviceGroupDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.ListDeviceGroupDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListDeviceGroupDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListDeviceGroupDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListDeviceGroupDevices(ctx, req.(*acquisition.ListDeviceGroupDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListModemPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListModemPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListModemPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListModemPools(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetModemPool(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateModemPool(ctx, req.(*acquisition.SetModemPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateModemPool(ctx, req.(*acquisition.SetModemPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteModemPool(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateModem(ctx, req.(*acquisition.SetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateModem(ctx, req.(*acquisition.SetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteModem(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateTimeOfUseTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateTimeOfUseTable(ctx, req.(*acquisition.CreateTimeOfUseTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_ListTimeOfUseTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).ListTimeOfUseTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_ListTimeOfUseTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).ListTimeOfUseTables(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetTimeOfUseTable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.TimeOfUseTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateTimeOfUseTable(ctx, req.(*acquisition.TimeOfUseTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteTimeOfUseTable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_CreateFieldDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CreateFieldDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).CreateFieldDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_CreateFieldDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).CreateFieldDescriptor(ctx, req.(*common.CreateFieldDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateFieldDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FieldDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateFieldDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateFieldDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateFieldDescriptor(ctx, req.(*common.FieldDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_DeleteFieldDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FieldDescriptorSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).DeleteFieldDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_DeleteFieldDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).DeleteFieldDescriptor(ctx, req.(*common.FieldDescriptorSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_SetManagedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SetManagedFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetManagedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetManagedFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetManagedFields(ctx, req.(*common.SetManagedFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_GetMapDeviceKeyXId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListOfDeviceKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).GetMapDeviceKeyXId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_GetMapDeviceKeyXId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).GetMapDeviceKeyXId(ctx, req.(*common.ListOfDeviceKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_AddCommunicationUnitLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddCommunicationUnitLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).AddCommunicationUnitLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_AddCommunicationUnitLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).AddCommunicationUnitLogs(ctx, req.(*acquisition.AddCommunicationUnitLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_SetUnknownDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetUnknownDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetUnknownDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetUnknownDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetUnknownDevices(ctx, req.(*acquisition.SetUnknownDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_SetNeightbours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetNeighboursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetNeightbours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetNeightbours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetNeightbours(ctx, req.(*acquisition.SetNeighboursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_SetCurrentDeviceCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetCurrentDeviceCommunicationUnitInternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).SetCurrentDeviceCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_SetCurrentDeviceCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).SetCurrentDeviceCommunicationUnit(ctx, req.(*acquisition.SetCurrentDeviceCommunicationUnitInternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRegistryService_UpdateObjectFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateObjectFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRegistryServiceServer).UpdateObjectFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceRegistryService_UpdateObjectFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRegistryServiceServer).UpdateObjectFields(ctx, req.(*common.UpdateObjectFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceRegistryService_ServiceDesc is the grpc.ServiceDesc for DeviceRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.services.svcdeviceregistry.DeviceRegistryService",
	HandlerType: (*DeviceRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVariable",
			Handler:    _DeviceRegistryService_CreateVariable_Handler,
		},
		{
			MethodName: "ListVariables",
			Handler:    _DeviceRegistryService_ListVariables_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _DeviceRegistryService_GetVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _DeviceRegistryService_UpdateVariable_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _DeviceRegistryService_DeleteVariable_Handler,
		},
		{
			MethodName: "AddRegisterToVariable",
			Handler:    _DeviceRegistryService_AddRegisterToVariable_Handler,
		},
		{
			MethodName: "RemoveRegisterFromVariable",
			Handler:    _DeviceRegistryService_RemoveRegisterFromVariable_Handler,
		},
		{
			MethodName: "CreateDeviceConfigurationRegister",
			Handler:    _DeviceRegistryService_CreateDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "ListDeviceConfigurationRegisters",
			Handler:    _DeviceRegistryService_ListDeviceConfigurationRegisters_Handler,
		},
		{
			MethodName: "GetDeviceConfigurationRegister",
			Handler:    _DeviceRegistryService_GetDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "UpdateDeviceConfigurationRegister",
			Handler:    _DeviceRegistryService_UpdateDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "DeleteDeviceConfigurationRegister",
			Handler:    _DeviceRegistryService_DeleteDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "GetDeviceConfigurationRegisterMap",
			Handler:    _DeviceRegistryService_GetDeviceConfigurationRegisterMap_Handler,
		},
		{
			MethodName: "CreateDeviceConfigurationTemplate",
			Handler:    _DeviceRegistryService_CreateDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "ListDeviceConfigurationTemplates",
			Handler:    _DeviceRegistryService_ListDeviceConfigurationTemplates_Handler,
		},
		{
			MethodName: "GetDeviceConfigurationTemplate",
			Handler:    _DeviceRegistryService_GetDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "UpdateDeviceConfigurationTemplate",
			Handler:    _DeviceRegistryService_UpdateDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "DeleteDeviceConfigurationTemplate",
			Handler:    _DeviceRegistryService_DeleteDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "AddDeviceConfigurationRegisterToDeviceConfigurationTemplate",
			Handler:    _DeviceRegistryService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate",
			Handler:    _DeviceRegistryService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "ListDrivers",
			Handler:    _DeviceRegistryService_ListDrivers_Handler,
		},
		{
			MethodName: "CreateDriver",
			Handler:    _DeviceRegistryService_CreateDriver_Handler,
		},
		{
			MethodName: "GetDriver",
			Handler:    _DeviceRegistryService_GetDriver_Handler,
		},
		{
			MethodName: "CreateCommunicationUnit",
			Handler:    _DeviceRegistryService_CreateCommunicationUnit_Handler,
		},
		{
			MethodName: "UpdateCommunicationUnit",
			Handler:    _DeviceRegistryService_UpdateCommunicationUnit_Handler,
		},
		{
			MethodName: "ListCommunicationUnits",
			Handler:    _DeviceRegistryService_ListCommunicationUnits_Handler,
		},
		{
			MethodName: "GetCommunicationUnit",
			Handler:    _DeviceRegistryService_GetCommunicationUnit_Handler,
		},
		{
			MethodName: "DeleteCommunicationUnit",
			Handler:    _DeviceRegistryService_DeleteCommunicationUnit_Handler,
		},
		{
			MethodName: "GetCommunicationUnitNetworkMap",
			Handler:    _DeviceRegistryService_GetCommunicationUnitNetworkMap_Handler,
		},
		{
			MethodName: "ListCommunicationUnitLogRecords",
			Handler:    _DeviceRegistryService_ListCommunicationUnitLogRecords_Handler,
		},
		{
			MethodName: "CreateCommunicationBus",
			Handler:    _DeviceRegistryService_CreateCommunicationBus_Handler,
		},
		{
			MethodName: "ListCommunicationBuses",
			Handler:    _DeviceRegistryService_ListCommunicationBuses_Handler,
		},
		{
			MethodName: "DeleteCommunicationBus",
			Handler:    _DeviceRegistryService_DeleteCommunicationBus_Handler,
		},
		{
			MethodName: "AddCommunicationUnitsToCommunicationBus",
			Handler:    _DeviceRegistryService_AddCommunicationUnitsToCommunicationBus_Handler,
		},
		{
			MethodName: "RemoveCommunicationUnitsFromCommunicationBus",
			Handler:    _DeviceRegistryService_RemoveCommunicationUnitsFromCommunicationBus_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceRegistryService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceRegistryService_UpdateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DeviceRegistryService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceRegistryService_GetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceRegistryService_DeleteDevice_Handler,
		},
		{
			MethodName: "SetDeviceCommunicationUnits",
			Handler:    _DeviceRegistryService_SetDeviceCommunicationUnits_Handler,
		},
		{
			MethodName: "GetDeviceCommunicationUnits",
			Handler:    _DeviceRegistryService_GetDeviceCommunicationUnits_Handler,
		},
		{
			MethodName: "ListDeviceCommunicationUnitChanges",
			Handler:    _DeviceRegistryService_ListDeviceCommunicationUnitChanges_Handler,
		},
		{
			MethodName: "GetDeviceConnectionInfo",
			Handler:    _DeviceRegistryService_GetDeviceConnectionInfo_Handler,
		},
		{
			MethodName: "SetDeviceInfo",
			Handler:    _DeviceRegistryService_SetDeviceInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _DeviceRegistryService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "GetDeviceDeviceGroups",
			Handler:    _DeviceRegistryService_GetDeviceDeviceGroups_Handler,
		},
		{
			MethodName: "GetDeviceNetworkMap",
			Handler:    _DeviceRegistryService_GetDeviceNetworkMap_Handler,
		},
		{
			MethodName: "CreateDeviceGroup",
			Handler:    _DeviceRegistryService_CreateDeviceGroup_Handler,
		},
		{
			MethodName: "UpdateDeviceGroup",
			Handler:    _DeviceRegistryService_UpdateDeviceGroup_Handler,
		},
		{
			MethodName: "ListDeviceGroups",
			Handler:    _DeviceRegistryService_ListDeviceGroups_Handler,
		},
		{
			MethodName: "GetDeviceGroup",
			Handler:    _DeviceRegistryService_GetDeviceGroup_Handler,
		},
		{
			MethodName: "DeleteDeviceGroup",
			Handler:    _DeviceRegistryService_DeleteDeviceGroup_Handler,
		},
		{
			MethodName: "AddDevicesToGroup",
			Handler:    _DeviceRegistryService_AddDevicesToGroup_Handler,
		},
		{
			MethodName: "RemoveDevicesFromGroup",
			Handler:    _DeviceRegistryService_RemoveDevicesFromGroup_Handler,
		},
		{
			MethodName: "ListDeviceGroupDevices",
			Handler:    _DeviceRegistryService_ListDeviceGroupDevices_Handler,
		},
		{
			MethodName: "ListModemPools",
			Handler:    _DeviceRegistryService_ListModemPools_Handler,
		},
		{
			MethodName: "GetModemPool",
			Handler:    _DeviceRegistryService_GetModemPool_Handler,
		},
		{
			MethodName: "CreateModemPool",
			Handler:    _DeviceRegistryService_CreateModemPool_Handler,
		},
		{
			MethodName: "UpdateModemPool",
			Handler:    _DeviceRegistryService_UpdateModemPool_Handler,
		},
		{
			MethodName: "DeleteModemPool",
			Handler:    _DeviceRegistryService_DeleteModemPool_Handler,
		},
		{
			MethodName: "CreateModem",
			Handler:    _DeviceRegistryService_CreateModem_Handler,
		},
		{
			MethodName: "UpdateModem",
			Handler:    _DeviceRegistryService_UpdateModem_Handler,
		},
		{
			MethodName: "DeleteModem",
			Handler:    _DeviceRegistryService_DeleteModem_Handler,
		},
		{
			MethodName: "CreateTimeOfUseTable",
			Handler:    _DeviceRegistryService_CreateTimeOfUseTable_Handler,
		},
		{
			MethodName: "ListTimeOfUseTables",
			Handler:    _DeviceRegistryService_ListTimeOfUseTables_Handler,
		},
		{
			MethodName: "GetTimeOfUseTable",
			Handler:    _DeviceRegistryService_GetTimeOfUseTable_Handler,
		},
		{
			MethodName: "UpdateTimeOfUseTable",
			Handler:    _DeviceRegistryService_UpdateTimeOfUseTable_Handler,
		},
		{
			MethodName: "DeleteTimeOfUseTable",
			Handler:    _DeviceRegistryService_DeleteTimeOfUseTable_Handler,
		},
		{
			MethodName: "CreateFieldDescriptor",
			Handler:    _DeviceRegistryService_CreateFieldDescriptor_Handler,
		},
		{
			MethodName: "UpdateFieldDescriptor",
			Handler:    _DeviceRegistryService_UpdateFieldDescriptor_Handler,
		},
		{
			MethodName: "DeleteFieldDescriptor",
			Handler:    _DeviceRegistryService_DeleteFieldDescriptor_Handler,
		},
		{
			MethodName: "SetManagedFields",
			Handler:    _DeviceRegistryService_SetManagedFields_Handler,
		},
		{
			MethodName: "GetMapDeviceKeyXId",
			Handler:    _DeviceRegistryService_GetMapDeviceKeyXId_Handler,
		},
		{
			MethodName: "AddCommunicationUnitLogs",
			Handler:    _DeviceRegistryService_AddCommunicationUnitLogs_Handler,
		},
		{
			MethodName: "SetUnknownDevices",
			Handler:    _DeviceRegistryService_SetUnknownDevices_Handler,
		},
		{
			MethodName: "SetNeightbours",
			Handler:    _DeviceRegistryService_SetNeightbours_Handler,
		},
		{
			MethodName: "SetCurrentDeviceCommunicationUnit",
			Handler:    _DeviceRegistryService_SetCurrentDeviceCommunicationUnit_Handler,
		},
		{
			MethodName: "UpdateObjectFields",
			Handler:    _DeviceRegistryService_UpdateObjectFields_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDeviceType",
			Handler:       _DeviceRegistryService_StreamDeviceType_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamDeviceGroup",
			Handler:       _DeviceRegistryService_StreamDeviceGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/svcdeviceregistry/deviceregistry.proto",
}
