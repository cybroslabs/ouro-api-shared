// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/svctaskmaster/taskmaster.proto

package svctaskmaster

import (
	context "context"
	acquisition "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition"
	common "github.com/cybroslabs/ouro-api-shared/gen/go/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskmasterService_QueueJobs_FullMethodName                          = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/QueueJobs"
	TaskmasterService_GetJob_FullMethodName                             = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/GetJob"
	TaskmasterService_CancelJobs_FullMethodName                         = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/CancelJobs"
	TaskmasterService_SetDriver_FullMethodName                          = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetDriver"
	TaskmasterService_SetCache_FullMethodName                           = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetCache"
	TaskmasterService_GetCache_FullMethodName                           = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/GetCache"
	TaskmasterService_SetDriverConfigDefaults_FullMethodName            = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetDriverConfigDefaults"
	TaskmasterService_GetDriverConfig_FullMethodName                    = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/GetDriverConfig"
	TaskmasterService_SetManagedFields_FullMethodName                   = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetManagedFields"
	TaskmasterService_GetMapDeviceKeyXId_FullMethodName                 = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/GetMapDeviceKeyXId"
	TaskmasterService_AddCommunicationUnitLogs_FullMethodName           = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/AddCommunicationUnitLogs"
	TaskmasterService_SetUnknownDevices_FullMethodName                  = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetUnknownDevices"
	TaskmasterService_ListDevicesByAttributes_FullMethodName            = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/ListDevicesByAttributes"
	TaskmasterService_ListCommunicationUnitsByAttributes_FullMethodName = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/ListCommunicationUnitsByAttributes"
	TaskmasterService_SetNeightbours_FullMethodName                     = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetNeightbours"
	TaskmasterService_SetCurrentDeviceCommunicationUnit_FullMethodName  = "/io.clbs.openhes.services.svctaskmaster.TaskmasterService/SetCurrentDeviceCommunicationUnit"
)

// TaskmasterServiceClient is the client API for TaskmasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Taskmaster service definition.
// Those are the gRPC services that the Taskmaster provides for other components.
type TaskmasterServiceClient interface {
	QueueJobs(ctx context.Context, in *acquisition.QueueJobsRequest, opts ...grpc.CallOption) (*acquisition.QueueJobsResponse, error)
	// The method called by the RestApi to get the job status. The parameter contains the job identifier.
	GetJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.GetJobResponse, error)
	// The method called by the RestApi to cancel the job.
	CancelJobs(ctx context.Context, in *common.ListOfUInt64, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method called by the driver to inform Taskmaster about the instance existence. The parameter contains the driver version, the listening port, the meter type, the maximum number of concurrent jobs, the typical memory usage, the connection attributes template, and the job action templates.
	SetDriver(ctx context.Context, in *acquisition.SetDriver, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method called by the driver to store the cache entry. The parameter contains the cache key and the cache value. The key is unique within the driver type.
	SetCache(ctx context.Context, in *acquisition.SetCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method called by the driver to retrieve the cache entry. The parameter contains the cache key. The key is unique within the driver type.
	GetCache(ctx context.Context, in *acquisition.GetCacheRequest, opts ...grpc.CallOption) (*acquisition.GetCacheResponse, error)
	// @group: Drivers
	// SetDriverConfigDefaults sets the default configuration values for the driver type. It also resets the configuration caches.
	SetDriverConfigDefaults(ctx context.Context, in *acquisition.SetConfigDefaultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// GetDriverConfig returns the driver configuration for the given driver type.
	// The parameter contains the driver type.
	GetDriverConfig(ctx context.Context, in *acquisition.GetDriverConfigRequest, opts ...grpc.CallOption) (*common.FieldValues, error)
	// @group: Drivers
	// The method sets the managed fields for entities.
	SetManagedFields(ctx context.Context, in *common.SetManagedFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method returns the list of x-device-identifiers that match the given device-type specific key.
	// The key can be any byte-array like unique physical identifier of the device (e.g. system-title, MAC address, etc.) which must be unique for give driver type.
	// If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
	GetMapDeviceKeyXId(ctx context.Context, in *common.ListOfDeviceKey, opts ...grpc.CallOption) (*common.MapDeviceKeyXId, error)
	// @group: Drivers
	// Adds a new log records to the communication unit. Duplicit records are ignored.
	AddCommunicationUnitLogs(ctx context.Context, in *acquisition.AddCommunicationUnitLogsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method sets currently known unknown devices visible by the communication unit.
	SetUnknownDevices(ctx context.Context, in *acquisition.SetUnknownDevicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method returns the list of device identifiers that match the given attributes.
	ListDevicesByAttributes(ctx context.Context, in *acquisition.DeviceAttributeSelector, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error)
	// @group: Drivers
	// The method returns the list of communication unit identifiers that match the given attributes.
	ListCommunicationUnitsByAttributes(ctx context.Context, in *acquisition.CommunicationUnitAttributeSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnit, error)
	// @group: Drivers
	// The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
	// If there were other neighbours not listed within the request, they are removed from the neighbours list.
	SetNeightbours(ctx context.Context, in *acquisition.SetNeighboursRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Drivers
	// The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
	// The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
	// The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
	SetCurrentDeviceCommunicationUnit(ctx context.Context, in *acquisition.SetCurrentDeviceCommunicationUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskmasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskmasterServiceClient(cc grpc.ClientConnInterface) TaskmasterServiceClient {
	return &taskmasterServiceClient{cc}
}

func (c *taskmasterServiceClient) QueueJobs(ctx context.Context, in *acquisition.QueueJobsRequest, opts ...grpc.CallOption) (*acquisition.QueueJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.QueueJobsResponse)
	err := c.cc.Invoke(ctx, TaskmasterService_QueueJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) GetJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.GetJobResponse)
	err := c.cc.Invoke(ctx, TaskmasterService_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) CancelJobs(ctx context.Context, in *common.ListOfUInt64, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_CancelJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetDriver(ctx context.Context, in *acquisition.SetDriver, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetCache(ctx context.Context, in *acquisition.SetCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) GetCache(ctx context.Context, in *acquisition.GetCacheRequest, opts ...grpc.CallOption) (*acquisition.GetCacheResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.GetCacheResponse)
	err := c.cc.Invoke(ctx, TaskmasterService_GetCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetDriverConfigDefaults(ctx context.Context, in *acquisition.SetConfigDefaultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetDriverConfigDefaults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) GetDriverConfig(ctx context.Context, in *acquisition.GetDriverConfigRequest, opts ...grpc.CallOption) (*common.FieldValues, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.FieldValues)
	err := c.cc.Invoke(ctx, TaskmasterService_GetDriverConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetManagedFields(ctx context.Context, in *common.SetManagedFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetManagedFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) GetMapDeviceKeyXId(ctx context.Context, in *common.ListOfDeviceKey, opts ...grpc.CallOption) (*common.MapDeviceKeyXId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.MapDeviceKeyXId)
	err := c.cc.Invoke(ctx, TaskmasterService_GetMapDeviceKeyXId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) AddCommunicationUnitLogs(ctx context.Context, in *acquisition.AddCommunicationUnitLogsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_AddCommunicationUnitLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetUnknownDevices(ctx context.Context, in *acquisition.SetUnknownDevicesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetUnknownDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) ListDevicesByAttributes(ctx context.Context, in *acquisition.DeviceAttributeSelector, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDevice)
	err := c.cc.Invoke(ctx, TaskmasterService_ListDevicesByAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) ListCommunicationUnitsByAttributes(ctx context.Context, in *acquisition.CommunicationUnitAttributeSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationUnit)
	err := c.cc.Invoke(ctx, TaskmasterService_ListCommunicationUnitsByAttributes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetNeightbours(ctx context.Context, in *acquisition.SetNeighboursRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetNeightbours_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskmasterServiceClient) SetCurrentDeviceCommunicationUnit(ctx context.Context, in *acquisition.SetCurrentDeviceCommunicationUnitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskmasterService_SetCurrentDeviceCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskmasterServiceServer is the server API for TaskmasterService service.
// All implementations must embed UnimplementedTaskmasterServiceServer
// for forward compatibility.
//
// The Taskmaster service definition.
// Those are the gRPC services that the Taskmaster provides for other components.
type TaskmasterServiceServer interface {
	QueueJobs(context.Context, *acquisition.QueueJobsRequest) (*acquisition.QueueJobsResponse, error)
	// The method called by the RestApi to get the job status. The parameter contains the job identifier.
	GetJob(context.Context, *wrapperspb.StringValue) (*acquisition.GetJobResponse, error)
	// The method called by the RestApi to cancel the job.
	CancelJobs(context.Context, *common.ListOfUInt64) (*emptypb.Empty, error)
	// @group: Drivers
	// The method called by the driver to inform Taskmaster about the instance existence. The parameter contains the driver version, the listening port, the meter type, the maximum number of concurrent jobs, the typical memory usage, the connection attributes template, and the job action templates.
	SetDriver(context.Context, *acquisition.SetDriver) (*emptypb.Empty, error)
	// @group: Drivers
	// The method called by the driver to store the cache entry. The parameter contains the cache key and the cache value. The key is unique within the driver type.
	SetCache(context.Context, *acquisition.SetCacheRequest) (*emptypb.Empty, error)
	// @group: Drivers
	// The method called by the driver to retrieve the cache entry. The parameter contains the cache key. The key is unique within the driver type.
	GetCache(context.Context, *acquisition.GetCacheRequest) (*acquisition.GetCacheResponse, error)
	// @group: Drivers
	// SetDriverConfigDefaults sets the default configuration values for the driver type. It also resets the configuration caches.
	SetDriverConfigDefaults(context.Context, *acquisition.SetConfigDefaultsRequest) (*emptypb.Empty, error)
	// @group: Drivers
	// GetDriverConfig returns the driver configuration for the given driver type.
	// The parameter contains the driver type.
	GetDriverConfig(context.Context, *acquisition.GetDriverConfigRequest) (*common.FieldValues, error)
	// @group: Drivers
	// The method sets the managed fields for entities.
	SetManagedFields(context.Context, *common.SetManagedFieldsRequest) (*emptypb.Empty, error)
	// @group: Drivers
	// The method returns the list of x-device-identifiers that match the given device-type specific key.
	// The key can be any byte-array like unique physical identifier of the device (e.g. system-title, MAC address, etc.) which must be unique for give driver type.
	// If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
	GetMapDeviceKeyXId(context.Context, *common.ListOfDeviceKey) (*common.MapDeviceKeyXId, error)
	// @group: Drivers
	// Adds a new log records to the communication unit. Duplicit records are ignored.
	AddCommunicationUnitLogs(context.Context, *acquisition.AddCommunicationUnitLogsRequest) (*emptypb.Empty, error)
	// @group: Drivers
	// The method sets currently known unknown devices visible by the communication unit.
	SetUnknownDevices(context.Context, *acquisition.SetUnknownDevicesRequest) (*emptypb.Empty, error)
	// @group: Drivers
	// The method returns the list of device identifiers that match the given attributes.
	ListDevicesByAttributes(context.Context, *acquisition.DeviceAttributeSelector) (*acquisition.ListOfDevice, error)
	// @group: Drivers
	// The method returns the list of communication unit identifiers that match the given attributes.
	ListCommunicationUnitsByAttributes(context.Context, *acquisition.CommunicationUnitAttributeSelector) (*acquisition.ListOfCommunicationUnit, error)
	// @group: Drivers
	// The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
	// If there were other neighbours not listed within the request, they are removed from the neighbours list.
	SetNeightbours(context.Context, *acquisition.SetNeighboursRequest) (*emptypb.Empty, error)
	// @group: Drivers
	// The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
	// The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
	// The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
	SetCurrentDeviceCommunicationUnit(context.Context, *acquisition.SetCurrentDeviceCommunicationUnitRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskmasterServiceServer()
}

// UnimplementedTaskmasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskmasterServiceServer struct{}

func (UnimplementedTaskmasterServiceServer) QueueJobs(context.Context, *acquisition.QueueJobsRequest) (*acquisition.QueueJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueJobs not implemented")
}
func (UnimplementedTaskmasterServiceServer) GetJob(context.Context, *wrapperspb.StringValue) (*acquisition.GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedTaskmasterServiceServer) CancelJobs(context.Context, *common.ListOfUInt64) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobs not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetDriver(context.Context, *acquisition.SetDriver) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriver not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetCache(context.Context, *acquisition.SetCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCache not implemented")
}
func (UnimplementedTaskmasterServiceServer) GetCache(context.Context, *acquisition.GetCacheRequest) (*acquisition.GetCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCache not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetDriverConfigDefaults(context.Context, *acquisition.SetConfigDefaultsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDriverConfigDefaults not implemented")
}
func (UnimplementedTaskmasterServiceServer) GetDriverConfig(context.Context, *acquisition.GetDriverConfigRequest) (*common.FieldValues, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverConfig not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetManagedFields(context.Context, *common.SetManagedFieldsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManagedFields not implemented")
}
func (UnimplementedTaskmasterServiceServer) GetMapDeviceKeyXId(context.Context, *common.ListOfDeviceKey) (*common.MapDeviceKeyXId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapDeviceKeyXId not implemented")
}
func (UnimplementedTaskmasterServiceServer) AddCommunicationUnitLogs(context.Context, *acquisition.AddCommunicationUnitLogsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunicationUnitLogs not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetUnknownDevices(context.Context, *acquisition.SetUnknownDevicesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUnknownDevices not implemented")
}
func (UnimplementedTaskmasterServiceServer) ListDevicesByAttributes(context.Context, *acquisition.DeviceAttributeSelector) (*acquisition.ListOfDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevicesByAttributes not implemented")
}
func (UnimplementedTaskmasterServiceServer) ListCommunicationUnitsByAttributes(context.Context, *acquisition.CommunicationUnitAttributeSelector) (*acquisition.ListOfCommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationUnitsByAttributes not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetNeightbours(context.Context, *acquisition.SetNeighboursRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNeightbours not implemented")
}
func (UnimplementedTaskmasterServiceServer) SetCurrentDeviceCommunicationUnit(context.Context, *acquisition.SetCurrentDeviceCommunicationUnitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCurrentDeviceCommunicationUnit not implemented")
}
func (UnimplementedTaskmasterServiceServer) mustEmbedUnimplementedTaskmasterServiceServer() {}
func (UnimplementedTaskmasterServiceServer) testEmbeddedByValue()                           {}

// UnsafeTaskmasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskmasterServiceServer will
// result in compilation errors.
type UnsafeTaskmasterServiceServer interface {
	mustEmbedUnimplementedTaskmasterServiceServer()
}

func RegisterTaskmasterServiceServer(s grpc.ServiceRegistrar, srv TaskmasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskmasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskmasterService_ServiceDesc, srv)
}

func _TaskmasterService_QueueJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.QueueJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).QueueJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_QueueJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).QueueJobs(ctx, req.(*acquisition.QueueJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).GetJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_CancelJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListOfUInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).CancelJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_CancelJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).CancelJobs(ctx, req.(*common.ListOfUInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetDriver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetDriver(ctx, req.(*acquisition.SetDriver))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetCache(ctx, req.(*acquisition.SetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_GetCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).GetCache(ctx, req.(*acquisition.GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetDriverConfigDefaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetConfigDefaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetDriverConfigDefaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetDriverConfigDefaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetDriverConfigDefaults(ctx, req.(*acquisition.SetConfigDefaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_GetDriverConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.GetDriverConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).GetDriverConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_GetDriverConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).GetDriverConfig(ctx, req.(*acquisition.GetDriverConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetManagedFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SetManagedFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetManagedFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetManagedFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetManagedFields(ctx, req.(*common.SetManagedFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_GetMapDeviceKeyXId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListOfDeviceKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).GetMapDeviceKeyXId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_GetMapDeviceKeyXId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).GetMapDeviceKeyXId(ctx, req.(*common.ListOfDeviceKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_AddCommunicationUnitLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddCommunicationUnitLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).AddCommunicationUnitLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_AddCommunicationUnitLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).AddCommunicationUnitLogs(ctx, req.(*acquisition.AddCommunicationUnitLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetUnknownDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetUnknownDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetUnknownDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetUnknownDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetUnknownDevices(ctx, req.(*acquisition.SetUnknownDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_ListDevicesByAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.DeviceAttributeSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).ListDevicesByAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_ListDevicesByAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).ListDevicesByAttributes(ctx, req.(*acquisition.DeviceAttributeSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_ListCommunicationUnitsByAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CommunicationUnitAttributeSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).ListCommunicationUnitsByAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_ListCommunicationUnitsByAttributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).ListCommunicationUnitsByAttributes(ctx, req.(*acquisition.CommunicationUnitAttributeSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetNeightbours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetNeighboursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetNeightbours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetNeightbours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetNeightbours(ctx, req.(*acquisition.SetNeighboursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskmasterService_SetCurrentDeviceCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetCurrentDeviceCommunicationUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskmasterServiceServer).SetCurrentDeviceCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskmasterService_SetCurrentDeviceCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskmasterServiceServer).SetCurrentDeviceCommunicationUnit(ctx, req.(*acquisition.SetCurrentDeviceCommunicationUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskmasterService_ServiceDesc is the grpc.ServiceDesc for TaskmasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskmasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.services.svctaskmaster.TaskmasterService",
	HandlerType: (*TaskmasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueJobs",
			Handler:    _TaskmasterService_QueueJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _TaskmasterService_GetJob_Handler,
		},
		{
			MethodName: "CancelJobs",
			Handler:    _TaskmasterService_CancelJobs_Handler,
		},
		{
			MethodName: "SetDriver",
			Handler:    _TaskmasterService_SetDriver_Handler,
		},
		{
			MethodName: "SetCache",
			Handler:    _TaskmasterService_SetCache_Handler,
		},
		{
			MethodName: "GetCache",
			Handler:    _TaskmasterService_GetCache_Handler,
		},
		{
			MethodName: "SetDriverConfigDefaults",
			Handler:    _TaskmasterService_SetDriverConfigDefaults_Handler,
		},
		{
			MethodName: "GetDriverConfig",
			Handler:    _TaskmasterService_GetDriverConfig_Handler,
		},
		{
			MethodName: "SetManagedFields",
			Handler:    _TaskmasterService_SetManagedFields_Handler,
		},
		{
			MethodName: "GetMapDeviceKeyXId",
			Handler:    _TaskmasterService_GetMapDeviceKeyXId_Handler,
		},
		{
			MethodName: "AddCommunicationUnitLogs",
			Handler:    _TaskmasterService_AddCommunicationUnitLogs_Handler,
		},
		{
			MethodName: "SetUnknownDevices",
			Handler:    _TaskmasterService_SetUnknownDevices_Handler,
		},
		{
			MethodName: "ListDevicesByAttributes",
			Handler:    _TaskmasterService_ListDevicesByAttributes_Handler,
		},
		{
			MethodName: "ListCommunicationUnitsByAttributes",
			Handler:    _TaskmasterService_ListCommunicationUnitsByAttributes_Handler,
		},
		{
			MethodName: "SetNeightbours",
			Handler:    _TaskmasterService_SetNeightbours_Handler,
		},
		{
			MethodName: "SetCurrentDeviceCommunicationUnit",
			Handler:    _TaskmasterService_SetCurrentDeviceCommunicationUnit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/svctaskmaster/taskmaster.proto",
}
