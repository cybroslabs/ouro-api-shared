// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/svcapi/api.proto

package svcapiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	acquisition "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition"
	common "github.com/cybroslabs/ouro-api-shared/gen/go/common"
	cronjobs "github.com/cybroslabs/ouro-api-shared/gen/go/cronjobs"
	crypto "github.com/cybroslabs/ouro-api-shared/gen/go/crypto"
	svcapi "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcapi"
	system "github.com/cybroslabs/ouro-api-shared/gen/go/system"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ApiServiceName is the fully-qualified name of the ApiService service.
	ApiServiceName = "io.clbs.openhes.services.svcapi.ApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApiServiceCreateVariableProcedure is the fully-qualified name of the ApiService's CreateVariable
	// RPC.
	ApiServiceCreateVariableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateVariable"
	// ApiServiceListVariablesProcedure is the fully-qualified name of the ApiService's ListVariables
	// RPC.
	ApiServiceListVariablesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListVariables"
	// ApiServiceGetVariableProcedure is the fully-qualified name of the ApiService's GetVariable RPC.
	ApiServiceGetVariableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetVariable"
	// ApiServiceUpdateVariableProcedure is the fully-qualified name of the ApiService's UpdateVariable
	// RPC.
	ApiServiceUpdateVariableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateVariable"
	// ApiServiceDeleteVariableProcedure is the fully-qualified name of the ApiService's DeleteVariable
	// RPC.
	ApiServiceDeleteVariableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteVariable"
	// ApiServiceAddRegisterToVariableProcedure is the fully-qualified name of the ApiService's
	// AddRegisterToVariable RPC.
	ApiServiceAddRegisterToVariableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/AddRegisterToVariable"
	// ApiServiceRemoveRegisterFromVariableProcedure is the fully-qualified name of the ApiService's
	// RemoveRegisterFromVariable RPC.
	ApiServiceRemoveRegisterFromVariableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RemoveRegisterFromVariable"
	// ApiServiceCreateDeviceConfigurationRegisterProcedure is the fully-qualified name of the
	// ApiService's CreateDeviceConfigurationRegister RPC.
	ApiServiceCreateDeviceConfigurationRegisterProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceConfigurationRegister"
	// ApiServiceListDeviceConfigurationRegistersProcedure is the fully-qualified name of the
	// ApiService's ListDeviceConfigurationRegisters RPC.
	ApiServiceListDeviceConfigurationRegistersProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceConfigurationRegisters"
	// ApiServiceGetDeviceConfigurationRegisterProcedure is the fully-qualified name of the ApiService's
	// GetDeviceConfigurationRegister RPC.
	ApiServiceGetDeviceConfigurationRegisterProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceConfigurationRegister"
	// ApiServiceUpdateDeviceConfigurationRegisterProcedure is the fully-qualified name of the
	// ApiService's UpdateDeviceConfigurationRegister RPC.
	ApiServiceUpdateDeviceConfigurationRegisterProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateDeviceConfigurationRegister"
	// ApiServiceDeleteDeviceConfigurationRegisterProcedure is the fully-qualified name of the
	// ApiService's DeleteDeviceConfigurationRegister RPC.
	ApiServiceDeleteDeviceConfigurationRegisterProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteDeviceConfigurationRegister"
	// ApiServiceCreateDeviceConfigurationTemplateProcedure is the fully-qualified name of the
	// ApiService's CreateDeviceConfigurationTemplate RPC.
	ApiServiceCreateDeviceConfigurationTemplateProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceConfigurationTemplate"
	// ApiServiceListDeviceConfigurationTemplatesProcedure is the fully-qualified name of the
	// ApiService's ListDeviceConfigurationTemplates RPC.
	ApiServiceListDeviceConfigurationTemplatesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceConfigurationTemplates"
	// ApiServiceGetDeviceConfigurationTemplateProcedure is the fully-qualified name of the ApiService's
	// GetDeviceConfigurationTemplate RPC.
	ApiServiceGetDeviceConfigurationTemplateProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceConfigurationTemplate"
	// ApiServiceUpdateDeviceConfigurationTemplateProcedure is the fully-qualified name of the
	// ApiService's UpdateDeviceConfigurationTemplate RPC.
	ApiServiceUpdateDeviceConfigurationTemplateProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateDeviceConfigurationTemplate"
	// ApiServiceDeleteDeviceConfigurationTemplateProcedure is the fully-qualified name of the
	// ApiService's DeleteDeviceConfigurationTemplate RPC.
	ApiServiceDeleteDeviceConfigurationTemplateProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteDeviceConfigurationTemplate"
	// ApiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateProcedure is the
	// fully-qualified name of the ApiService's
	// AddDeviceConfigurationRegisterToDeviceConfigurationTemplate RPC.
	ApiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateProcedure = "/io.clbs.openhes.services.svcapi.ApiService/AddDeviceConfigurationRegisterToDeviceConfigurationTemplate"
	// ApiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateProcedure is the
	// fully-qualified name of the ApiService's
	// RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate RPC.
	ApiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate"
	// ApiServiceCreateFieldDescriptorProcedure is the fully-qualified name of the ApiService's
	// CreateFieldDescriptor RPC.
	ApiServiceCreateFieldDescriptorProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateFieldDescriptor"
	// ApiServiceUpdateFieldDescriptorProcedure is the fully-qualified name of the ApiService's
	// UpdateFieldDescriptor RPC.
	ApiServiceUpdateFieldDescriptorProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateFieldDescriptor"
	// ApiServiceDeleteFieldDescriptorProcedure is the fully-qualified name of the ApiService's
	// DeleteFieldDescriptor RPC.
	ApiServiceDeleteFieldDescriptorProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteFieldDescriptor"
	// ApiServiceListFieldDescriptorsProcedure is the fully-qualified name of the ApiService's
	// ListFieldDescriptors RPC.
	ApiServiceListFieldDescriptorsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListFieldDescriptors"
	// ApiServiceListFieldDescriptorOptionsProcedure is the fully-qualified name of the ApiService's
	// ListFieldDescriptorOptions RPC.
	ApiServiceListFieldDescriptorOptionsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListFieldDescriptorOptions"
	// ApiServiceListBulksProcedure is the fully-qualified name of the ApiService's ListBulks RPC.
	ApiServiceListBulksProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListBulks"
	// ApiServiceListBulkJobsProcedure is the fully-qualified name of the ApiService's ListBulkJobs RPC.
	ApiServiceListBulkJobsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListBulkJobs"
	// ApiServiceGetBulkJobProcedure is the fully-qualified name of the ApiService's GetBulkJob RPC.
	ApiServiceGetBulkJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetBulkJob"
	// ApiServiceUpdateBulkJobProcedure is the fully-qualified name of the ApiService's UpdateBulkJob
	// RPC.
	ApiServiceUpdateBulkJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateBulkJob"
	// ApiServiceCancelBulkProcedure is the fully-qualified name of the ApiService's CancelBulk RPC.
	ApiServiceCancelBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CancelBulk"
	// ApiServiceCancelBulkJobsProcedure is the fully-qualified name of the ApiService's CancelBulkJobs
	// RPC.
	ApiServiceCancelBulkJobsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CancelBulkJobs"
	// ApiServiceCreateProxyBulkProcedure is the fully-qualified name of the ApiService's
	// CreateProxyBulk RPC.
	ApiServiceCreateProxyBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateProxyBulk"
	// ApiServiceGetProxyBulkProcedure is the fully-qualified name of the ApiService's GetProxyBulk RPC.
	ApiServiceGetProxyBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetProxyBulk"
	// ApiServiceCreateBulkProcedure is the fully-qualified name of the ApiService's CreateBulk RPC.
	ApiServiceCreateBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateBulk"
	// ApiServiceGetBulkProcedure is the fully-qualified name of the ApiService's GetBulk RPC.
	ApiServiceGetBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetBulk"
	// ApiServiceUpdateBulkProcedure is the fully-qualified name of the ApiService's UpdateBulk RPC.
	ApiServiceUpdateBulkProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateBulk"
	// ApiServiceListDriversProcedure is the fully-qualified name of the ApiService's ListDrivers RPC.
	ApiServiceListDriversProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDrivers"
	// ApiServiceGetDriverProcedure is the fully-qualified name of the ApiService's GetDriver RPC.
	ApiServiceGetDriverProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDriver"
	// ApiServiceCreateCommunicationUnitProcedure is the fully-qualified name of the ApiService's
	// CreateCommunicationUnit RPC.
	ApiServiceCreateCommunicationUnitProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateCommunicationUnit"
	// ApiServiceUpdateCommunicationUnitProcedure is the fully-qualified name of the ApiService's
	// UpdateCommunicationUnit RPC.
	ApiServiceUpdateCommunicationUnitProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateCommunicationUnit"
	// ApiServiceListCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// ListCommunicationUnits RPC.
	ApiServiceListCommunicationUnitsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationUnits"
	// ApiServiceGetCommunicationUnitProcedure is the fully-qualified name of the ApiService's
	// GetCommunicationUnit RPC.
	ApiServiceGetCommunicationUnitProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetCommunicationUnit"
	// ApiServiceGetCommunicationUnitNetworkMapProcedure is the fully-qualified name of the ApiService's
	// GetCommunicationUnitNetworkMap RPC.
	ApiServiceGetCommunicationUnitNetworkMapProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetCommunicationUnitNetworkMap"
	// ApiServiceCreateCommunicationBusProcedure is the fully-qualified name of the ApiService's
	// CreateCommunicationBus RPC.
	ApiServiceCreateCommunicationBusProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateCommunicationBus"
	// ApiServiceListCommunicationBusesProcedure is the fully-qualified name of the ApiService's
	// ListCommunicationBuses RPC.
	ApiServiceListCommunicationBusesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationBuses"
	// ApiServiceAddCommunicationUnitsToCommunicationBusProcedure is the fully-qualified name of the
	// ApiService's AddCommunicationUnitsToCommunicationBus RPC.
	ApiServiceAddCommunicationUnitsToCommunicationBusProcedure = "/io.clbs.openhes.services.svcapi.ApiService/AddCommunicationUnitsToCommunicationBus"
	// ApiServiceRemoveCommunicationUnitsFromCommunicationBusProcedure is the fully-qualified name of
	// the ApiService's RemoveCommunicationUnitsFromCommunicationBus RPC.
	ApiServiceRemoveCommunicationUnitsFromCommunicationBusProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RemoveCommunicationUnitsFromCommunicationBus"
	// ApiServiceCreateDeviceProcedure is the fully-qualified name of the ApiService's CreateDevice RPC.
	ApiServiceCreateDeviceProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateDevice"
	// ApiServiceUpdateDeviceProcedure is the fully-qualified name of the ApiService's UpdateDevice RPC.
	ApiServiceUpdateDeviceProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateDevice"
	// ApiServiceListDevicesProcedure is the fully-qualified name of the ApiService's ListDevices RPC.
	ApiServiceListDevicesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDevices"
	// ApiServiceGetDeviceProcedure is the fully-qualified name of the ApiService's GetDevice RPC.
	ApiServiceGetDeviceProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDevice"
	// ApiServiceGetDeviceInfoProcedure is the fully-qualified name of the ApiService's GetDeviceInfo
	// RPC.
	ApiServiceGetDeviceInfoProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceInfo"
	// ApiServiceSetDeviceCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// SetDeviceCommunicationUnits RPC.
	ApiServiceSetDeviceCommunicationUnitsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/SetDeviceCommunicationUnits"
	// ApiServiceGetDeviceCommunicationUnitsProcedure is the fully-qualified name of the ApiService's
	// GetDeviceCommunicationUnits RPC.
	ApiServiceGetDeviceCommunicationUnitsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceCommunicationUnits"
	// ApiServiceListDeviceCommunicationUnitChangesProcedure is the fully-qualified name of the
	// ApiService's ListDeviceCommunicationUnitChanges RPC.
	ApiServiceListDeviceCommunicationUnitChangesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceCommunicationUnitChanges"
	// ApiServiceGetDeviceDeviceGroupsProcedure is the fully-qualified name of the ApiService's
	// GetDeviceDeviceGroups RPC.
	ApiServiceGetDeviceDeviceGroupsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDeviceGroups"
	// ApiServiceGetDeviceNetworkMapProcedure is the fully-qualified name of the ApiService's
	// GetDeviceNetworkMap RPC.
	ApiServiceGetDeviceNetworkMapProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceNetworkMap"
	// ApiServiceGetDeviceBulksProcedure is the fully-qualified name of the ApiService's GetDeviceBulks
	// RPC.
	ApiServiceGetDeviceBulksProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceBulks"
	// ApiServiceCreateDeviceGroupProcedure is the fully-qualified name of the ApiService's
	// CreateDeviceGroup RPC.
	ApiServiceCreateDeviceGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceGroup"
	// ApiServiceListDeviceGroupsProcedure is the fully-qualified name of the ApiService's
	// ListDeviceGroups RPC.
	ApiServiceListDeviceGroupsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceGroups"
	// ApiServiceGetDeviceGroupProcedure is the fully-qualified name of the ApiService's GetDeviceGroup
	// RPC.
	ApiServiceGetDeviceGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceGroup"
	// ApiServiceAddDevicesToGroupProcedure is the fully-qualified name of the ApiService's
	// AddDevicesToGroup RPC.
	ApiServiceAddDevicesToGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/AddDevicesToGroup"
	// ApiServiceRemoveDevicesFromGroupProcedure is the fully-qualified name of the ApiService's
	// RemoveDevicesFromGroup RPC.
	ApiServiceRemoveDevicesFromGroupProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RemoveDevicesFromGroup"
	// ApiServiceListDeviceGroupDevicesProcedure is the fully-qualified name of the ApiService's
	// ListDeviceGroupDevices RPC.
	ApiServiceListDeviceGroupDevicesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceGroupDevices"
	// ApiServiceListModemPoolsProcedure is the fully-qualified name of the ApiService's ListModemPools
	// RPC.
	ApiServiceListModemPoolsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListModemPools"
	// ApiServiceGetModemPoolProcedure is the fully-qualified name of the ApiService's GetModemPool RPC.
	ApiServiceGetModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetModemPool"
	// ApiServiceCreateModemPoolProcedure is the fully-qualified name of the ApiService's
	// CreateModemPool RPC.
	ApiServiceCreateModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateModemPool"
	// ApiServiceUpdateModemPoolProcedure is the fully-qualified name of the ApiService's
	// UpdateModemPool RPC.
	ApiServiceUpdateModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateModemPool"
	// ApiServiceDeleteModemPoolProcedure is the fully-qualified name of the ApiService's
	// DeleteModemPool RPC.
	ApiServiceDeleteModemPoolProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteModemPool"
	// ApiServiceCreateModemProcedure is the fully-qualified name of the ApiService's CreateModem RPC.
	ApiServiceCreateModemProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateModem"
	// ApiServiceUpdateModemProcedure is the fully-qualified name of the ApiService's UpdateModem RPC.
	ApiServiceUpdateModemProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateModem"
	// ApiServiceDeleteModemProcedure is the fully-qualified name of the ApiService's DeleteModem RPC.
	ApiServiceDeleteModemProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteModem"
	// ApiServiceGetApplicationConfigProcedure is the fully-qualified name of the ApiService's
	// GetApplicationConfig RPC.
	ApiServiceGetApplicationConfigProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetApplicationConfig"
	// ApiServiceUpdateApplicationConfigProcedure is the fully-qualified name of the ApiService's
	// UpdateApplicationConfig RPC.
	ApiServiceUpdateApplicationConfigProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateApplicationConfig"
	// ApiServiceSynchronizeComponentConfigProcedure is the fully-qualified name of the ApiService's
	// SynchronizeComponentConfig RPC.
	ApiServiceSynchronizeComponentConfigProcedure = "/io.clbs.openhes.services.svcapi.ApiService/SynchronizeComponentConfig"
	// ApiServiceGetDeviceDataProcedure is the fully-qualified name of the ApiService's GetDeviceData
	// RPC.
	ApiServiceGetDeviceDataProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceData"
	// ApiServiceListDeviceDataInfoProcedure is the fully-qualified name of the ApiService's
	// ListDeviceDataInfo RPC.
	ApiServiceListDeviceDataInfoProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceDataInfo"
	// ApiServiceGetDeviceDataRegistersProcedure is the fully-qualified name of the ApiService's
	// GetDeviceDataRegisters RPC.
	ApiServiceGetDeviceDataRegistersProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDataRegisters"
	// ApiServiceGetDeviceDataProfilesProcedure is the fully-qualified name of the ApiService's
	// GetDeviceDataProfiles RPC.
	ApiServiceGetDeviceDataProfilesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDataProfiles"
	// ApiServiceGetDeviceDataIrregularProfilesProcedure is the fully-qualified name of the ApiService's
	// GetDeviceDataIrregularProfiles RPC.
	ApiServiceGetDeviceDataIrregularProfilesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDataIrregularProfiles"
	// ApiServiceGetDeviceEventsProcedure is the fully-qualified name of the ApiService's
	// GetDeviceEvents RPC.
	ApiServiceGetDeviceEventsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceEvents"
	// ApiServiceCreateTimeOfUseTableProcedure is the fully-qualified name of the ApiService's
	// CreateTimeOfUseTable RPC.
	ApiServiceCreateTimeOfUseTableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateTimeOfUseTable"
	// ApiServiceListTimeOfUseTablesProcedure is the fully-qualified name of the ApiService's
	// ListTimeOfUseTables RPC.
	ApiServiceListTimeOfUseTablesProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListTimeOfUseTables"
	// ApiServiceGetTimeOfUseTableProcedure is the fully-qualified name of the ApiService's
	// GetTimeOfUseTable RPC.
	ApiServiceGetTimeOfUseTableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetTimeOfUseTable"
	// ApiServiceUpdateTimeOfUseTableProcedure is the fully-qualified name of the ApiService's
	// UpdateTimeOfUseTable RPC.
	ApiServiceUpdateTimeOfUseTableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateTimeOfUseTable"
	// ApiServiceDeleteTimeOfUseTableProcedure is the fully-qualified name of the ApiService's
	// DeleteTimeOfUseTable RPC.
	ApiServiceDeleteTimeOfUseTableProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteTimeOfUseTable"
	// ApiServiceCreateCronJobProcedure is the fully-qualified name of the ApiService's CreateCronJob
	// RPC.
	ApiServiceCreateCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/CreateCronJob"
	// ApiServiceListCronJobsProcedure is the fully-qualified name of the ApiService's ListCronJobs RPC.
	ApiServiceListCronJobsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ListCronJobs"
	// ApiServiceGetCronJobProcedure is the fully-qualified name of the ApiService's GetCronJob RPC.
	ApiServiceGetCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetCronJob"
	// ApiServiceUpdateCronJobProcedure is the fully-qualified name of the ApiService's UpdateCronJob
	// RPC.
	ApiServiceUpdateCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateCronJob"
	// ApiServiceDeleteCronJobProcedure is the fully-qualified name of the ApiService's DeleteCronJob
	// RPC.
	ApiServiceDeleteCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/DeleteCronJob"
	// ApiServiceRunCronJobProcedure is the fully-qualified name of the ApiService's RunCronJob RPC.
	ApiServiceRunCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/RunCronJob"
	// ApiServicePauseCronJobProcedure is the fully-qualified name of the ApiService's PauseCronJob RPC.
	ApiServicePauseCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/PauseCronJob"
	// ApiServiceResumeCronJobProcedure is the fully-qualified name of the ApiService's ResumeCronJob
	// RPC.
	ApiServiceResumeCronJobProcedure = "/io.clbs.openhes.services.svcapi.ApiService/ResumeCronJob"
	// ApiServiceUpdateObjectFieldsProcedure is the fully-qualified name of the ApiService's
	// UpdateObjectFields RPC.
	ApiServiceUpdateObjectFieldsProcedure = "/io.clbs.openhes.services.svcapi.ApiService/UpdateObjectFields"
	// ApiServiceGetOpenIdConfigurationProcedure is the fully-qualified name of the ApiService's
	// GetOpenIdConfiguration RPC.
	ApiServiceGetOpenIdConfigurationProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetOpenIdConfiguration"
	// ApiServiceGetCryptoSecretProcedure is the fully-qualified name of the ApiService's
	// GetCryptoSecret RPC.
	ApiServiceGetCryptoSecretProcedure = "/io.clbs.openhes.services.svcapi.ApiService/GetCryptoSecret"
	// ApiServiceSetCryptoSecretProcedure is the fully-qualified name of the ApiService's
	// SetCryptoSecret RPC.
	ApiServiceSetCryptoSecretProcedure = "/io.clbs.openhes.services.svcapi.ApiService/SetCryptoSecret"
)

// ApiServiceClient is a client for the io.clbs.openhes.services.svcapi.ApiService service.
type ApiServiceClient interface {
	// @group: Variables
	// Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
	CreateVariable(context.Context, *connect.Request[acquisition.CreateVariableRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Variables
	ListVariables(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfVariable], error)
	// @group: Variables
	GetVariable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Variable], error)
	// @group: Variables
	UpdateVariable(context.Context, *connect.Request[acquisition.Variable]) (*connect.Response[emptypb.Empty], error)
	// @group: Variables
	DeleteVariable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Variables
	AddRegisterToVariable(context.Context, *connect.Request[acquisition.AddRegisterToVariableRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Variables
	RemoveRegisterFromVariable(context.Context, *connect.Request[acquisition.RemoveRegisterFromVariableRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Register
	// Creates a new register. The register object holds the information about the single device register.
	CreateDeviceConfigurationRegister(context.Context, *connect.Request[acquisition.CreateDeviceConfigurationRegisterRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Device Configuration Register
	ListDeviceConfigurationRegisters(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationRegister], error)
	// @group: Device Configuration Register
	GetDeviceConfigurationRegister(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationRegister], error)
	// @group: Device Configuration Register
	UpdateDeviceConfigurationRegister(context.Context, *connect.Request[acquisition.DeviceConfigurationRegister]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Register
	DeleteDeviceConfigurationRegister(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	CreateDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.CreateDeviceConfigurationTemplateRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Device Configuration Templates
	ListDeviceConfigurationTemplates(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationTemplate], error)
	// @group: Device Configuration Templates
	GetDeviceConfigurationTemplate(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationTemplate], error)
	// @group: Device Configuration Templates
	UpdateDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.DeviceConfigurationTemplate]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	DeleteDeviceConfigurationTemplate(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Fields
	// The method to create a new field descriptor user-defined field descriptor.
	CreateFieldDescriptor(context.Context, *connect.Request[common.CreateFieldDescriptorRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Fields
	// The method to update the field descriptor.
	UpdateFieldDescriptor(context.Context, *connect.Request[common.FieldDescriptor]) (*connect.Response[emptypb.Empty], error)
	// @group: Fields
	// The method to delete the field descriptor.
	DeleteFieldDescriptor(context.Context, *connect.Request[common.FieldDescriptorSelector]) (*connect.Response[emptypb.Empty], error)
	// @group: Fields
	// The method to get the list of fields.
	ListFieldDescriptors(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[common.ListOfFieldDescriptor], error)
	// @group: Fields
	// The method to get the options for the field descriptor.
	ListFieldDescriptorOptions(context.Context, *connect.Request[common.ListFieldDescriptorOptionsRequest]) (*connect.Response[common.FieldDescriptorOptions], error)
	// @group: Bulks
	// Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
	// The list contains both the proxy bulks and the regular bulks.
	ListBulks(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error)
	// @group: Bulks
	// Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
	// The listing can be used for both proxy bulks and regular bulks.
	ListBulkJobs(context.Context, *connect.Request[acquisition.ListBulkJobsRequest]) (*connect.Response[acquisition.ListOfBulkJob], error)
	// @group: Bulks
	// Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
	GetBulkJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.BulkJob], error)
	// @group: Bulks
	// Updates the job metadata. The metadata is used to store additional information about the job.
	UpdateBulkJob(context.Context, *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
	CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Cancels the job(s) identified by the job identifier(s).
	CancelBulkJobs(context.Context, *connect.Request[common.ListOfId]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
	CreateProxyBulk(context.Context, *connect.Request[acquisition.CreateProxyBulkRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Bulks
	// Retrieves the proxy bulk info and status.
	GetProxyBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ProxyBulk], error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
	CreateBulk(context.Context, *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error)
	// @group: Bulks
	// Updates the bulk metadata. The metadata is used to store additional information about the job.
	UpdateBulk(context.Context, *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	ListDrivers(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error)
	// @group: Driver Info
	// Retrieves the driver.
	GetDriver(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationunit
	// The method updates the communication unit. The parameter contains the communication unit specification.
	UpdateCommunicationUnit(context.Context, *connect.Request[acquisition.CommunicationUnit]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnits(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetCommunicationUnitNetworkMap(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error)
	// @group: Devices
	// @tag: communicationbus
	CreateCommunicationBus(context.Context, *connect.Request[acquisition.CreateCommunicationBusRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationbus
	ListCommunicationBuses(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationBus], error)
	// @group: Devices
	// @tag: communicationbus
	AddCommunicationUnitsToCommunicationBus(context.Context, *connect.Request[acquisition.AddCommunicationUnitsToCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationbus
	RemoveCommunicationUnitsFromCommunicationBus(context.Context, *connect.Request[acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: device
	// The method updates the device. The parameter contains the device specification.
	UpdateDevice(context.Context, *connect.Request[acquisition.Device]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error)
	// @group: Devices
	// The method to stream out profile-typed device info.
	GetDeviceInfo(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceInfo], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDeviceCommunicationUnits(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the list of device communication unit changes.
	ListDeviceCommunicationUnitChanges(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnitChange], error)
	// @group: Devices
	// @tag: device
	// The method returns a list of device groups that contain the device. The parameter contains the device identifier.
	GetDeviceDeviceGroups(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceGroup], error)
	// @group: Devices
	// @tag: device
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetDeviceNetworkMap(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error)
	// @group: Bulks
	// Retrieves the list of bulk jobs related to given device in the specified time range. All the parameters are required.
	GetDeviceBulks(context.Context, *connect.Request[acquisition.GetDeviceBulksRequest]) (*connect.Response[acquisition.DeviceBulks], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	ListDeviceGroups(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	ListDeviceGroupDevices(context.Context, *connect.Request[acquisition.ListDeviceGroupDevicesRequest]) (*connect.Response[acquisition.ListOfDevice], error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	ListModemPools(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem.
	DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// Gets the application configuration.
	GetApplicationConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.ApplicationConfigDescriptor], error)
	// @group: Configuration
	// Updates the application configuration. The missing fields in the request will be kept unchanged.
	UpdateApplicationConfig(context.Context, *connect.Request[system.ApplicationConfig]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// Synchronizes the application configuration. The input value shall contain all the default values and also all known keys (with null values).
	// The output value will contain currently set values including details which are not set.
	// The missing values in the defaults will be deleted if has been set previously in the application configuration.
	SynchronizeComponentConfig(context.Context, *connect.Request[system.ComponentConfigDescriptor]) (*connect.Response[system.ComponentConfig], error)
	// @group: Device Data
	// The method to returns register/profile/irregular-profile typed device data. The method is generic but limited to return
	GetDeviceData(context.Context, *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.Response[acquisition.DeviceData], error)
	// @group: Device Data
	// The method to get the list of device data info. The device data info contains various metadata, such as a period of the regular profiles or a timestamp of the last stored value.
	ListDeviceDataInfo(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceDataInfo], error)
	// @group: Device Data
	// The method to stream out register-typed device data.
	GetDeviceDataRegisters(context.Context, *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.ServerStreamForClient[acquisition.RegisterValues], error)
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataProfiles(context.Context, *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.ServerStreamForClient[acquisition.ProfileValues], error)
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataIrregularProfiles(context.Context, *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.ServerStreamForClient[acquisition.IrregularProfileValues], error)
	// @group: Device Events
	// The method to stream out profile-typed device events.
	GetDeviceEvents(context.Context, *connect.Request[acquisition.GetDeviceEventsRequest]) (*connect.Response[acquisition.DeviceEvents], error)
	// @group: Time-Of-Use Tables
	// The method to create a new time-of-use table.
	CreateTimeOfUseTable(context.Context, *connect.Request[acquisition.CreateTimeOfUseTableRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Time-Of-Use Tables
	// The method to get the list of time-of-use tables.
	ListTimeOfUseTables(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfTimeOfUseTable], error)
	// @group: Time-Of-Use Tables
	// The method to get the time-of-use table.
	GetTimeOfUseTable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.TimeOfUseTable], error)
	// @group: Time-Of-Use Tables
	// The method to update the time-of-use table.
	UpdateTimeOfUseTable(context.Context, *connect.Request[acquisition.TimeOfUseTable]) (*connect.Response[emptypb.Empty], error)
	// @group: Time-Of-Use Tables
	// The method to delete the time-of-use table.
	DeleteTimeOfUseTable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to create a new cron job.
	CreateCronJob(context.Context, *connect.Request[cronjobs.CreateCronJobRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Cron Jobs
	// The method to get the list of cron jobs.
	ListCronJobs(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[cronjobs.ListOfCronJob], error)
	// @group: Cron Jobs
	// The method to get the cron job.
	GetCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[cronjobs.CronJob], error)
	// @group: Cron Jobs
	// The method to update the cron job.
	UpdateCronJob(context.Context, *connect.Request[cronjobs.CronJob]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to delete the cron job.
	DeleteCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to run the cron job immediately.
	RunCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to pause the cron job.
	PauseCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to resume the cron job.
	ResumeCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Metadata
	// The method sets the fields of an object. The values are merged with the existing fields to preserve the existing fields that are not set in the request.
	UpdateObjectFields(context.Context, *connect.Request[common.UpdateObjectFieldsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: System
	// The method returns the OIDC configuration, proxied directly from the configured OIDC service.
	// All the authenticated endpoints shall be protected by token from this OIDC service.
	GetOpenIdConfiguration(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.OpenIdConfiguration], error)
	// @group: Cryptography
	// The method returns a secret based on the request.
	GetCryptoSecret(context.Context, *connect.Request[crypto.GetCryptoSecretRequest]) (*connect.Response[crypto.CryptoSecrets], error)
	// @group: Cryptography
	// The method to store (create or replace) the secret.
	SetCryptoSecret(context.Context, *connect.Request[crypto.SetCryptoSecretRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewApiServiceClient constructs a client for the io.clbs.openhes.services.svcapi.ApiService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	apiServiceMethods := svcapi.File_services_svcapi_api_proto.Services().ByName("ApiService").Methods()
	return &apiServiceClient{
		createVariable: connect.NewClient[acquisition.CreateVariableRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateVariableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateVariable")),
			connect.WithClientOptions(opts...),
		),
		listVariables: connect.NewClient[common.ListSelector, acquisition.ListOfVariable](
			httpClient,
			baseURL+ApiServiceListVariablesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListVariables")),
			connect.WithClientOptions(opts...),
		),
		getVariable: connect.NewClient[wrapperspb.StringValue, acquisition.Variable](
			httpClient,
			baseURL+ApiServiceGetVariableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetVariable")),
			connect.WithClientOptions(opts...),
		),
		updateVariable: connect.NewClient[acquisition.Variable, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateVariableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateVariable")),
			connect.WithClientOptions(opts...),
		),
		deleteVariable: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteVariableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteVariable")),
			connect.WithClientOptions(opts...),
		),
		addRegisterToVariable: connect.NewClient[acquisition.AddRegisterToVariableRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddRegisterToVariableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddRegisterToVariable")),
			connect.WithClientOptions(opts...),
		),
		removeRegisterFromVariable: connect.NewClient[acquisition.RemoveRegisterFromVariableRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveRegisterFromVariableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveRegisterFromVariable")),
			connect.WithClientOptions(opts...),
		),
		createDeviceConfigurationRegister: connect.NewClient[acquisition.CreateDeviceConfigurationRegisterRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateDeviceConfigurationRegisterProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDeviceConfigurationRegister")),
			connect.WithClientOptions(opts...),
		),
		listDeviceConfigurationRegisters: connect.NewClient[common.ListSelector, acquisition.ListOfDeviceConfigurationRegister](
			httpClient,
			baseURL+ApiServiceListDeviceConfigurationRegistersProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceConfigurationRegisters")),
			connect.WithClientOptions(opts...),
		),
		getDeviceConfigurationRegister: connect.NewClient[wrapperspb.StringValue, acquisition.DeviceConfigurationRegister](
			httpClient,
			baseURL+ApiServiceGetDeviceConfigurationRegisterProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceConfigurationRegister")),
			connect.WithClientOptions(opts...),
		),
		updateDeviceConfigurationRegister: connect.NewClient[acquisition.DeviceConfigurationRegister, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateDeviceConfigurationRegisterProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateDeviceConfigurationRegister")),
			connect.WithClientOptions(opts...),
		),
		deleteDeviceConfigurationRegister: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteDeviceConfigurationRegisterProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteDeviceConfigurationRegister")),
			connect.WithClientOptions(opts...),
		),
		createDeviceConfigurationTemplate: connect.NewClient[acquisition.CreateDeviceConfigurationTemplateRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateDeviceConfigurationTemplateProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDeviceConfigurationTemplate")),
			connect.WithClientOptions(opts...),
		),
		listDeviceConfigurationTemplates: connect.NewClient[common.ListSelector, acquisition.ListOfDeviceConfigurationTemplate](
			httpClient,
			baseURL+ApiServiceListDeviceConfigurationTemplatesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceConfigurationTemplates")),
			connect.WithClientOptions(opts...),
		),
		getDeviceConfigurationTemplate: connect.NewClient[wrapperspb.StringValue, acquisition.DeviceConfigurationTemplate](
			httpClient,
			baseURL+ApiServiceGetDeviceConfigurationTemplateProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceConfigurationTemplate")),
			connect.WithClientOptions(opts...),
		),
		updateDeviceConfigurationTemplate: connect.NewClient[acquisition.DeviceConfigurationTemplate, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateDeviceConfigurationTemplateProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateDeviceConfigurationTemplate")),
			connect.WithClientOptions(opts...),
		),
		deleteDeviceConfigurationTemplate: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteDeviceConfigurationTemplateProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteDeviceConfigurationTemplate")),
			connect.WithClientOptions(opts...),
		),
		addDeviceConfigurationRegisterToDeviceConfigurationTemplate: connect.NewClient[acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddDeviceConfigurationRegisterToDeviceConfigurationTemplate")),
			connect.WithClientOptions(opts...),
		),
		removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate: connect.NewClient[acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate")),
			connect.WithClientOptions(opts...),
		),
		createFieldDescriptor: connect.NewClient[common.CreateFieldDescriptorRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateFieldDescriptorProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateFieldDescriptor")),
			connect.WithClientOptions(opts...),
		),
		updateFieldDescriptor: connect.NewClient[common.FieldDescriptor, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateFieldDescriptorProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateFieldDescriptor")),
			connect.WithClientOptions(opts...),
		),
		deleteFieldDescriptor: connect.NewClient[common.FieldDescriptorSelector, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteFieldDescriptorProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteFieldDescriptor")),
			connect.WithClientOptions(opts...),
		),
		listFieldDescriptors: connect.NewClient[emptypb.Empty, common.ListOfFieldDescriptor](
			httpClient,
			baseURL+ApiServiceListFieldDescriptorsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListFieldDescriptors")),
			connect.WithClientOptions(opts...),
		),
		listFieldDescriptorOptions: connect.NewClient[common.ListFieldDescriptorOptionsRequest, common.FieldDescriptorOptions](
			httpClient,
			baseURL+ApiServiceListFieldDescriptorOptionsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListFieldDescriptorOptions")),
			connect.WithClientOptions(opts...),
		),
		listBulks: connect.NewClient[common.ListSelector, acquisition.ListOfBulk](
			httpClient,
			baseURL+ApiServiceListBulksProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListBulks")),
			connect.WithClientOptions(opts...),
		),
		listBulkJobs: connect.NewClient[acquisition.ListBulkJobsRequest, acquisition.ListOfBulkJob](
			httpClient,
			baseURL+ApiServiceListBulkJobsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListBulkJobs")),
			connect.WithClientOptions(opts...),
		),
		getBulkJob: connect.NewClient[wrapperspb.StringValue, acquisition.BulkJob](
			httpClient,
			baseURL+ApiServiceGetBulkJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetBulkJob")),
			connect.WithClientOptions(opts...),
		),
		updateBulkJob: connect.NewClient[common.UpdateMetadata, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateBulkJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateBulkJob")),
			connect.WithClientOptions(opts...),
		),
		cancelBulk: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCancelBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CancelBulk")),
			connect.WithClientOptions(opts...),
		),
		cancelBulkJobs: connect.NewClient[common.ListOfId, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceCancelBulkJobsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CancelBulkJobs")),
			connect.WithClientOptions(opts...),
		),
		createProxyBulk: connect.NewClient[acquisition.CreateProxyBulkRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateProxyBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateProxyBulk")),
			connect.WithClientOptions(opts...),
		),
		getProxyBulk: connect.NewClient[wrapperspb.StringValue, acquisition.ProxyBulk](
			httpClient,
			baseURL+ApiServiceGetProxyBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetProxyBulk")),
			connect.WithClientOptions(opts...),
		),
		createBulk: connect.NewClient[acquisition.CreateBulkRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateBulk")),
			connect.WithClientOptions(opts...),
		),
		getBulk: connect.NewClient[wrapperspb.StringValue, acquisition.Bulk](
			httpClient,
			baseURL+ApiServiceGetBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetBulk")),
			connect.WithClientOptions(opts...),
		),
		updateBulk: connect.NewClient[common.UpdateMetadata, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateBulkProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateBulk")),
			connect.WithClientOptions(opts...),
		),
		listDrivers: connect.NewClient[common.ListSelector, acquisition.ListOfDriver](
			httpClient,
			baseURL+ApiServiceListDriversProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDrivers")),
			connect.WithClientOptions(opts...),
		),
		getDriver: connect.NewClient[wrapperspb.StringValue, acquisition.Driver](
			httpClient,
			baseURL+ApiServiceGetDriverProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDriver")),
			connect.WithClientOptions(opts...),
		),
		createCommunicationUnit: connect.NewClient[acquisition.CreateCommunicationUnitRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateCommunicationUnitProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnit")),
			connect.WithClientOptions(opts...),
		),
		updateCommunicationUnit: connect.NewClient[acquisition.CommunicationUnit, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateCommunicationUnitProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateCommunicationUnit")),
			connect.WithClientOptions(opts...),
		),
		listCommunicationUnits: connect.NewClient[common.ListSelector, acquisition.ListOfCommunicationUnit](
			httpClient,
			baseURL+ApiServiceListCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		getCommunicationUnit: connect.NewClient[wrapperspb.StringValue, acquisition.CommunicationUnit](
			httpClient,
			baseURL+ApiServiceGetCommunicationUnitProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnit")),
			connect.WithClientOptions(opts...),
		),
		getCommunicationUnitNetworkMap: connect.NewClient[wrapperspb.StringValue, acquisition.NetworkMap](
			httpClient,
			baseURL+ApiServiceGetCommunicationUnitNetworkMapProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnitNetworkMap")),
			connect.WithClientOptions(opts...),
		),
		createCommunicationBus: connect.NewClient[acquisition.CreateCommunicationBusRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateCommunicationBusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationBus")),
			connect.WithClientOptions(opts...),
		),
		listCommunicationBuses: connect.NewClient[common.ListSelector, acquisition.ListOfCommunicationBus](
			httpClient,
			baseURL+ApiServiceListCommunicationBusesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListCommunicationBuses")),
			connect.WithClientOptions(opts...),
		),
		addCommunicationUnitsToCommunicationBus: connect.NewClient[acquisition.AddCommunicationUnitsToCommunicationBusRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddCommunicationUnitsToCommunicationBusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddCommunicationUnitsToCommunicationBus")),
			connect.WithClientOptions(opts...),
		),
		removeCommunicationUnitsFromCommunicationBus: connect.NewClient[acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveCommunicationUnitsFromCommunicationBusProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveCommunicationUnitsFromCommunicationBus")),
			connect.WithClientOptions(opts...),
		),
		createDevice: connect.NewClient[acquisition.CreateDeviceRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateDeviceProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDevice")),
			connect.WithClientOptions(opts...),
		),
		updateDevice: connect.NewClient[acquisition.Device, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateDeviceProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateDevice")),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[common.ListSelector, acquisition.ListOfDevice](
			httpClient,
			baseURL+ApiServiceListDevicesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDevices")),
			connect.WithClientOptions(opts...),
		),
		getDevice: connect.NewClient[wrapperspb.StringValue, acquisition.Device](
			httpClient,
			baseURL+ApiServiceGetDeviceProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDevice")),
			connect.WithClientOptions(opts...),
		),
		getDeviceInfo: connect.NewClient[wrapperspb.StringValue, acquisition.DeviceInfo](
			httpClient,
			baseURL+ApiServiceGetDeviceInfoProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceInfo")),
			connect.WithClientOptions(opts...),
		),
		setDeviceCommunicationUnits: connect.NewClient[acquisition.SetDeviceCommunicationUnitsRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceSetDeviceCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SetDeviceCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		getDeviceCommunicationUnits: connect.NewClient[wrapperspb.StringValue, acquisition.ListOfDeviceCommunicationUnit](
			httpClient,
			baseURL+ApiServiceGetDeviceCommunicationUnitsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceCommunicationUnits")),
			connect.WithClientOptions(opts...),
		),
		listDeviceCommunicationUnitChanges: connect.NewClient[common.ListSelector, acquisition.ListOfDeviceCommunicationUnitChange](
			httpClient,
			baseURL+ApiServiceListDeviceCommunicationUnitChangesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceCommunicationUnitChanges")),
			connect.WithClientOptions(opts...),
		),
		getDeviceDeviceGroups: connect.NewClient[wrapperspb.StringValue, acquisition.ListOfDeviceGroup](
			httpClient,
			baseURL+ApiServiceGetDeviceDeviceGroupsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceDeviceGroups")),
			connect.WithClientOptions(opts...),
		),
		getDeviceNetworkMap: connect.NewClient[wrapperspb.StringValue, acquisition.NetworkMap](
			httpClient,
			baseURL+ApiServiceGetDeviceNetworkMapProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceNetworkMap")),
			connect.WithClientOptions(opts...),
		),
		getDeviceBulks: connect.NewClient[acquisition.GetDeviceBulksRequest, acquisition.DeviceBulks](
			httpClient,
			baseURL+ApiServiceGetDeviceBulksProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceBulks")),
			connect.WithClientOptions(opts...),
		),
		createDeviceGroup: connect.NewClient[acquisition.CreateDeviceGroupRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateDeviceGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateDeviceGroup")),
			connect.WithClientOptions(opts...),
		),
		listDeviceGroups: connect.NewClient[common.ListSelector, acquisition.ListOfDeviceGroup](
			httpClient,
			baseURL+ApiServiceListDeviceGroupsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceGroups")),
			connect.WithClientOptions(opts...),
		),
		getDeviceGroup: connect.NewClient[wrapperspb.StringValue, acquisition.DeviceGroup](
			httpClient,
			baseURL+ApiServiceGetDeviceGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroup")),
			connect.WithClientOptions(opts...),
		),
		addDevicesToGroup: connect.NewClient[acquisition.AddDevicesToGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceAddDevicesToGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("AddDevicesToGroup")),
			connect.WithClientOptions(opts...),
		),
		removeDevicesFromGroup: connect.NewClient[acquisition.RemoveDevicesFromGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRemoveDevicesFromGroupProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RemoveDevicesFromGroup")),
			connect.WithClientOptions(opts...),
		),
		listDeviceGroupDevices: connect.NewClient[acquisition.ListDeviceGroupDevicesRequest, acquisition.ListOfDevice](
			httpClient,
			baseURL+ApiServiceListDeviceGroupDevicesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceGroupDevices")),
			connect.WithClientOptions(opts...),
		),
		listModemPools: connect.NewClient[common.ListSelector, acquisition.ListOfModemPool](
			httpClient,
			baseURL+ApiServiceListModemPoolsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListModemPools")),
			connect.WithClientOptions(opts...),
		),
		getModemPool: connect.NewClient[wrapperspb.StringValue, acquisition.ModemPool](
			httpClient,
			baseURL+ApiServiceGetModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetModemPool")),
			connect.WithClientOptions(opts...),
		),
		createModemPool: connect.NewClient[acquisition.SetModemPoolRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateModemPool")),
			connect.WithClientOptions(opts...),
		),
		updateModemPool: connect.NewClient[acquisition.SetModemPoolRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateModemPool")),
			connect.WithClientOptions(opts...),
		),
		deleteModemPool: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteModemPoolProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteModemPool")),
			connect.WithClientOptions(opts...),
		),
		createModem: connect.NewClient[acquisition.SetModemRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateModem")),
			connect.WithClientOptions(opts...),
		),
		updateModem: connect.NewClient[acquisition.SetModemRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateModem")),
			connect.WithClientOptions(opts...),
		),
		deleteModem: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteModemProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteModem")),
			connect.WithClientOptions(opts...),
		),
		getApplicationConfig: connect.NewClient[emptypb.Empty, system.ApplicationConfigDescriptor](
			httpClient,
			baseURL+ApiServiceGetApplicationConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetApplicationConfig")),
			connect.WithClientOptions(opts...),
		),
		updateApplicationConfig: connect.NewClient[system.ApplicationConfig, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateApplicationConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateApplicationConfig")),
			connect.WithClientOptions(opts...),
		),
		synchronizeComponentConfig: connect.NewClient[system.ComponentConfigDescriptor, system.ComponentConfig](
			httpClient,
			baseURL+ApiServiceSynchronizeComponentConfigProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SynchronizeComponentConfig")),
			connect.WithClientOptions(opts...),
		),
		getDeviceData: connect.NewClient[acquisition.GetDeviceDataRequest, acquisition.DeviceData](
			httpClient,
			baseURL+ApiServiceGetDeviceDataProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceData")),
			connect.WithClientOptions(opts...),
		),
		listDeviceDataInfo: connect.NewClient[common.ListSelector, acquisition.ListOfDeviceDataInfo](
			httpClient,
			baseURL+ApiServiceListDeviceDataInfoProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListDeviceDataInfo")),
			connect.WithClientOptions(opts...),
		),
		getDeviceDataRegisters: connect.NewClient[acquisition.GetDeviceDataRequest, acquisition.RegisterValues](
			httpClient,
			baseURL+ApiServiceGetDeviceDataRegistersProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceDataRegisters")),
			connect.WithClientOptions(opts...),
		),
		getDeviceDataProfiles: connect.NewClient[acquisition.GetDeviceDataRequest, acquisition.ProfileValues](
			httpClient,
			baseURL+ApiServiceGetDeviceDataProfilesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceDataProfiles")),
			connect.WithClientOptions(opts...),
		),
		getDeviceDataIrregularProfiles: connect.NewClient[acquisition.GetDeviceDataRequest, acquisition.IrregularProfileValues](
			httpClient,
			baseURL+ApiServiceGetDeviceDataIrregularProfilesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceDataIrregularProfiles")),
			connect.WithClientOptions(opts...),
		),
		getDeviceEvents: connect.NewClient[acquisition.GetDeviceEventsRequest, acquisition.DeviceEvents](
			httpClient,
			baseURL+ApiServiceGetDeviceEventsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetDeviceEvents")),
			connect.WithClientOptions(opts...),
		),
		createTimeOfUseTable: connect.NewClient[acquisition.CreateTimeOfUseTableRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateTimeOfUseTableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateTimeOfUseTable")),
			connect.WithClientOptions(opts...),
		),
		listTimeOfUseTables: connect.NewClient[common.ListSelector, acquisition.ListOfTimeOfUseTable](
			httpClient,
			baseURL+ApiServiceListTimeOfUseTablesProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListTimeOfUseTables")),
			connect.WithClientOptions(opts...),
		),
		getTimeOfUseTable: connect.NewClient[wrapperspb.StringValue, acquisition.TimeOfUseTable](
			httpClient,
			baseURL+ApiServiceGetTimeOfUseTableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetTimeOfUseTable")),
			connect.WithClientOptions(opts...),
		),
		updateTimeOfUseTable: connect.NewClient[acquisition.TimeOfUseTable, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateTimeOfUseTableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateTimeOfUseTable")),
			connect.WithClientOptions(opts...),
		),
		deleteTimeOfUseTable: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteTimeOfUseTableProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteTimeOfUseTable")),
			connect.WithClientOptions(opts...),
		),
		createCronJob: connect.NewClient[cronjobs.CreateCronJobRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+ApiServiceCreateCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("CreateCronJob")),
			connect.WithClientOptions(opts...),
		),
		listCronJobs: connect.NewClient[common.ListSelector, cronjobs.ListOfCronJob](
			httpClient,
			baseURL+ApiServiceListCronJobsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ListCronJobs")),
			connect.WithClientOptions(opts...),
		),
		getCronJob: connect.NewClient[wrapperspb.StringValue, cronjobs.CronJob](
			httpClient,
			baseURL+ApiServiceGetCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetCronJob")),
			connect.WithClientOptions(opts...),
		),
		updateCronJob: connect.NewClient[cronjobs.CronJob, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateCronJob")),
			connect.WithClientOptions(opts...),
		),
		deleteCronJob: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceDeleteCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("DeleteCronJob")),
			connect.WithClientOptions(opts...),
		),
		runCronJob: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceRunCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("RunCronJob")),
			connect.WithClientOptions(opts...),
		),
		pauseCronJob: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServicePauseCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("PauseCronJob")),
			connect.WithClientOptions(opts...),
		),
		resumeCronJob: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceResumeCronJobProcedure,
			connect.WithSchema(apiServiceMethods.ByName("ResumeCronJob")),
			connect.WithClientOptions(opts...),
		),
		updateObjectFields: connect.NewClient[common.UpdateObjectFieldsRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceUpdateObjectFieldsProcedure,
			connect.WithSchema(apiServiceMethods.ByName("UpdateObjectFields")),
			connect.WithClientOptions(opts...),
		),
		getOpenIdConfiguration: connect.NewClient[emptypb.Empty, system.OpenIdConfiguration](
			httpClient,
			baseURL+ApiServiceGetOpenIdConfigurationProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetOpenIdConfiguration")),
			connect.WithClientOptions(opts...),
		),
		getCryptoSecret: connect.NewClient[crypto.GetCryptoSecretRequest, crypto.CryptoSecrets](
			httpClient,
			baseURL+ApiServiceGetCryptoSecretProcedure,
			connect.WithSchema(apiServiceMethods.ByName("GetCryptoSecret")),
			connect.WithClientOptions(opts...),
		),
		setCryptoSecret: connect.NewClient[crypto.SetCryptoSecretRequest, emptypb.Empty](
			httpClient,
			baseURL+ApiServiceSetCryptoSecretProcedure,
			connect.WithSchema(apiServiceMethods.ByName("SetCryptoSecret")),
			connect.WithClientOptions(opts...),
		),
	}
}

// apiServiceClient implements ApiServiceClient.
type apiServiceClient struct {
	createVariable                                                   *connect.Client[acquisition.CreateVariableRequest, wrapperspb.StringValue]
	listVariables                                                    *connect.Client[common.ListSelector, acquisition.ListOfVariable]
	getVariable                                                      *connect.Client[wrapperspb.StringValue, acquisition.Variable]
	updateVariable                                                   *connect.Client[acquisition.Variable, emptypb.Empty]
	deleteVariable                                                   *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	addRegisterToVariable                                            *connect.Client[acquisition.AddRegisterToVariableRequest, emptypb.Empty]
	removeRegisterFromVariable                                       *connect.Client[acquisition.RemoveRegisterFromVariableRequest, emptypb.Empty]
	createDeviceConfigurationRegister                                *connect.Client[acquisition.CreateDeviceConfigurationRegisterRequest, wrapperspb.StringValue]
	listDeviceConfigurationRegisters                                 *connect.Client[common.ListSelector, acquisition.ListOfDeviceConfigurationRegister]
	getDeviceConfigurationRegister                                   *connect.Client[wrapperspb.StringValue, acquisition.DeviceConfigurationRegister]
	updateDeviceConfigurationRegister                                *connect.Client[acquisition.DeviceConfigurationRegister, emptypb.Empty]
	deleteDeviceConfigurationRegister                                *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	createDeviceConfigurationTemplate                                *connect.Client[acquisition.CreateDeviceConfigurationTemplateRequest, wrapperspb.StringValue]
	listDeviceConfigurationTemplates                                 *connect.Client[common.ListSelector, acquisition.ListOfDeviceConfigurationTemplate]
	getDeviceConfigurationTemplate                                   *connect.Client[wrapperspb.StringValue, acquisition.DeviceConfigurationTemplate]
	updateDeviceConfigurationTemplate                                *connect.Client[acquisition.DeviceConfigurationTemplate, emptypb.Empty]
	deleteDeviceConfigurationTemplate                                *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	addDeviceConfigurationRegisterToDeviceConfigurationTemplate      *connect.Client[acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, emptypb.Empty]
	removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate *connect.Client[acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, emptypb.Empty]
	createFieldDescriptor                                            *connect.Client[common.CreateFieldDescriptorRequest, wrapperspb.StringValue]
	updateFieldDescriptor                                            *connect.Client[common.FieldDescriptor, emptypb.Empty]
	deleteFieldDescriptor                                            *connect.Client[common.FieldDescriptorSelector, emptypb.Empty]
	listFieldDescriptors                                             *connect.Client[emptypb.Empty, common.ListOfFieldDescriptor]
	listFieldDescriptorOptions                                       *connect.Client[common.ListFieldDescriptorOptionsRequest, common.FieldDescriptorOptions]
	listBulks                                                        *connect.Client[common.ListSelector, acquisition.ListOfBulk]
	listBulkJobs                                                     *connect.Client[acquisition.ListBulkJobsRequest, acquisition.ListOfBulkJob]
	getBulkJob                                                       *connect.Client[wrapperspb.StringValue, acquisition.BulkJob]
	updateBulkJob                                                    *connect.Client[common.UpdateMetadata, emptypb.Empty]
	cancelBulk                                                       *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	cancelBulkJobs                                                   *connect.Client[common.ListOfId, emptypb.Empty]
	createProxyBulk                                                  *connect.Client[acquisition.CreateProxyBulkRequest, wrapperspb.StringValue]
	getProxyBulk                                                     *connect.Client[wrapperspb.StringValue, acquisition.ProxyBulk]
	createBulk                                                       *connect.Client[acquisition.CreateBulkRequest, wrapperspb.StringValue]
	getBulk                                                          *connect.Client[wrapperspb.StringValue, acquisition.Bulk]
	updateBulk                                                       *connect.Client[common.UpdateMetadata, emptypb.Empty]
	listDrivers                                                      *connect.Client[common.ListSelector, acquisition.ListOfDriver]
	getDriver                                                        *connect.Client[wrapperspb.StringValue, acquisition.Driver]
	createCommunicationUnit                                          *connect.Client[acquisition.CreateCommunicationUnitRequest, wrapperspb.StringValue]
	updateCommunicationUnit                                          *connect.Client[acquisition.CommunicationUnit, emptypb.Empty]
	listCommunicationUnits                                           *connect.Client[common.ListSelector, acquisition.ListOfCommunicationUnit]
	getCommunicationUnit                                             *connect.Client[wrapperspb.StringValue, acquisition.CommunicationUnit]
	getCommunicationUnitNetworkMap                                   *connect.Client[wrapperspb.StringValue, acquisition.NetworkMap]
	createCommunicationBus                                           *connect.Client[acquisition.CreateCommunicationBusRequest, wrapperspb.StringValue]
	listCommunicationBuses                                           *connect.Client[common.ListSelector, acquisition.ListOfCommunicationBus]
	addCommunicationUnitsToCommunicationBus                          *connect.Client[acquisition.AddCommunicationUnitsToCommunicationBusRequest, emptypb.Empty]
	removeCommunicationUnitsFromCommunicationBus                     *connect.Client[acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest, emptypb.Empty]
	createDevice                                                     *connect.Client[acquisition.CreateDeviceRequest, wrapperspb.StringValue]
	updateDevice                                                     *connect.Client[acquisition.Device, emptypb.Empty]
	listDevices                                                      *connect.Client[common.ListSelector, acquisition.ListOfDevice]
	getDevice                                                        *connect.Client[wrapperspb.StringValue, acquisition.Device]
	getDeviceInfo                                                    *connect.Client[wrapperspb.StringValue, acquisition.DeviceInfo]
	setDeviceCommunicationUnits                                      *connect.Client[acquisition.SetDeviceCommunicationUnitsRequest, emptypb.Empty]
	getDeviceCommunicationUnits                                      *connect.Client[wrapperspb.StringValue, acquisition.ListOfDeviceCommunicationUnit]
	listDeviceCommunicationUnitChanges                               *connect.Client[common.ListSelector, acquisition.ListOfDeviceCommunicationUnitChange]
	getDeviceDeviceGroups                                            *connect.Client[wrapperspb.StringValue, acquisition.ListOfDeviceGroup]
	getDeviceNetworkMap                                              *connect.Client[wrapperspb.StringValue, acquisition.NetworkMap]
	getDeviceBulks                                                   *connect.Client[acquisition.GetDeviceBulksRequest, acquisition.DeviceBulks]
	createDeviceGroup                                                *connect.Client[acquisition.CreateDeviceGroupRequest, wrapperspb.StringValue]
	listDeviceGroups                                                 *connect.Client[common.ListSelector, acquisition.ListOfDeviceGroup]
	getDeviceGroup                                                   *connect.Client[wrapperspb.StringValue, acquisition.DeviceGroup]
	addDevicesToGroup                                                *connect.Client[acquisition.AddDevicesToGroupRequest, emptypb.Empty]
	removeDevicesFromGroup                                           *connect.Client[acquisition.RemoveDevicesFromGroupRequest, emptypb.Empty]
	listDeviceGroupDevices                                           *connect.Client[acquisition.ListDeviceGroupDevicesRequest, acquisition.ListOfDevice]
	listModemPools                                                   *connect.Client[common.ListSelector, acquisition.ListOfModemPool]
	getModemPool                                                     *connect.Client[wrapperspb.StringValue, acquisition.ModemPool]
	createModemPool                                                  *connect.Client[acquisition.SetModemPoolRequest, wrapperspb.StringValue]
	updateModemPool                                                  *connect.Client[acquisition.SetModemPoolRequest, emptypb.Empty]
	deleteModemPool                                                  *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	createModem                                                      *connect.Client[acquisition.SetModemRequest, wrapperspb.StringValue]
	updateModem                                                      *connect.Client[acquisition.SetModemRequest, emptypb.Empty]
	deleteModem                                                      *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	getApplicationConfig                                             *connect.Client[emptypb.Empty, system.ApplicationConfigDescriptor]
	updateApplicationConfig                                          *connect.Client[system.ApplicationConfig, emptypb.Empty]
	synchronizeComponentConfig                                       *connect.Client[system.ComponentConfigDescriptor, system.ComponentConfig]
	getDeviceData                                                    *connect.Client[acquisition.GetDeviceDataRequest, acquisition.DeviceData]
	listDeviceDataInfo                                               *connect.Client[common.ListSelector, acquisition.ListOfDeviceDataInfo]
	getDeviceDataRegisters                                           *connect.Client[acquisition.GetDeviceDataRequest, acquisition.RegisterValues]
	getDeviceDataProfiles                                            *connect.Client[acquisition.GetDeviceDataRequest, acquisition.ProfileValues]
	getDeviceDataIrregularProfiles                                   *connect.Client[acquisition.GetDeviceDataRequest, acquisition.IrregularProfileValues]
	getDeviceEvents                                                  *connect.Client[acquisition.GetDeviceEventsRequest, acquisition.DeviceEvents]
	createTimeOfUseTable                                             *connect.Client[acquisition.CreateTimeOfUseTableRequest, wrapperspb.StringValue]
	listTimeOfUseTables                                              *connect.Client[common.ListSelector, acquisition.ListOfTimeOfUseTable]
	getTimeOfUseTable                                                *connect.Client[wrapperspb.StringValue, acquisition.TimeOfUseTable]
	updateTimeOfUseTable                                             *connect.Client[acquisition.TimeOfUseTable, emptypb.Empty]
	deleteTimeOfUseTable                                             *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	createCronJob                                                    *connect.Client[cronjobs.CreateCronJobRequest, wrapperspb.StringValue]
	listCronJobs                                                     *connect.Client[common.ListSelector, cronjobs.ListOfCronJob]
	getCronJob                                                       *connect.Client[wrapperspb.StringValue, cronjobs.CronJob]
	updateCronJob                                                    *connect.Client[cronjobs.CronJob, emptypb.Empty]
	deleteCronJob                                                    *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	runCronJob                                                       *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	pauseCronJob                                                     *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	resumeCronJob                                                    *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	updateObjectFields                                               *connect.Client[common.UpdateObjectFieldsRequest, emptypb.Empty]
	getOpenIdConfiguration                                           *connect.Client[emptypb.Empty, system.OpenIdConfiguration]
	getCryptoSecret                                                  *connect.Client[crypto.GetCryptoSecretRequest, crypto.CryptoSecrets]
	setCryptoSecret                                                  *connect.Client[crypto.SetCryptoSecretRequest, emptypb.Empty]
}

// CreateVariable calls io.clbs.openhes.services.svcapi.ApiService.CreateVariable.
func (c *apiServiceClient) CreateVariable(ctx context.Context, req *connect.Request[acquisition.CreateVariableRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createVariable.CallUnary(ctx, req)
}

// ListVariables calls io.clbs.openhes.services.svcapi.ApiService.ListVariables.
func (c *apiServiceClient) ListVariables(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfVariable], error) {
	return c.listVariables.CallUnary(ctx, req)
}

// GetVariable calls io.clbs.openhes.services.svcapi.ApiService.GetVariable.
func (c *apiServiceClient) GetVariable(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Variable], error) {
	return c.getVariable.CallUnary(ctx, req)
}

// UpdateVariable calls io.clbs.openhes.services.svcapi.ApiService.UpdateVariable.
func (c *apiServiceClient) UpdateVariable(ctx context.Context, req *connect.Request[acquisition.Variable]) (*connect.Response[emptypb.Empty], error) {
	return c.updateVariable.CallUnary(ctx, req)
}

// DeleteVariable calls io.clbs.openhes.services.svcapi.ApiService.DeleteVariable.
func (c *apiServiceClient) DeleteVariable(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteVariable.CallUnary(ctx, req)
}

// AddRegisterToVariable calls io.clbs.openhes.services.svcapi.ApiService.AddRegisterToVariable.
func (c *apiServiceClient) AddRegisterToVariable(ctx context.Context, req *connect.Request[acquisition.AddRegisterToVariableRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addRegisterToVariable.CallUnary(ctx, req)
}

// RemoveRegisterFromVariable calls
// io.clbs.openhes.services.svcapi.ApiService.RemoveRegisterFromVariable.
func (c *apiServiceClient) RemoveRegisterFromVariable(ctx context.Context, req *connect.Request[acquisition.RemoveRegisterFromVariableRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeRegisterFromVariable.CallUnary(ctx, req)
}

// CreateDeviceConfigurationRegister calls
// io.clbs.openhes.services.svcapi.ApiService.CreateDeviceConfigurationRegister.
func (c *apiServiceClient) CreateDeviceConfigurationRegister(ctx context.Context, req *connect.Request[acquisition.CreateDeviceConfigurationRegisterRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createDeviceConfigurationRegister.CallUnary(ctx, req)
}

// ListDeviceConfigurationRegisters calls
// io.clbs.openhes.services.svcapi.ApiService.ListDeviceConfigurationRegisters.
func (c *apiServiceClient) ListDeviceConfigurationRegisters(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationRegister], error) {
	return c.listDeviceConfigurationRegisters.CallUnary(ctx, req)
}

// GetDeviceConfigurationRegister calls
// io.clbs.openhes.services.svcapi.ApiService.GetDeviceConfigurationRegister.
func (c *apiServiceClient) GetDeviceConfigurationRegister(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationRegister], error) {
	return c.getDeviceConfigurationRegister.CallUnary(ctx, req)
}

// UpdateDeviceConfigurationRegister calls
// io.clbs.openhes.services.svcapi.ApiService.UpdateDeviceConfigurationRegister.
func (c *apiServiceClient) UpdateDeviceConfigurationRegister(ctx context.Context, req *connect.Request[acquisition.DeviceConfigurationRegister]) (*connect.Response[emptypb.Empty], error) {
	return c.updateDeviceConfigurationRegister.CallUnary(ctx, req)
}

// DeleteDeviceConfigurationRegister calls
// io.clbs.openhes.services.svcapi.ApiService.DeleteDeviceConfigurationRegister.
func (c *apiServiceClient) DeleteDeviceConfigurationRegister(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDeviceConfigurationRegister.CallUnary(ctx, req)
}

// CreateDeviceConfigurationTemplate calls
// io.clbs.openhes.services.svcapi.ApiService.CreateDeviceConfigurationTemplate.
func (c *apiServiceClient) CreateDeviceConfigurationTemplate(ctx context.Context, req *connect.Request[acquisition.CreateDeviceConfigurationTemplateRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createDeviceConfigurationTemplate.CallUnary(ctx, req)
}

// ListDeviceConfigurationTemplates calls
// io.clbs.openhes.services.svcapi.ApiService.ListDeviceConfigurationTemplates.
func (c *apiServiceClient) ListDeviceConfigurationTemplates(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationTemplate], error) {
	return c.listDeviceConfigurationTemplates.CallUnary(ctx, req)
}

// GetDeviceConfigurationTemplate calls
// io.clbs.openhes.services.svcapi.ApiService.GetDeviceConfigurationTemplate.
func (c *apiServiceClient) GetDeviceConfigurationTemplate(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationTemplate], error) {
	return c.getDeviceConfigurationTemplate.CallUnary(ctx, req)
}

// UpdateDeviceConfigurationTemplate calls
// io.clbs.openhes.services.svcapi.ApiService.UpdateDeviceConfigurationTemplate.
func (c *apiServiceClient) UpdateDeviceConfigurationTemplate(ctx context.Context, req *connect.Request[acquisition.DeviceConfigurationTemplate]) (*connect.Response[emptypb.Empty], error) {
	return c.updateDeviceConfigurationTemplate.CallUnary(ctx, req)
}

// DeleteDeviceConfigurationTemplate calls
// io.clbs.openhes.services.svcapi.ApiService.DeleteDeviceConfigurationTemplate.
func (c *apiServiceClient) DeleteDeviceConfigurationTemplate(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteDeviceConfigurationTemplate.CallUnary(ctx, req)
}

// AddDeviceConfigurationRegisterToDeviceConfigurationTemplate calls
// io.clbs.openhes.services.svcapi.ApiService.AddDeviceConfigurationRegisterToDeviceConfigurationTemplate.
func (c *apiServiceClient) AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context, req *connect.Request[acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addDeviceConfigurationRegisterToDeviceConfigurationTemplate.CallUnary(ctx, req)
}

// RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate calls
// io.clbs.openhes.services.svcapi.ApiService.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate.
func (c *apiServiceClient) RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context, req *connect.Request[acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate.CallUnary(ctx, req)
}

// CreateFieldDescriptor calls io.clbs.openhes.services.svcapi.ApiService.CreateFieldDescriptor.
func (c *apiServiceClient) CreateFieldDescriptor(ctx context.Context, req *connect.Request[common.CreateFieldDescriptorRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createFieldDescriptor.CallUnary(ctx, req)
}

// UpdateFieldDescriptor calls io.clbs.openhes.services.svcapi.ApiService.UpdateFieldDescriptor.
func (c *apiServiceClient) UpdateFieldDescriptor(ctx context.Context, req *connect.Request[common.FieldDescriptor]) (*connect.Response[emptypb.Empty], error) {
	return c.updateFieldDescriptor.CallUnary(ctx, req)
}

// DeleteFieldDescriptor calls io.clbs.openhes.services.svcapi.ApiService.DeleteFieldDescriptor.
func (c *apiServiceClient) DeleteFieldDescriptor(ctx context.Context, req *connect.Request[common.FieldDescriptorSelector]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteFieldDescriptor.CallUnary(ctx, req)
}

// ListFieldDescriptors calls io.clbs.openhes.services.svcapi.ApiService.ListFieldDescriptors.
func (c *apiServiceClient) ListFieldDescriptors(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[common.ListOfFieldDescriptor], error) {
	return c.listFieldDescriptors.CallUnary(ctx, req)
}

// ListFieldDescriptorOptions calls
// io.clbs.openhes.services.svcapi.ApiService.ListFieldDescriptorOptions.
func (c *apiServiceClient) ListFieldDescriptorOptions(ctx context.Context, req *connect.Request[common.ListFieldDescriptorOptionsRequest]) (*connect.Response[common.FieldDescriptorOptions], error) {
	return c.listFieldDescriptorOptions.CallUnary(ctx, req)
}

// ListBulks calls io.clbs.openhes.services.svcapi.ApiService.ListBulks.
func (c *apiServiceClient) ListBulks(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error) {
	return c.listBulks.CallUnary(ctx, req)
}

// ListBulkJobs calls io.clbs.openhes.services.svcapi.ApiService.ListBulkJobs.
func (c *apiServiceClient) ListBulkJobs(ctx context.Context, req *connect.Request[acquisition.ListBulkJobsRequest]) (*connect.Response[acquisition.ListOfBulkJob], error) {
	return c.listBulkJobs.CallUnary(ctx, req)
}

// GetBulkJob calls io.clbs.openhes.services.svcapi.ApiService.GetBulkJob.
func (c *apiServiceClient) GetBulkJob(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.BulkJob], error) {
	return c.getBulkJob.CallUnary(ctx, req)
}

// UpdateBulkJob calls io.clbs.openhes.services.svcapi.ApiService.UpdateBulkJob.
func (c *apiServiceClient) UpdateBulkJob(ctx context.Context, req *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error) {
	return c.updateBulkJob.CallUnary(ctx, req)
}

// CancelBulk calls io.clbs.openhes.services.svcapi.ApiService.CancelBulk.
func (c *apiServiceClient) CancelBulk(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelBulk.CallUnary(ctx, req)
}

// CancelBulkJobs calls io.clbs.openhes.services.svcapi.ApiService.CancelBulkJobs.
func (c *apiServiceClient) CancelBulkJobs(ctx context.Context, req *connect.Request[common.ListOfId]) (*connect.Response[emptypb.Empty], error) {
	return c.cancelBulkJobs.CallUnary(ctx, req)
}

// CreateProxyBulk calls io.clbs.openhes.services.svcapi.ApiService.CreateProxyBulk.
func (c *apiServiceClient) CreateProxyBulk(ctx context.Context, req *connect.Request[acquisition.CreateProxyBulkRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createProxyBulk.CallUnary(ctx, req)
}

// GetProxyBulk calls io.clbs.openhes.services.svcapi.ApiService.GetProxyBulk.
func (c *apiServiceClient) GetProxyBulk(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ProxyBulk], error) {
	return c.getProxyBulk.CallUnary(ctx, req)
}

// CreateBulk calls io.clbs.openhes.services.svcapi.ApiService.CreateBulk.
func (c *apiServiceClient) CreateBulk(ctx context.Context, req *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createBulk.CallUnary(ctx, req)
}

// GetBulk calls io.clbs.openhes.services.svcapi.ApiService.GetBulk.
func (c *apiServiceClient) GetBulk(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error) {
	return c.getBulk.CallUnary(ctx, req)
}

// UpdateBulk calls io.clbs.openhes.services.svcapi.ApiService.UpdateBulk.
func (c *apiServiceClient) UpdateBulk(ctx context.Context, req *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error) {
	return c.updateBulk.CallUnary(ctx, req)
}

// ListDrivers calls io.clbs.openhes.services.svcapi.ApiService.ListDrivers.
func (c *apiServiceClient) ListDrivers(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error) {
	return c.listDrivers.CallUnary(ctx, req)
}

// GetDriver calls io.clbs.openhes.services.svcapi.ApiService.GetDriver.
func (c *apiServiceClient) GetDriver(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error) {
	return c.getDriver.CallUnary(ctx, req)
}

// CreateCommunicationUnit calls io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationUnit.
func (c *apiServiceClient) CreateCommunicationUnit(ctx context.Context, req *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createCommunicationUnit.CallUnary(ctx, req)
}

// UpdateCommunicationUnit calls io.clbs.openhes.services.svcapi.ApiService.UpdateCommunicationUnit.
func (c *apiServiceClient) UpdateCommunicationUnit(ctx context.Context, req *connect.Request[acquisition.CommunicationUnit]) (*connect.Response[emptypb.Empty], error) {
	return c.updateCommunicationUnit.CallUnary(ctx, req)
}

// ListCommunicationUnits calls io.clbs.openhes.services.svcapi.ApiService.ListCommunicationUnits.
func (c *apiServiceClient) ListCommunicationUnits(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error) {
	return c.listCommunicationUnits.CallUnary(ctx, req)
}

// GetCommunicationUnit calls io.clbs.openhes.services.svcapi.ApiService.GetCommunicationUnit.
func (c *apiServiceClient) GetCommunicationUnit(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error) {
	return c.getCommunicationUnit.CallUnary(ctx, req)
}

// GetCommunicationUnitNetworkMap calls
// io.clbs.openhes.services.svcapi.ApiService.GetCommunicationUnitNetworkMap.
func (c *apiServiceClient) GetCommunicationUnitNetworkMap(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error) {
	return c.getCommunicationUnitNetworkMap.CallUnary(ctx, req)
}

// CreateCommunicationBus calls io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationBus.
func (c *apiServiceClient) CreateCommunicationBus(ctx context.Context, req *connect.Request[acquisition.CreateCommunicationBusRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createCommunicationBus.CallUnary(ctx, req)
}

// ListCommunicationBuses calls io.clbs.openhes.services.svcapi.ApiService.ListCommunicationBuses.
func (c *apiServiceClient) ListCommunicationBuses(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationBus], error) {
	return c.listCommunicationBuses.CallUnary(ctx, req)
}

// AddCommunicationUnitsToCommunicationBus calls
// io.clbs.openhes.services.svcapi.ApiService.AddCommunicationUnitsToCommunicationBus.
func (c *apiServiceClient) AddCommunicationUnitsToCommunicationBus(ctx context.Context, req *connect.Request[acquisition.AddCommunicationUnitsToCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addCommunicationUnitsToCommunicationBus.CallUnary(ctx, req)
}

// RemoveCommunicationUnitsFromCommunicationBus calls
// io.clbs.openhes.services.svcapi.ApiService.RemoveCommunicationUnitsFromCommunicationBus.
func (c *apiServiceClient) RemoveCommunicationUnitsFromCommunicationBus(ctx context.Context, req *connect.Request[acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeCommunicationUnitsFromCommunicationBus.CallUnary(ctx, req)
}

// CreateDevice calls io.clbs.openhes.services.svcapi.ApiService.CreateDevice.
func (c *apiServiceClient) CreateDevice(ctx context.Context, req *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createDevice.CallUnary(ctx, req)
}

// UpdateDevice calls io.clbs.openhes.services.svcapi.ApiService.UpdateDevice.
func (c *apiServiceClient) UpdateDevice(ctx context.Context, req *connect.Request[acquisition.Device]) (*connect.Response[emptypb.Empty], error) {
	return c.updateDevice.CallUnary(ctx, req)
}

// ListDevices calls io.clbs.openhes.services.svcapi.ApiService.ListDevices.
func (c *apiServiceClient) ListDevices(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// GetDevice calls io.clbs.openhes.services.svcapi.ApiService.GetDevice.
func (c *apiServiceClient) GetDevice(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error) {
	return c.getDevice.CallUnary(ctx, req)
}

// GetDeviceInfo calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceInfo.
func (c *apiServiceClient) GetDeviceInfo(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceInfo], error) {
	return c.getDeviceInfo.CallUnary(ctx, req)
}

// SetDeviceCommunicationUnits calls
// io.clbs.openhes.services.svcapi.ApiService.SetDeviceCommunicationUnits.
func (c *apiServiceClient) SetDeviceCommunicationUnits(ctx context.Context, req *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setDeviceCommunicationUnits.CallUnary(ctx, req)
}

// GetDeviceCommunicationUnits calls
// io.clbs.openhes.services.svcapi.ApiService.GetDeviceCommunicationUnits.
func (c *apiServiceClient) GetDeviceCommunicationUnits(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error) {
	return c.getDeviceCommunicationUnits.CallUnary(ctx, req)
}

// ListDeviceCommunicationUnitChanges calls
// io.clbs.openhes.services.svcapi.ApiService.ListDeviceCommunicationUnitChanges.
func (c *apiServiceClient) ListDeviceCommunicationUnitChanges(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnitChange], error) {
	return c.listDeviceCommunicationUnitChanges.CallUnary(ctx, req)
}

// GetDeviceDeviceGroups calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceDeviceGroups.
func (c *apiServiceClient) GetDeviceDeviceGroups(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceGroup], error) {
	return c.getDeviceDeviceGroups.CallUnary(ctx, req)
}

// GetDeviceNetworkMap calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceNetworkMap.
func (c *apiServiceClient) GetDeviceNetworkMap(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error) {
	return c.getDeviceNetworkMap.CallUnary(ctx, req)
}

// GetDeviceBulks calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceBulks.
func (c *apiServiceClient) GetDeviceBulks(ctx context.Context, req *connect.Request[acquisition.GetDeviceBulksRequest]) (*connect.Response[acquisition.DeviceBulks], error) {
	return c.getDeviceBulks.CallUnary(ctx, req)
}

// CreateDeviceGroup calls io.clbs.openhes.services.svcapi.ApiService.CreateDeviceGroup.
func (c *apiServiceClient) CreateDeviceGroup(ctx context.Context, req *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createDeviceGroup.CallUnary(ctx, req)
}

// ListDeviceGroups calls io.clbs.openhes.services.svcapi.ApiService.ListDeviceGroups.
func (c *apiServiceClient) ListDeviceGroups(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error) {
	return c.listDeviceGroups.CallUnary(ctx, req)
}

// GetDeviceGroup calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceGroup.
func (c *apiServiceClient) GetDeviceGroup(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error) {
	return c.getDeviceGroup.CallUnary(ctx, req)
}

// AddDevicesToGroup calls io.clbs.openhes.services.svcapi.ApiService.AddDevicesToGroup.
func (c *apiServiceClient) AddDevicesToGroup(ctx context.Context, req *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.addDevicesToGroup.CallUnary(ctx, req)
}

// RemoveDevicesFromGroup calls io.clbs.openhes.services.svcapi.ApiService.RemoveDevicesFromGroup.
func (c *apiServiceClient) RemoveDevicesFromGroup(ctx context.Context, req *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeDevicesFromGroup.CallUnary(ctx, req)
}

// ListDeviceGroupDevices calls io.clbs.openhes.services.svcapi.ApiService.ListDeviceGroupDevices.
func (c *apiServiceClient) ListDeviceGroupDevices(ctx context.Context, req *connect.Request[acquisition.ListDeviceGroupDevicesRequest]) (*connect.Response[acquisition.ListOfDevice], error) {
	return c.listDeviceGroupDevices.CallUnary(ctx, req)
}

// ListModemPools calls io.clbs.openhes.services.svcapi.ApiService.ListModemPools.
func (c *apiServiceClient) ListModemPools(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error) {
	return c.listModemPools.CallUnary(ctx, req)
}

// GetModemPool calls io.clbs.openhes.services.svcapi.ApiService.GetModemPool.
func (c *apiServiceClient) GetModemPool(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error) {
	return c.getModemPool.CallUnary(ctx, req)
}

// CreateModemPool calls io.clbs.openhes.services.svcapi.ApiService.CreateModemPool.
func (c *apiServiceClient) CreateModemPool(ctx context.Context, req *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createModemPool.CallUnary(ctx, req)
}

// UpdateModemPool calls io.clbs.openhes.services.svcapi.ApiService.UpdateModemPool.
func (c *apiServiceClient) UpdateModemPool(ctx context.Context, req *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateModemPool.CallUnary(ctx, req)
}

// DeleteModemPool calls io.clbs.openhes.services.svcapi.ApiService.DeleteModemPool.
func (c *apiServiceClient) DeleteModemPool(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteModemPool.CallUnary(ctx, req)
}

// CreateModem calls io.clbs.openhes.services.svcapi.ApiService.CreateModem.
func (c *apiServiceClient) CreateModem(ctx context.Context, req *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createModem.CallUnary(ctx, req)
}

// UpdateModem calls io.clbs.openhes.services.svcapi.ApiService.UpdateModem.
func (c *apiServiceClient) UpdateModem(ctx context.Context, req *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateModem.CallUnary(ctx, req)
}

// DeleteModem calls io.clbs.openhes.services.svcapi.ApiService.DeleteModem.
func (c *apiServiceClient) DeleteModem(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteModem.CallUnary(ctx, req)
}

// GetApplicationConfig calls io.clbs.openhes.services.svcapi.ApiService.GetApplicationConfig.
func (c *apiServiceClient) GetApplicationConfig(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[system.ApplicationConfigDescriptor], error) {
	return c.getApplicationConfig.CallUnary(ctx, req)
}

// UpdateApplicationConfig calls io.clbs.openhes.services.svcapi.ApiService.UpdateApplicationConfig.
func (c *apiServiceClient) UpdateApplicationConfig(ctx context.Context, req *connect.Request[system.ApplicationConfig]) (*connect.Response[emptypb.Empty], error) {
	return c.updateApplicationConfig.CallUnary(ctx, req)
}

// SynchronizeComponentConfig calls
// io.clbs.openhes.services.svcapi.ApiService.SynchronizeComponentConfig.
func (c *apiServiceClient) SynchronizeComponentConfig(ctx context.Context, req *connect.Request[system.ComponentConfigDescriptor]) (*connect.Response[system.ComponentConfig], error) {
	return c.synchronizeComponentConfig.CallUnary(ctx, req)
}

// GetDeviceData calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceData.
func (c *apiServiceClient) GetDeviceData(ctx context.Context, req *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.Response[acquisition.DeviceData], error) {
	return c.getDeviceData.CallUnary(ctx, req)
}

// ListDeviceDataInfo calls io.clbs.openhes.services.svcapi.ApiService.ListDeviceDataInfo.
func (c *apiServiceClient) ListDeviceDataInfo(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceDataInfo], error) {
	return c.listDeviceDataInfo.CallUnary(ctx, req)
}

// GetDeviceDataRegisters calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceDataRegisters.
func (c *apiServiceClient) GetDeviceDataRegisters(ctx context.Context, req *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.ServerStreamForClient[acquisition.RegisterValues], error) {
	return c.getDeviceDataRegisters.CallServerStream(ctx, req)
}

// GetDeviceDataProfiles calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceDataProfiles.
func (c *apiServiceClient) GetDeviceDataProfiles(ctx context.Context, req *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.ServerStreamForClient[acquisition.ProfileValues], error) {
	return c.getDeviceDataProfiles.CallServerStream(ctx, req)
}

// GetDeviceDataIrregularProfiles calls
// io.clbs.openhes.services.svcapi.ApiService.GetDeviceDataIrregularProfiles.
func (c *apiServiceClient) GetDeviceDataIrregularProfiles(ctx context.Context, req *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.ServerStreamForClient[acquisition.IrregularProfileValues], error) {
	return c.getDeviceDataIrregularProfiles.CallServerStream(ctx, req)
}

// GetDeviceEvents calls io.clbs.openhes.services.svcapi.ApiService.GetDeviceEvents.
func (c *apiServiceClient) GetDeviceEvents(ctx context.Context, req *connect.Request[acquisition.GetDeviceEventsRequest]) (*connect.Response[acquisition.DeviceEvents], error) {
	return c.getDeviceEvents.CallUnary(ctx, req)
}

// CreateTimeOfUseTable calls io.clbs.openhes.services.svcapi.ApiService.CreateTimeOfUseTable.
func (c *apiServiceClient) CreateTimeOfUseTable(ctx context.Context, req *connect.Request[acquisition.CreateTimeOfUseTableRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createTimeOfUseTable.CallUnary(ctx, req)
}

// ListTimeOfUseTables calls io.clbs.openhes.services.svcapi.ApiService.ListTimeOfUseTables.
func (c *apiServiceClient) ListTimeOfUseTables(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfTimeOfUseTable], error) {
	return c.listTimeOfUseTables.CallUnary(ctx, req)
}

// GetTimeOfUseTable calls io.clbs.openhes.services.svcapi.ApiService.GetTimeOfUseTable.
func (c *apiServiceClient) GetTimeOfUseTable(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.TimeOfUseTable], error) {
	return c.getTimeOfUseTable.CallUnary(ctx, req)
}

// UpdateTimeOfUseTable calls io.clbs.openhes.services.svcapi.ApiService.UpdateTimeOfUseTable.
func (c *apiServiceClient) UpdateTimeOfUseTable(ctx context.Context, req *connect.Request[acquisition.TimeOfUseTable]) (*connect.Response[emptypb.Empty], error) {
	return c.updateTimeOfUseTable.CallUnary(ctx, req)
}

// DeleteTimeOfUseTable calls io.clbs.openhes.services.svcapi.ApiService.DeleteTimeOfUseTable.
func (c *apiServiceClient) DeleteTimeOfUseTable(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteTimeOfUseTable.CallUnary(ctx, req)
}

// CreateCronJob calls io.clbs.openhes.services.svcapi.ApiService.CreateCronJob.
func (c *apiServiceClient) CreateCronJob(ctx context.Context, req *connect.Request[cronjobs.CreateCronJobRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.createCronJob.CallUnary(ctx, req)
}

// ListCronJobs calls io.clbs.openhes.services.svcapi.ApiService.ListCronJobs.
func (c *apiServiceClient) ListCronJobs(ctx context.Context, req *connect.Request[common.ListSelector]) (*connect.Response[cronjobs.ListOfCronJob], error) {
	return c.listCronJobs.CallUnary(ctx, req)
}

// GetCronJob calls io.clbs.openhes.services.svcapi.ApiService.GetCronJob.
func (c *apiServiceClient) GetCronJob(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[cronjobs.CronJob], error) {
	return c.getCronJob.CallUnary(ctx, req)
}

// UpdateCronJob calls io.clbs.openhes.services.svcapi.ApiService.UpdateCronJob.
func (c *apiServiceClient) UpdateCronJob(ctx context.Context, req *connect.Request[cronjobs.CronJob]) (*connect.Response[emptypb.Empty], error) {
	return c.updateCronJob.CallUnary(ctx, req)
}

// DeleteCronJob calls io.clbs.openhes.services.svcapi.ApiService.DeleteCronJob.
func (c *apiServiceClient) DeleteCronJob(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteCronJob.CallUnary(ctx, req)
}

// RunCronJob calls io.clbs.openhes.services.svcapi.ApiService.RunCronJob.
func (c *apiServiceClient) RunCronJob(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.runCronJob.CallUnary(ctx, req)
}

// PauseCronJob calls io.clbs.openhes.services.svcapi.ApiService.PauseCronJob.
func (c *apiServiceClient) PauseCronJob(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.pauseCronJob.CallUnary(ctx, req)
}

// ResumeCronJob calls io.clbs.openhes.services.svcapi.ApiService.ResumeCronJob.
func (c *apiServiceClient) ResumeCronJob(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.resumeCronJob.CallUnary(ctx, req)
}

// UpdateObjectFields calls io.clbs.openhes.services.svcapi.ApiService.UpdateObjectFields.
func (c *apiServiceClient) UpdateObjectFields(ctx context.Context, req *connect.Request[common.UpdateObjectFieldsRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateObjectFields.CallUnary(ctx, req)
}

// GetOpenIdConfiguration calls io.clbs.openhes.services.svcapi.ApiService.GetOpenIdConfiguration.
func (c *apiServiceClient) GetOpenIdConfiguration(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[system.OpenIdConfiguration], error) {
	return c.getOpenIdConfiguration.CallUnary(ctx, req)
}

// GetCryptoSecret calls io.clbs.openhes.services.svcapi.ApiService.GetCryptoSecret.
func (c *apiServiceClient) GetCryptoSecret(ctx context.Context, req *connect.Request[crypto.GetCryptoSecretRequest]) (*connect.Response[crypto.CryptoSecrets], error) {
	return c.getCryptoSecret.CallUnary(ctx, req)
}

// SetCryptoSecret calls io.clbs.openhes.services.svcapi.ApiService.SetCryptoSecret.
func (c *apiServiceClient) SetCryptoSecret(ctx context.Context, req *connect.Request[crypto.SetCryptoSecretRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.setCryptoSecret.CallUnary(ctx, req)
}

// ApiServiceHandler is an implementation of the io.clbs.openhes.services.svcapi.ApiService service.
type ApiServiceHandler interface {
	// @group: Variables
	// Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
	CreateVariable(context.Context, *connect.Request[acquisition.CreateVariableRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Variables
	ListVariables(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfVariable], error)
	// @group: Variables
	GetVariable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Variable], error)
	// @group: Variables
	UpdateVariable(context.Context, *connect.Request[acquisition.Variable]) (*connect.Response[emptypb.Empty], error)
	// @group: Variables
	DeleteVariable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Variables
	AddRegisterToVariable(context.Context, *connect.Request[acquisition.AddRegisterToVariableRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Variables
	RemoveRegisterFromVariable(context.Context, *connect.Request[acquisition.RemoveRegisterFromVariableRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Register
	// Creates a new register. The register object holds the information about the single device register.
	CreateDeviceConfigurationRegister(context.Context, *connect.Request[acquisition.CreateDeviceConfigurationRegisterRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Device Configuration Register
	ListDeviceConfigurationRegisters(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationRegister], error)
	// @group: Device Configuration Register
	GetDeviceConfigurationRegister(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationRegister], error)
	// @group: Device Configuration Register
	UpdateDeviceConfigurationRegister(context.Context, *connect.Request[acquisition.DeviceConfigurationRegister]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Register
	DeleteDeviceConfigurationRegister(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	CreateDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.CreateDeviceConfigurationTemplateRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Device Configuration Templates
	ListDeviceConfigurationTemplates(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationTemplate], error)
	// @group: Device Configuration Templates
	GetDeviceConfigurationTemplate(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationTemplate], error)
	// @group: Device Configuration Templates
	UpdateDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.DeviceConfigurationTemplate]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	DeleteDeviceConfigurationTemplate(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Device Configuration Templates
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Fields
	// The method to create a new field descriptor user-defined field descriptor.
	CreateFieldDescriptor(context.Context, *connect.Request[common.CreateFieldDescriptorRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Fields
	// The method to update the field descriptor.
	UpdateFieldDescriptor(context.Context, *connect.Request[common.FieldDescriptor]) (*connect.Response[emptypb.Empty], error)
	// @group: Fields
	// The method to delete the field descriptor.
	DeleteFieldDescriptor(context.Context, *connect.Request[common.FieldDescriptorSelector]) (*connect.Response[emptypb.Empty], error)
	// @group: Fields
	// The method to get the list of fields.
	ListFieldDescriptors(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[common.ListOfFieldDescriptor], error)
	// @group: Fields
	// The method to get the options for the field descriptor.
	ListFieldDescriptorOptions(context.Context, *connect.Request[common.ListFieldDescriptorOptionsRequest]) (*connect.Response[common.FieldDescriptorOptions], error)
	// @group: Bulks
	// Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
	// The list contains both the proxy bulks and the regular bulks.
	ListBulks(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error)
	// @group: Bulks
	// Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
	// The listing can be used for both proxy bulks and regular bulks.
	ListBulkJobs(context.Context, *connect.Request[acquisition.ListBulkJobsRequest]) (*connect.Response[acquisition.ListOfBulkJob], error)
	// @group: Bulks
	// Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
	GetBulkJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.BulkJob], error)
	// @group: Bulks
	// Updates the job metadata. The metadata is used to store additional information about the job.
	UpdateBulkJob(context.Context, *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
	CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// Cancels the job(s) identified by the job identifier(s).
	CancelBulkJobs(context.Context, *connect.Request[common.ListOfId]) (*connect.Response[emptypb.Empty], error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
	CreateProxyBulk(context.Context, *connect.Request[acquisition.CreateProxyBulkRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Bulks
	// Retrieves the proxy bulk info and status.
	GetProxyBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ProxyBulk], error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
	CreateBulk(context.Context, *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error)
	// @group: Bulks
	// Updates the bulk metadata. The metadata is used to store additional information about the job.
	UpdateBulk(context.Context, *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	ListDrivers(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error)
	// @group: Driver Info
	// Retrieves the driver.
	GetDriver(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationunit
	// The method updates the communication unit. The parameter contains the communication unit specification.
	UpdateCommunicationUnit(context.Context, *connect.Request[acquisition.CommunicationUnit]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnits(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetCommunicationUnitNetworkMap(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error)
	// @group: Devices
	// @tag: communicationbus
	CreateCommunicationBus(context.Context, *connect.Request[acquisition.CreateCommunicationBusRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: communicationbus
	ListCommunicationBuses(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationBus], error)
	// @group: Devices
	// @tag: communicationbus
	AddCommunicationUnitsToCommunicationBus(context.Context, *connect.Request[acquisition.AddCommunicationUnitsToCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: communicationbus
	RemoveCommunicationUnitsFromCommunicationBus(context.Context, *connect.Request[acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to register a new device. The parameter contains the device specification.
	CreateDevice(context.Context, *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: device
	// The method updates the device. The parameter contains the device specification.
	UpdateDevice(context.Context, *connect.Request[acquisition.Device]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error)
	// @group: Devices
	// The method to stream out profile-typed device info.
	GetDeviceInfo(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceInfo], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDeviceCommunicationUnits(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the list of device communication unit changes.
	ListDeviceCommunicationUnitChanges(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnitChange], error)
	// @group: Devices
	// @tag: device
	// The method returns a list of device groups that contain the device. The parameter contains the device identifier.
	GetDeviceDeviceGroups(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceGroup], error)
	// @group: Devices
	// @tag: device
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetDeviceNetworkMap(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error)
	// @group: Bulks
	// Retrieves the list of bulk jobs related to given device in the specified time range. All the parameters are required.
	GetDeviceBulks(context.Context, *connect.Request[acquisition.GetDeviceBulksRequest]) (*connect.Response[acquisition.DeviceBulks], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	ListDeviceGroups(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: devicegroup
	ListDeviceGroupDevices(context.Context, *connect.Request[acquisition.ListDeviceGroupDevicesRequest]) (*connect.Response[acquisition.ListOfDevice], error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	ListModemPools(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem.
	DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// Gets the application configuration.
	GetApplicationConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.ApplicationConfigDescriptor], error)
	// @group: Configuration
	// Updates the application configuration. The missing fields in the request will be kept unchanged.
	UpdateApplicationConfig(context.Context, *connect.Request[system.ApplicationConfig]) (*connect.Response[emptypb.Empty], error)
	// @group: Configuration
	// Synchronizes the application configuration. The input value shall contain all the default values and also all known keys (with null values).
	// The output value will contain currently set values including details which are not set.
	// The missing values in the defaults will be deleted if has been set previously in the application configuration.
	SynchronizeComponentConfig(context.Context, *connect.Request[system.ComponentConfigDescriptor]) (*connect.Response[system.ComponentConfig], error)
	// @group: Device Data
	// The method to returns register/profile/irregular-profile typed device data. The method is generic but limited to return
	GetDeviceData(context.Context, *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.Response[acquisition.DeviceData], error)
	// @group: Device Data
	// The method to get the list of device data info. The device data info contains various metadata, such as a period of the regular profiles or a timestamp of the last stored value.
	ListDeviceDataInfo(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceDataInfo], error)
	// @group: Device Data
	// The method to stream out register-typed device data.
	GetDeviceDataRegisters(context.Context, *connect.Request[acquisition.GetDeviceDataRequest], *connect.ServerStream[acquisition.RegisterValues]) error
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataProfiles(context.Context, *connect.Request[acquisition.GetDeviceDataRequest], *connect.ServerStream[acquisition.ProfileValues]) error
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataIrregularProfiles(context.Context, *connect.Request[acquisition.GetDeviceDataRequest], *connect.ServerStream[acquisition.IrregularProfileValues]) error
	// @group: Device Events
	// The method to stream out profile-typed device events.
	GetDeviceEvents(context.Context, *connect.Request[acquisition.GetDeviceEventsRequest]) (*connect.Response[acquisition.DeviceEvents], error)
	// @group: Time-Of-Use Tables
	// The method to create a new time-of-use table.
	CreateTimeOfUseTable(context.Context, *connect.Request[acquisition.CreateTimeOfUseTableRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Time-Of-Use Tables
	// The method to get the list of time-of-use tables.
	ListTimeOfUseTables(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfTimeOfUseTable], error)
	// @group: Time-Of-Use Tables
	// The method to get the time-of-use table.
	GetTimeOfUseTable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.TimeOfUseTable], error)
	// @group: Time-Of-Use Tables
	// The method to update the time-of-use table.
	UpdateTimeOfUseTable(context.Context, *connect.Request[acquisition.TimeOfUseTable]) (*connect.Response[emptypb.Empty], error)
	// @group: Time-Of-Use Tables
	// The method to delete the time-of-use table.
	DeleteTimeOfUseTable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to create a new cron job.
	CreateCronJob(context.Context, *connect.Request[cronjobs.CreateCronJobRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// @group: Cron Jobs
	// The method to get the list of cron jobs.
	ListCronJobs(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[cronjobs.ListOfCronJob], error)
	// @group: Cron Jobs
	// The method to get the cron job.
	GetCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[cronjobs.CronJob], error)
	// @group: Cron Jobs
	// The method to update the cron job.
	UpdateCronJob(context.Context, *connect.Request[cronjobs.CronJob]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to delete the cron job.
	DeleteCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to run the cron job immediately.
	RunCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to pause the cron job.
	PauseCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Cron Jobs
	// The method to resume the cron job.
	ResumeCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// @group: Metadata
	// The method sets the fields of an object. The values are merged with the existing fields to preserve the existing fields that are not set in the request.
	UpdateObjectFields(context.Context, *connect.Request[common.UpdateObjectFieldsRequest]) (*connect.Response[emptypb.Empty], error)
	// @group: System
	// The method returns the OIDC configuration, proxied directly from the configured OIDC service.
	// All the authenticated endpoints shall be protected by token from this OIDC service.
	GetOpenIdConfiguration(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.OpenIdConfiguration], error)
	// @group: Cryptography
	// The method returns a secret based on the request.
	GetCryptoSecret(context.Context, *connect.Request[crypto.GetCryptoSecretRequest]) (*connect.Response[crypto.CryptoSecrets], error)
	// @group: Cryptography
	// The method to store (create or replace) the secret.
	SetCryptoSecret(context.Context, *connect.Request[crypto.SetCryptoSecretRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewApiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApiServiceHandler(svc ApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	apiServiceMethods := svcapi.File_services_svcapi_api_proto.Services().ByName("ApiService").Methods()
	apiServiceCreateVariableHandler := connect.NewUnaryHandler(
		ApiServiceCreateVariableProcedure,
		svc.CreateVariable,
		connect.WithSchema(apiServiceMethods.ByName("CreateVariable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListVariablesHandler := connect.NewUnaryHandler(
		ApiServiceListVariablesProcedure,
		svc.ListVariables,
		connect.WithSchema(apiServiceMethods.ByName("ListVariables")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetVariableHandler := connect.NewUnaryHandler(
		ApiServiceGetVariableProcedure,
		svc.GetVariable,
		connect.WithSchema(apiServiceMethods.ByName("GetVariable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateVariableHandler := connect.NewUnaryHandler(
		ApiServiceUpdateVariableProcedure,
		svc.UpdateVariable,
		connect.WithSchema(apiServiceMethods.ByName("UpdateVariable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteVariableHandler := connect.NewUnaryHandler(
		ApiServiceDeleteVariableProcedure,
		svc.DeleteVariable,
		connect.WithSchema(apiServiceMethods.ByName("DeleteVariable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddRegisterToVariableHandler := connect.NewUnaryHandler(
		ApiServiceAddRegisterToVariableProcedure,
		svc.AddRegisterToVariable,
		connect.WithSchema(apiServiceMethods.ByName("AddRegisterToVariable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveRegisterFromVariableHandler := connect.NewUnaryHandler(
		ApiServiceRemoveRegisterFromVariableProcedure,
		svc.RemoveRegisterFromVariable,
		connect.WithSchema(apiServiceMethods.ByName("RemoveRegisterFromVariable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceConfigurationRegisterHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceConfigurationRegisterProcedure,
		svc.CreateDeviceConfigurationRegister,
		connect.WithSchema(apiServiceMethods.ByName("CreateDeviceConfigurationRegister")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceConfigurationRegistersHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceConfigurationRegistersProcedure,
		svc.ListDeviceConfigurationRegisters,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceConfigurationRegisters")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceConfigurationRegisterHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceConfigurationRegisterProcedure,
		svc.GetDeviceConfigurationRegister,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceConfigurationRegister")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateDeviceConfigurationRegisterHandler := connect.NewUnaryHandler(
		ApiServiceUpdateDeviceConfigurationRegisterProcedure,
		svc.UpdateDeviceConfigurationRegister,
		connect.WithSchema(apiServiceMethods.ByName("UpdateDeviceConfigurationRegister")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteDeviceConfigurationRegisterHandler := connect.NewUnaryHandler(
		ApiServiceDeleteDeviceConfigurationRegisterProcedure,
		svc.DeleteDeviceConfigurationRegister,
		connect.WithSchema(apiServiceMethods.ByName("DeleteDeviceConfigurationRegister")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceConfigurationTemplateHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceConfigurationTemplateProcedure,
		svc.CreateDeviceConfigurationTemplate,
		connect.WithSchema(apiServiceMethods.ByName("CreateDeviceConfigurationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceConfigurationTemplatesHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceConfigurationTemplatesProcedure,
		svc.ListDeviceConfigurationTemplates,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceConfigurationTemplates")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceConfigurationTemplateHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceConfigurationTemplateProcedure,
		svc.GetDeviceConfigurationTemplate,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceConfigurationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateDeviceConfigurationTemplateHandler := connect.NewUnaryHandler(
		ApiServiceUpdateDeviceConfigurationTemplateProcedure,
		svc.UpdateDeviceConfigurationTemplate,
		connect.WithSchema(apiServiceMethods.ByName("UpdateDeviceConfigurationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteDeviceConfigurationTemplateHandler := connect.NewUnaryHandler(
		ApiServiceDeleteDeviceConfigurationTemplateProcedure,
		svc.DeleteDeviceConfigurationTemplate,
		connect.WithSchema(apiServiceMethods.ByName("DeleteDeviceConfigurationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateHandler := connect.NewUnaryHandler(
		ApiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateProcedure,
		svc.AddDeviceConfigurationRegisterToDeviceConfigurationTemplate,
		connect.WithSchema(apiServiceMethods.ByName("AddDeviceConfigurationRegisterToDeviceConfigurationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateHandler := connect.NewUnaryHandler(
		ApiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateProcedure,
		svc.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate,
		connect.WithSchema(apiServiceMethods.ByName("RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateFieldDescriptorHandler := connect.NewUnaryHandler(
		ApiServiceCreateFieldDescriptorProcedure,
		svc.CreateFieldDescriptor,
		connect.WithSchema(apiServiceMethods.ByName("CreateFieldDescriptor")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateFieldDescriptorHandler := connect.NewUnaryHandler(
		ApiServiceUpdateFieldDescriptorProcedure,
		svc.UpdateFieldDescriptor,
		connect.WithSchema(apiServiceMethods.ByName("UpdateFieldDescriptor")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteFieldDescriptorHandler := connect.NewUnaryHandler(
		ApiServiceDeleteFieldDescriptorProcedure,
		svc.DeleteFieldDescriptor,
		connect.WithSchema(apiServiceMethods.ByName("DeleteFieldDescriptor")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListFieldDescriptorsHandler := connect.NewUnaryHandler(
		ApiServiceListFieldDescriptorsProcedure,
		svc.ListFieldDescriptors,
		connect.WithSchema(apiServiceMethods.ByName("ListFieldDescriptors")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListFieldDescriptorOptionsHandler := connect.NewUnaryHandler(
		ApiServiceListFieldDescriptorOptionsProcedure,
		svc.ListFieldDescriptorOptions,
		connect.WithSchema(apiServiceMethods.ByName("ListFieldDescriptorOptions")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListBulksHandler := connect.NewUnaryHandler(
		ApiServiceListBulksProcedure,
		svc.ListBulks,
		connect.WithSchema(apiServiceMethods.ByName("ListBulks")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListBulkJobsHandler := connect.NewUnaryHandler(
		ApiServiceListBulkJobsProcedure,
		svc.ListBulkJobs,
		connect.WithSchema(apiServiceMethods.ByName("ListBulkJobs")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetBulkJobHandler := connect.NewUnaryHandler(
		ApiServiceGetBulkJobProcedure,
		svc.GetBulkJob,
		connect.WithSchema(apiServiceMethods.ByName("GetBulkJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateBulkJobHandler := connect.NewUnaryHandler(
		ApiServiceUpdateBulkJobProcedure,
		svc.UpdateBulkJob,
		connect.WithSchema(apiServiceMethods.ByName("UpdateBulkJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCancelBulkHandler := connect.NewUnaryHandler(
		ApiServiceCancelBulkProcedure,
		svc.CancelBulk,
		connect.WithSchema(apiServiceMethods.ByName("CancelBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCancelBulkJobsHandler := connect.NewUnaryHandler(
		ApiServiceCancelBulkJobsProcedure,
		svc.CancelBulkJobs,
		connect.WithSchema(apiServiceMethods.ByName("CancelBulkJobs")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateProxyBulkHandler := connect.NewUnaryHandler(
		ApiServiceCreateProxyBulkProcedure,
		svc.CreateProxyBulk,
		connect.WithSchema(apiServiceMethods.ByName("CreateProxyBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetProxyBulkHandler := connect.NewUnaryHandler(
		ApiServiceGetProxyBulkProcedure,
		svc.GetProxyBulk,
		connect.WithSchema(apiServiceMethods.ByName("GetProxyBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateBulkHandler := connect.NewUnaryHandler(
		ApiServiceCreateBulkProcedure,
		svc.CreateBulk,
		connect.WithSchema(apiServiceMethods.ByName("CreateBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetBulkHandler := connect.NewUnaryHandler(
		ApiServiceGetBulkProcedure,
		svc.GetBulk,
		connect.WithSchema(apiServiceMethods.ByName("GetBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateBulkHandler := connect.NewUnaryHandler(
		ApiServiceUpdateBulkProcedure,
		svc.UpdateBulk,
		connect.WithSchema(apiServiceMethods.ByName("UpdateBulk")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDriversHandler := connect.NewUnaryHandler(
		ApiServiceListDriversProcedure,
		svc.ListDrivers,
		connect.WithSchema(apiServiceMethods.ByName("ListDrivers")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDriverHandler := connect.NewUnaryHandler(
		ApiServiceGetDriverProcedure,
		svc.GetDriver,
		connect.WithSchema(apiServiceMethods.ByName("GetDriver")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateCommunicationUnitHandler := connect.NewUnaryHandler(
		ApiServiceCreateCommunicationUnitProcedure,
		svc.CreateCommunicationUnit,
		connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationUnit")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateCommunicationUnitHandler := connect.NewUnaryHandler(
		ApiServiceUpdateCommunicationUnitProcedure,
		svc.UpdateCommunicationUnit,
		connect.WithSchema(apiServiceMethods.ByName("UpdateCommunicationUnit")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceListCommunicationUnitsProcedure,
		svc.ListCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("ListCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetCommunicationUnitHandler := connect.NewUnaryHandler(
		ApiServiceGetCommunicationUnitProcedure,
		svc.GetCommunicationUnit,
		connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnit")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetCommunicationUnitNetworkMapHandler := connect.NewUnaryHandler(
		ApiServiceGetCommunicationUnitNetworkMapProcedure,
		svc.GetCommunicationUnitNetworkMap,
		connect.WithSchema(apiServiceMethods.ByName("GetCommunicationUnitNetworkMap")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateCommunicationBusHandler := connect.NewUnaryHandler(
		ApiServiceCreateCommunicationBusProcedure,
		svc.CreateCommunicationBus,
		connect.WithSchema(apiServiceMethods.ByName("CreateCommunicationBus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListCommunicationBusesHandler := connect.NewUnaryHandler(
		ApiServiceListCommunicationBusesProcedure,
		svc.ListCommunicationBuses,
		connect.WithSchema(apiServiceMethods.ByName("ListCommunicationBuses")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddCommunicationUnitsToCommunicationBusHandler := connect.NewUnaryHandler(
		ApiServiceAddCommunicationUnitsToCommunicationBusProcedure,
		svc.AddCommunicationUnitsToCommunicationBus,
		connect.WithSchema(apiServiceMethods.ByName("AddCommunicationUnitsToCommunicationBus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveCommunicationUnitsFromCommunicationBusHandler := connect.NewUnaryHandler(
		ApiServiceRemoveCommunicationUnitsFromCommunicationBusProcedure,
		svc.RemoveCommunicationUnitsFromCommunicationBus,
		connect.WithSchema(apiServiceMethods.ByName("RemoveCommunicationUnitsFromCommunicationBus")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceProcedure,
		svc.CreateDevice,
		connect.WithSchema(apiServiceMethods.ByName("CreateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateDeviceHandler := connect.NewUnaryHandler(
		ApiServiceUpdateDeviceProcedure,
		svc.UpdateDevice,
		connect.WithSchema(apiServiceMethods.ByName("UpdateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDevicesHandler := connect.NewUnaryHandler(
		ApiServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(apiServiceMethods.ByName("ListDevices")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceProcedure,
		svc.GetDevice,
		connect.WithSchema(apiServiceMethods.ByName("GetDevice")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceInfoHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceInfoProcedure,
		svc.GetDeviceInfo,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceInfo")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSetDeviceCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceSetDeviceCommunicationUnitsProcedure,
		svc.SetDeviceCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("SetDeviceCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceCommunicationUnitsHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceCommunicationUnitsProcedure,
		svc.GetDeviceCommunicationUnits,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceCommunicationUnits")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceCommunicationUnitChangesHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceCommunicationUnitChangesProcedure,
		svc.ListDeviceCommunicationUnitChanges,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceCommunicationUnitChanges")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceDeviceGroupsHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceDeviceGroupsProcedure,
		svc.GetDeviceDeviceGroups,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceDeviceGroups")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceNetworkMapHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceNetworkMapProcedure,
		svc.GetDeviceNetworkMap,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceNetworkMap")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceBulksHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceBulksProcedure,
		svc.GetDeviceBulks,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceBulks")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateDeviceGroupHandler := connect.NewUnaryHandler(
		ApiServiceCreateDeviceGroupProcedure,
		svc.CreateDeviceGroup,
		connect.WithSchema(apiServiceMethods.ByName("CreateDeviceGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceGroupsHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceGroupsProcedure,
		svc.ListDeviceGroups,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceGroups")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceGroupHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceGroupProcedure,
		svc.GetDeviceGroup,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceAddDevicesToGroupHandler := connect.NewUnaryHandler(
		ApiServiceAddDevicesToGroupProcedure,
		svc.AddDevicesToGroup,
		connect.WithSchema(apiServiceMethods.ByName("AddDevicesToGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRemoveDevicesFromGroupHandler := connect.NewUnaryHandler(
		ApiServiceRemoveDevicesFromGroupProcedure,
		svc.RemoveDevicesFromGroup,
		connect.WithSchema(apiServiceMethods.ByName("RemoveDevicesFromGroup")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceGroupDevicesHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceGroupDevicesProcedure,
		svc.ListDeviceGroupDevices,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceGroupDevices")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListModemPoolsHandler := connect.NewUnaryHandler(
		ApiServiceListModemPoolsProcedure,
		svc.ListModemPools,
		connect.WithSchema(apiServiceMethods.ByName("ListModemPools")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceGetModemPoolProcedure,
		svc.GetModemPool,
		connect.WithSchema(apiServiceMethods.ByName("GetModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceCreateModemPoolProcedure,
		svc.CreateModemPool,
		connect.WithSchema(apiServiceMethods.ByName("CreateModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceUpdateModemPoolProcedure,
		svc.UpdateModemPool,
		connect.WithSchema(apiServiceMethods.ByName("UpdateModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteModemPoolHandler := connect.NewUnaryHandler(
		ApiServiceDeleteModemPoolProcedure,
		svc.DeleteModemPool,
		connect.WithSchema(apiServiceMethods.ByName("DeleteModemPool")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateModemHandler := connect.NewUnaryHandler(
		ApiServiceCreateModemProcedure,
		svc.CreateModem,
		connect.WithSchema(apiServiceMethods.ByName("CreateModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateModemHandler := connect.NewUnaryHandler(
		ApiServiceUpdateModemProcedure,
		svc.UpdateModem,
		connect.WithSchema(apiServiceMethods.ByName("UpdateModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteModemHandler := connect.NewUnaryHandler(
		ApiServiceDeleteModemProcedure,
		svc.DeleteModem,
		connect.WithSchema(apiServiceMethods.ByName("DeleteModem")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetApplicationConfigHandler := connect.NewUnaryHandler(
		ApiServiceGetApplicationConfigProcedure,
		svc.GetApplicationConfig,
		connect.WithSchema(apiServiceMethods.ByName("GetApplicationConfig")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateApplicationConfigHandler := connect.NewUnaryHandler(
		ApiServiceUpdateApplicationConfigProcedure,
		svc.UpdateApplicationConfig,
		connect.WithSchema(apiServiceMethods.ByName("UpdateApplicationConfig")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSynchronizeComponentConfigHandler := connect.NewUnaryHandler(
		ApiServiceSynchronizeComponentConfigProcedure,
		svc.SynchronizeComponentConfig,
		connect.WithSchema(apiServiceMethods.ByName("SynchronizeComponentConfig")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceDataHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceDataProcedure,
		svc.GetDeviceData,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceData")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListDeviceDataInfoHandler := connect.NewUnaryHandler(
		ApiServiceListDeviceDataInfoProcedure,
		svc.ListDeviceDataInfo,
		connect.WithSchema(apiServiceMethods.ByName("ListDeviceDataInfo")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceDataRegistersHandler := connect.NewServerStreamHandler(
		ApiServiceGetDeviceDataRegistersProcedure,
		svc.GetDeviceDataRegisters,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceDataRegisters")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceDataProfilesHandler := connect.NewServerStreamHandler(
		ApiServiceGetDeviceDataProfilesProcedure,
		svc.GetDeviceDataProfiles,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceDataProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceDataIrregularProfilesHandler := connect.NewServerStreamHandler(
		ApiServiceGetDeviceDataIrregularProfilesProcedure,
		svc.GetDeviceDataIrregularProfiles,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceDataIrregularProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetDeviceEventsHandler := connect.NewUnaryHandler(
		ApiServiceGetDeviceEventsProcedure,
		svc.GetDeviceEvents,
		connect.WithSchema(apiServiceMethods.ByName("GetDeviceEvents")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateTimeOfUseTableHandler := connect.NewUnaryHandler(
		ApiServiceCreateTimeOfUseTableProcedure,
		svc.CreateTimeOfUseTable,
		connect.WithSchema(apiServiceMethods.ByName("CreateTimeOfUseTable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListTimeOfUseTablesHandler := connect.NewUnaryHandler(
		ApiServiceListTimeOfUseTablesProcedure,
		svc.ListTimeOfUseTables,
		connect.WithSchema(apiServiceMethods.ByName("ListTimeOfUseTables")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetTimeOfUseTableHandler := connect.NewUnaryHandler(
		ApiServiceGetTimeOfUseTableProcedure,
		svc.GetTimeOfUseTable,
		connect.WithSchema(apiServiceMethods.ByName("GetTimeOfUseTable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateTimeOfUseTableHandler := connect.NewUnaryHandler(
		ApiServiceUpdateTimeOfUseTableProcedure,
		svc.UpdateTimeOfUseTable,
		connect.WithSchema(apiServiceMethods.ByName("UpdateTimeOfUseTable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteTimeOfUseTableHandler := connect.NewUnaryHandler(
		ApiServiceDeleteTimeOfUseTableProcedure,
		svc.DeleteTimeOfUseTable,
		connect.WithSchema(apiServiceMethods.ByName("DeleteTimeOfUseTable")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceCreateCronJobHandler := connect.NewUnaryHandler(
		ApiServiceCreateCronJobProcedure,
		svc.CreateCronJob,
		connect.WithSchema(apiServiceMethods.ByName("CreateCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceListCronJobsHandler := connect.NewUnaryHandler(
		ApiServiceListCronJobsProcedure,
		svc.ListCronJobs,
		connect.WithSchema(apiServiceMethods.ByName("ListCronJobs")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetCronJobHandler := connect.NewUnaryHandler(
		ApiServiceGetCronJobProcedure,
		svc.GetCronJob,
		connect.WithSchema(apiServiceMethods.ByName("GetCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateCronJobHandler := connect.NewUnaryHandler(
		ApiServiceUpdateCronJobProcedure,
		svc.UpdateCronJob,
		connect.WithSchema(apiServiceMethods.ByName("UpdateCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceDeleteCronJobHandler := connect.NewUnaryHandler(
		ApiServiceDeleteCronJobProcedure,
		svc.DeleteCronJob,
		connect.WithSchema(apiServiceMethods.ByName("DeleteCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceRunCronJobHandler := connect.NewUnaryHandler(
		ApiServiceRunCronJobProcedure,
		svc.RunCronJob,
		connect.WithSchema(apiServiceMethods.ByName("RunCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServicePauseCronJobHandler := connect.NewUnaryHandler(
		ApiServicePauseCronJobProcedure,
		svc.PauseCronJob,
		connect.WithSchema(apiServiceMethods.ByName("PauseCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceResumeCronJobHandler := connect.NewUnaryHandler(
		ApiServiceResumeCronJobProcedure,
		svc.ResumeCronJob,
		connect.WithSchema(apiServiceMethods.ByName("ResumeCronJob")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceUpdateObjectFieldsHandler := connect.NewUnaryHandler(
		ApiServiceUpdateObjectFieldsProcedure,
		svc.UpdateObjectFields,
		connect.WithSchema(apiServiceMethods.ByName("UpdateObjectFields")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetOpenIdConfigurationHandler := connect.NewUnaryHandler(
		ApiServiceGetOpenIdConfigurationProcedure,
		svc.GetOpenIdConfiguration,
		connect.WithSchema(apiServiceMethods.ByName("GetOpenIdConfiguration")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceGetCryptoSecretHandler := connect.NewUnaryHandler(
		ApiServiceGetCryptoSecretProcedure,
		svc.GetCryptoSecret,
		connect.WithSchema(apiServiceMethods.ByName("GetCryptoSecret")),
		connect.WithHandlerOptions(opts...),
	)
	apiServiceSetCryptoSecretHandler := connect.NewUnaryHandler(
		ApiServiceSetCryptoSecretProcedure,
		svc.SetCryptoSecret,
		connect.WithSchema(apiServiceMethods.ByName("SetCryptoSecret")),
		connect.WithHandlerOptions(opts...),
	)
	return "/io.clbs.openhes.services.svcapi.ApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ApiServiceCreateVariableProcedure:
			apiServiceCreateVariableHandler.ServeHTTP(w, r)
		case ApiServiceListVariablesProcedure:
			apiServiceListVariablesHandler.ServeHTTP(w, r)
		case ApiServiceGetVariableProcedure:
			apiServiceGetVariableHandler.ServeHTTP(w, r)
		case ApiServiceUpdateVariableProcedure:
			apiServiceUpdateVariableHandler.ServeHTTP(w, r)
		case ApiServiceDeleteVariableProcedure:
			apiServiceDeleteVariableHandler.ServeHTTP(w, r)
		case ApiServiceAddRegisterToVariableProcedure:
			apiServiceAddRegisterToVariableHandler.ServeHTTP(w, r)
		case ApiServiceRemoveRegisterFromVariableProcedure:
			apiServiceRemoveRegisterFromVariableHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceConfigurationRegisterProcedure:
			apiServiceCreateDeviceConfigurationRegisterHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceConfigurationRegistersProcedure:
			apiServiceListDeviceConfigurationRegistersHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceConfigurationRegisterProcedure:
			apiServiceGetDeviceConfigurationRegisterHandler.ServeHTTP(w, r)
		case ApiServiceUpdateDeviceConfigurationRegisterProcedure:
			apiServiceUpdateDeviceConfigurationRegisterHandler.ServeHTTP(w, r)
		case ApiServiceDeleteDeviceConfigurationRegisterProcedure:
			apiServiceDeleteDeviceConfigurationRegisterHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceConfigurationTemplateProcedure:
			apiServiceCreateDeviceConfigurationTemplateHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceConfigurationTemplatesProcedure:
			apiServiceListDeviceConfigurationTemplatesHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceConfigurationTemplateProcedure:
			apiServiceGetDeviceConfigurationTemplateHandler.ServeHTTP(w, r)
		case ApiServiceUpdateDeviceConfigurationTemplateProcedure:
			apiServiceUpdateDeviceConfigurationTemplateHandler.ServeHTTP(w, r)
		case ApiServiceDeleteDeviceConfigurationTemplateProcedure:
			apiServiceDeleteDeviceConfigurationTemplateHandler.ServeHTTP(w, r)
		case ApiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateProcedure:
			apiServiceAddDeviceConfigurationRegisterToDeviceConfigurationTemplateHandler.ServeHTTP(w, r)
		case ApiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateProcedure:
			apiServiceRemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateHandler.ServeHTTP(w, r)
		case ApiServiceCreateFieldDescriptorProcedure:
			apiServiceCreateFieldDescriptorHandler.ServeHTTP(w, r)
		case ApiServiceUpdateFieldDescriptorProcedure:
			apiServiceUpdateFieldDescriptorHandler.ServeHTTP(w, r)
		case ApiServiceDeleteFieldDescriptorProcedure:
			apiServiceDeleteFieldDescriptorHandler.ServeHTTP(w, r)
		case ApiServiceListFieldDescriptorsProcedure:
			apiServiceListFieldDescriptorsHandler.ServeHTTP(w, r)
		case ApiServiceListFieldDescriptorOptionsProcedure:
			apiServiceListFieldDescriptorOptionsHandler.ServeHTTP(w, r)
		case ApiServiceListBulksProcedure:
			apiServiceListBulksHandler.ServeHTTP(w, r)
		case ApiServiceListBulkJobsProcedure:
			apiServiceListBulkJobsHandler.ServeHTTP(w, r)
		case ApiServiceGetBulkJobProcedure:
			apiServiceGetBulkJobHandler.ServeHTTP(w, r)
		case ApiServiceUpdateBulkJobProcedure:
			apiServiceUpdateBulkJobHandler.ServeHTTP(w, r)
		case ApiServiceCancelBulkProcedure:
			apiServiceCancelBulkHandler.ServeHTTP(w, r)
		case ApiServiceCancelBulkJobsProcedure:
			apiServiceCancelBulkJobsHandler.ServeHTTP(w, r)
		case ApiServiceCreateProxyBulkProcedure:
			apiServiceCreateProxyBulkHandler.ServeHTTP(w, r)
		case ApiServiceGetProxyBulkProcedure:
			apiServiceGetProxyBulkHandler.ServeHTTP(w, r)
		case ApiServiceCreateBulkProcedure:
			apiServiceCreateBulkHandler.ServeHTTP(w, r)
		case ApiServiceGetBulkProcedure:
			apiServiceGetBulkHandler.ServeHTTP(w, r)
		case ApiServiceUpdateBulkProcedure:
			apiServiceUpdateBulkHandler.ServeHTTP(w, r)
		case ApiServiceListDriversProcedure:
			apiServiceListDriversHandler.ServeHTTP(w, r)
		case ApiServiceGetDriverProcedure:
			apiServiceGetDriverHandler.ServeHTTP(w, r)
		case ApiServiceCreateCommunicationUnitProcedure:
			apiServiceCreateCommunicationUnitHandler.ServeHTTP(w, r)
		case ApiServiceUpdateCommunicationUnitProcedure:
			apiServiceUpdateCommunicationUnitHandler.ServeHTTP(w, r)
		case ApiServiceListCommunicationUnitsProcedure:
			apiServiceListCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceGetCommunicationUnitProcedure:
			apiServiceGetCommunicationUnitHandler.ServeHTTP(w, r)
		case ApiServiceGetCommunicationUnitNetworkMapProcedure:
			apiServiceGetCommunicationUnitNetworkMapHandler.ServeHTTP(w, r)
		case ApiServiceCreateCommunicationBusProcedure:
			apiServiceCreateCommunicationBusHandler.ServeHTTP(w, r)
		case ApiServiceListCommunicationBusesProcedure:
			apiServiceListCommunicationBusesHandler.ServeHTTP(w, r)
		case ApiServiceAddCommunicationUnitsToCommunicationBusProcedure:
			apiServiceAddCommunicationUnitsToCommunicationBusHandler.ServeHTTP(w, r)
		case ApiServiceRemoveCommunicationUnitsFromCommunicationBusProcedure:
			apiServiceRemoveCommunicationUnitsFromCommunicationBusHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceProcedure:
			apiServiceCreateDeviceHandler.ServeHTTP(w, r)
		case ApiServiceUpdateDeviceProcedure:
			apiServiceUpdateDeviceHandler.ServeHTTP(w, r)
		case ApiServiceListDevicesProcedure:
			apiServiceListDevicesHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceProcedure:
			apiServiceGetDeviceHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceInfoProcedure:
			apiServiceGetDeviceInfoHandler.ServeHTTP(w, r)
		case ApiServiceSetDeviceCommunicationUnitsProcedure:
			apiServiceSetDeviceCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceCommunicationUnitsProcedure:
			apiServiceGetDeviceCommunicationUnitsHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceCommunicationUnitChangesProcedure:
			apiServiceListDeviceCommunicationUnitChangesHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceDeviceGroupsProcedure:
			apiServiceGetDeviceDeviceGroupsHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceNetworkMapProcedure:
			apiServiceGetDeviceNetworkMapHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceBulksProcedure:
			apiServiceGetDeviceBulksHandler.ServeHTTP(w, r)
		case ApiServiceCreateDeviceGroupProcedure:
			apiServiceCreateDeviceGroupHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceGroupsProcedure:
			apiServiceListDeviceGroupsHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceGroupProcedure:
			apiServiceGetDeviceGroupHandler.ServeHTTP(w, r)
		case ApiServiceAddDevicesToGroupProcedure:
			apiServiceAddDevicesToGroupHandler.ServeHTTP(w, r)
		case ApiServiceRemoveDevicesFromGroupProcedure:
			apiServiceRemoveDevicesFromGroupHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceGroupDevicesProcedure:
			apiServiceListDeviceGroupDevicesHandler.ServeHTTP(w, r)
		case ApiServiceListModemPoolsProcedure:
			apiServiceListModemPoolsHandler.ServeHTTP(w, r)
		case ApiServiceGetModemPoolProcedure:
			apiServiceGetModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceCreateModemPoolProcedure:
			apiServiceCreateModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceUpdateModemPoolProcedure:
			apiServiceUpdateModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceDeleteModemPoolProcedure:
			apiServiceDeleteModemPoolHandler.ServeHTTP(w, r)
		case ApiServiceCreateModemProcedure:
			apiServiceCreateModemHandler.ServeHTTP(w, r)
		case ApiServiceUpdateModemProcedure:
			apiServiceUpdateModemHandler.ServeHTTP(w, r)
		case ApiServiceDeleteModemProcedure:
			apiServiceDeleteModemHandler.ServeHTTP(w, r)
		case ApiServiceGetApplicationConfigProcedure:
			apiServiceGetApplicationConfigHandler.ServeHTTP(w, r)
		case ApiServiceUpdateApplicationConfigProcedure:
			apiServiceUpdateApplicationConfigHandler.ServeHTTP(w, r)
		case ApiServiceSynchronizeComponentConfigProcedure:
			apiServiceSynchronizeComponentConfigHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceDataProcedure:
			apiServiceGetDeviceDataHandler.ServeHTTP(w, r)
		case ApiServiceListDeviceDataInfoProcedure:
			apiServiceListDeviceDataInfoHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceDataRegistersProcedure:
			apiServiceGetDeviceDataRegistersHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceDataProfilesProcedure:
			apiServiceGetDeviceDataProfilesHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceDataIrregularProfilesProcedure:
			apiServiceGetDeviceDataIrregularProfilesHandler.ServeHTTP(w, r)
		case ApiServiceGetDeviceEventsProcedure:
			apiServiceGetDeviceEventsHandler.ServeHTTP(w, r)
		case ApiServiceCreateTimeOfUseTableProcedure:
			apiServiceCreateTimeOfUseTableHandler.ServeHTTP(w, r)
		case ApiServiceListTimeOfUseTablesProcedure:
			apiServiceListTimeOfUseTablesHandler.ServeHTTP(w, r)
		case ApiServiceGetTimeOfUseTableProcedure:
			apiServiceGetTimeOfUseTableHandler.ServeHTTP(w, r)
		case ApiServiceUpdateTimeOfUseTableProcedure:
			apiServiceUpdateTimeOfUseTableHandler.ServeHTTP(w, r)
		case ApiServiceDeleteTimeOfUseTableProcedure:
			apiServiceDeleteTimeOfUseTableHandler.ServeHTTP(w, r)
		case ApiServiceCreateCronJobProcedure:
			apiServiceCreateCronJobHandler.ServeHTTP(w, r)
		case ApiServiceListCronJobsProcedure:
			apiServiceListCronJobsHandler.ServeHTTP(w, r)
		case ApiServiceGetCronJobProcedure:
			apiServiceGetCronJobHandler.ServeHTTP(w, r)
		case ApiServiceUpdateCronJobProcedure:
			apiServiceUpdateCronJobHandler.ServeHTTP(w, r)
		case ApiServiceDeleteCronJobProcedure:
			apiServiceDeleteCronJobHandler.ServeHTTP(w, r)
		case ApiServiceRunCronJobProcedure:
			apiServiceRunCronJobHandler.ServeHTTP(w, r)
		case ApiServicePauseCronJobProcedure:
			apiServicePauseCronJobHandler.ServeHTTP(w, r)
		case ApiServiceResumeCronJobProcedure:
			apiServiceResumeCronJobHandler.ServeHTTP(w, r)
		case ApiServiceUpdateObjectFieldsProcedure:
			apiServiceUpdateObjectFieldsHandler.ServeHTTP(w, r)
		case ApiServiceGetOpenIdConfigurationProcedure:
			apiServiceGetOpenIdConfigurationHandler.ServeHTTP(w, r)
		case ApiServiceGetCryptoSecretProcedure:
			apiServiceGetCryptoSecretHandler.ServeHTTP(w, r)
		case ApiServiceSetCryptoSecretProcedure:
			apiServiceSetCryptoSecretHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApiServiceHandler struct{}

func (UnimplementedApiServiceHandler) CreateVariable(context.Context, *connect.Request[acquisition.CreateVariableRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateVariable is not implemented"))
}

func (UnimplementedApiServiceHandler) ListVariables(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfVariable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListVariables is not implemented"))
}

func (UnimplementedApiServiceHandler) GetVariable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Variable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetVariable is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateVariable(context.Context, *connect.Request[acquisition.Variable]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateVariable is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteVariable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteVariable is not implemented"))
}

func (UnimplementedApiServiceHandler) AddRegisterToVariable(context.Context, *connect.Request[acquisition.AddRegisterToVariableRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.AddRegisterToVariable is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveRegisterFromVariable(context.Context, *connect.Request[acquisition.RemoveRegisterFromVariableRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RemoveRegisterFromVariable is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDeviceConfigurationRegister(context.Context, *connect.Request[acquisition.CreateDeviceConfigurationRegisterRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateDeviceConfigurationRegister is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceConfigurationRegisters(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationRegister], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceConfigurationRegisters is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceConfigurationRegister(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationRegister], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceConfigurationRegister is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateDeviceConfigurationRegister(context.Context, *connect.Request[acquisition.DeviceConfigurationRegister]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateDeviceConfigurationRegister is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteDeviceConfigurationRegister(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteDeviceConfigurationRegister is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.CreateDeviceConfigurationTemplateRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateDeviceConfigurationTemplate is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceConfigurationTemplates(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceConfigurationTemplate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceConfigurationTemplates is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceConfigurationTemplate(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceConfigurationTemplate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceConfigurationTemplate is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.DeviceConfigurationTemplate]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateDeviceConfigurationTemplate is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteDeviceConfigurationTemplate(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteDeviceConfigurationTemplate is not implemented"))
}

func (UnimplementedApiServiceHandler) AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.AddDeviceConfigurationRegisterToDeviceConfigurationTemplate is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *connect.Request[acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateFieldDescriptor(context.Context, *connect.Request[common.CreateFieldDescriptorRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateFieldDescriptor is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateFieldDescriptor(context.Context, *connect.Request[common.FieldDescriptor]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateFieldDescriptor is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteFieldDescriptor(context.Context, *connect.Request[common.FieldDescriptorSelector]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteFieldDescriptor is not implemented"))
}

func (UnimplementedApiServiceHandler) ListFieldDescriptors(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[common.ListOfFieldDescriptor], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListFieldDescriptors is not implemented"))
}

func (UnimplementedApiServiceHandler) ListFieldDescriptorOptions(context.Context, *connect.Request[common.ListFieldDescriptorOptionsRequest]) (*connect.Response[common.FieldDescriptorOptions], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListFieldDescriptorOptions is not implemented"))
}

func (UnimplementedApiServiceHandler) ListBulks(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfBulk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListBulks is not implemented"))
}

func (UnimplementedApiServiceHandler) ListBulkJobs(context.Context, *connect.Request[acquisition.ListBulkJobsRequest]) (*connect.Response[acquisition.ListOfBulkJob], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListBulkJobs is not implemented"))
}

func (UnimplementedApiServiceHandler) GetBulkJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.BulkJob], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetBulkJob is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateBulkJob(context.Context, *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateBulkJob is not implemented"))
}

func (UnimplementedApiServiceHandler) CancelBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CancelBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) CancelBulkJobs(context.Context, *connect.Request[common.ListOfId]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CancelBulkJobs is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateProxyBulk(context.Context, *connect.Request[acquisition.CreateProxyBulkRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateProxyBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) GetProxyBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ProxyBulk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetProxyBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateBulk(context.Context, *connect.Request[acquisition.CreateBulkRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) GetBulk(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Bulk], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateBulk(context.Context, *connect.Request[common.UpdateMetadata]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateBulk is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDrivers(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDriver], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDrivers is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDriver(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Driver], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDriver is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateCommunicationUnit(context.Context, *connect.Request[acquisition.CreateCommunicationUnitRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationUnit is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateCommunicationUnit(context.Context, *connect.Request[acquisition.CommunicationUnit]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateCommunicationUnit is not implemented"))
}

func (UnimplementedApiServiceHandler) ListCommunicationUnits(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationUnit], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) GetCommunicationUnit(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.CommunicationUnit], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetCommunicationUnit is not implemented"))
}

func (UnimplementedApiServiceHandler) GetCommunicationUnitNetworkMap(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetCommunicationUnitNetworkMap is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateCommunicationBus(context.Context, *connect.Request[acquisition.CreateCommunicationBusRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateCommunicationBus is not implemented"))
}

func (UnimplementedApiServiceHandler) ListCommunicationBuses(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfCommunicationBus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListCommunicationBuses is not implemented"))
}

func (UnimplementedApiServiceHandler) AddCommunicationUnitsToCommunicationBus(context.Context, *connect.Request[acquisition.AddCommunicationUnitsToCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.AddCommunicationUnitsToCommunicationBus is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveCommunicationUnitsFromCommunicationBus(context.Context, *connect.Request[acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RemoveCommunicationUnitsFromCommunicationBus is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDevice(context.Context, *connect.Request[acquisition.CreateDeviceRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateDevice is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateDevice(context.Context, *connect.Request[acquisition.Device]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateDevice is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDevices(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDevice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDevices is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDevice(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.Device], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDevice is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceInfo(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceInfo is not implemented"))
}

func (UnimplementedApiServiceHandler) SetDeviceCommunicationUnits(context.Context, *connect.Request[acquisition.SetDeviceCommunicationUnitsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.SetDeviceCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceCommunicationUnits(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnit], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceCommunicationUnits is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceCommunicationUnitChanges(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceCommunicationUnitChange], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceCommunicationUnitChanges is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceDeviceGroups(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ListOfDeviceGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceDeviceGroups is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceNetworkMap(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.NetworkMap], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceNetworkMap is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceBulks(context.Context, *connect.Request[acquisition.GetDeviceBulksRequest]) (*connect.Response[acquisition.DeviceBulks], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceBulks is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateDeviceGroup(context.Context, *connect.Request[acquisition.CreateDeviceGroupRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateDeviceGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceGroups(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceGroups is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceGroup(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.DeviceGroup], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) AddDevicesToGroup(context.Context, *connect.Request[acquisition.AddDevicesToGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.AddDevicesToGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) RemoveDevicesFromGroup(context.Context, *connect.Request[acquisition.RemoveDevicesFromGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RemoveDevicesFromGroup is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceGroupDevices(context.Context, *connect.Request[acquisition.ListDeviceGroupDevicesRequest]) (*connect.Response[acquisition.ListOfDevice], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceGroupDevices is not implemented"))
}

func (UnimplementedApiServiceHandler) ListModemPools(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfModemPool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListModemPools is not implemented"))
}

func (UnimplementedApiServiceHandler) GetModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.ModemPool], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateModemPool(context.Context, *connect.Request[acquisition.SetModemPoolRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteModemPool(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteModemPool is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateModem is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateModem(context.Context, *connect.Request[acquisition.SetModemRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateModem is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteModem(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteModem is not implemented"))
}

func (UnimplementedApiServiceHandler) GetApplicationConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.ApplicationConfigDescriptor], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetApplicationConfig is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateApplicationConfig(context.Context, *connect.Request[system.ApplicationConfig]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateApplicationConfig is not implemented"))
}

func (UnimplementedApiServiceHandler) SynchronizeComponentConfig(context.Context, *connect.Request[system.ComponentConfigDescriptor]) (*connect.Response[system.ComponentConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.SynchronizeComponentConfig is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceData(context.Context, *connect.Request[acquisition.GetDeviceDataRequest]) (*connect.Response[acquisition.DeviceData], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceData is not implemented"))
}

func (UnimplementedApiServiceHandler) ListDeviceDataInfo(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfDeviceDataInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListDeviceDataInfo is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceDataRegisters(context.Context, *connect.Request[acquisition.GetDeviceDataRequest], *connect.ServerStream[acquisition.RegisterValues]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceDataRegisters is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceDataProfiles(context.Context, *connect.Request[acquisition.GetDeviceDataRequest], *connect.ServerStream[acquisition.ProfileValues]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceDataProfiles is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceDataIrregularProfiles(context.Context, *connect.Request[acquisition.GetDeviceDataRequest], *connect.ServerStream[acquisition.IrregularProfileValues]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceDataIrregularProfiles is not implemented"))
}

func (UnimplementedApiServiceHandler) GetDeviceEvents(context.Context, *connect.Request[acquisition.GetDeviceEventsRequest]) (*connect.Response[acquisition.DeviceEvents], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetDeviceEvents is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateTimeOfUseTable(context.Context, *connect.Request[acquisition.CreateTimeOfUseTableRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateTimeOfUseTable is not implemented"))
}

func (UnimplementedApiServiceHandler) ListTimeOfUseTables(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[acquisition.ListOfTimeOfUseTable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListTimeOfUseTables is not implemented"))
}

func (UnimplementedApiServiceHandler) GetTimeOfUseTable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[acquisition.TimeOfUseTable], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetTimeOfUseTable is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateTimeOfUseTable(context.Context, *connect.Request[acquisition.TimeOfUseTable]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateTimeOfUseTable is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteTimeOfUseTable(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteTimeOfUseTable is not implemented"))
}

func (UnimplementedApiServiceHandler) CreateCronJob(context.Context, *connect.Request[cronjobs.CreateCronJobRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.CreateCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) ListCronJobs(context.Context, *connect.Request[common.ListSelector]) (*connect.Response[cronjobs.ListOfCronJob], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ListCronJobs is not implemented"))
}

func (UnimplementedApiServiceHandler) GetCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[cronjobs.CronJob], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateCronJob(context.Context, *connect.Request[cronjobs.CronJob]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) DeleteCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.DeleteCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) RunCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.RunCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) PauseCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.PauseCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) ResumeCronJob(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.ResumeCronJob is not implemented"))
}

func (UnimplementedApiServiceHandler) UpdateObjectFields(context.Context, *connect.Request[common.UpdateObjectFieldsRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.UpdateObjectFields is not implemented"))
}

func (UnimplementedApiServiceHandler) GetOpenIdConfiguration(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[system.OpenIdConfiguration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetOpenIdConfiguration is not implemented"))
}

func (UnimplementedApiServiceHandler) GetCryptoSecret(context.Context, *connect.Request[crypto.GetCryptoSecretRequest]) (*connect.Response[crypto.CryptoSecrets], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.GetCryptoSecret is not implemented"))
}

func (UnimplementedApiServiceHandler) SetCryptoSecret(context.Context, *connect.Request[crypto.SetCryptoSecretRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("io.clbs.openhes.services.svcapi.ApiService.SetCryptoSecret is not implemented"))
}
