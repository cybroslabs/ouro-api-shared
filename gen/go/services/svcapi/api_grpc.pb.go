// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/svcapi/api.proto

package svcapi

import (
	context "context"
	acquisition "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition"
	common "github.com/cybroslabs/ouro-api-shared/gen/go/common"
	cronjobs "github.com/cybroslabs/ouro-api-shared/gen/go/cronjobs"
	crypto "github.com/cybroslabs/ouro-api-shared/gen/go/crypto"
	system "github.com/cybroslabs/ouro-api-shared/gen/go/system"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiService_CreateVariable_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/CreateVariable"
	ApiService_ListVariables_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/ListVariables"
	ApiService_GetVariable_FullMethodName                                                      = "/io.clbs.openhes.services.svcapi.ApiService/GetVariable"
	ApiService_UpdateVariable_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/UpdateVariable"
	ApiService_DeleteVariable_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/DeleteVariable"
	ApiService_AddRegisterToVariable_FullMethodName                                            = "/io.clbs.openhes.services.svcapi.ApiService/AddRegisterToVariable"
	ApiService_RemoveRegisterFromVariable_FullMethodName                                       = "/io.clbs.openhes.services.svcapi.ApiService/RemoveRegisterFromVariable"
	ApiService_CreateDeviceConfigurationRegister_FullMethodName                                = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceConfigurationRegister"
	ApiService_ListDeviceConfigurationRegisters_FullMethodName                                 = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceConfigurationRegisters"
	ApiService_GetDeviceConfigurationRegister_FullMethodName                                   = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceConfigurationRegister"
	ApiService_UpdateDeviceConfigurationRegister_FullMethodName                                = "/io.clbs.openhes.services.svcapi.ApiService/UpdateDeviceConfigurationRegister"
	ApiService_DeleteDeviceConfigurationRegister_FullMethodName                                = "/io.clbs.openhes.services.svcapi.ApiService/DeleteDeviceConfigurationRegister"
	ApiService_CreateDeviceConfigurationTemplate_FullMethodName                                = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceConfigurationTemplate"
	ApiService_ListDeviceConfigurationTemplates_FullMethodName                                 = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceConfigurationTemplates"
	ApiService_GetDeviceConfigurationTemplate_FullMethodName                                   = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceConfigurationTemplate"
	ApiService_UpdateDeviceConfigurationTemplate_FullMethodName                                = "/io.clbs.openhes.services.svcapi.ApiService/UpdateDeviceConfigurationTemplate"
	ApiService_DeleteDeviceConfigurationTemplate_FullMethodName                                = "/io.clbs.openhes.services.svcapi.ApiService/DeleteDeviceConfigurationTemplate"
	ApiService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_FullMethodName      = "/io.clbs.openhes.services.svcapi.ApiService/AddDeviceConfigurationRegisterToDeviceConfigurationTemplate"
	ApiService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_FullMethodName = "/io.clbs.openhes.services.svcapi.ApiService/RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate"
	ApiService_CreateFieldDescriptor_FullMethodName                                            = "/io.clbs.openhes.services.svcapi.ApiService/CreateFieldDescriptor"
	ApiService_UpdateFieldDescriptor_FullMethodName                                            = "/io.clbs.openhes.services.svcapi.ApiService/UpdateFieldDescriptor"
	ApiService_DeleteFieldDescriptor_FullMethodName                                            = "/io.clbs.openhes.services.svcapi.ApiService/DeleteFieldDescriptor"
	ApiService_ListFieldDescriptors_FullMethodName                                             = "/io.clbs.openhes.services.svcapi.ApiService/ListFieldDescriptors"
	ApiService_ListFieldDescriptorOptions_FullMethodName                                       = "/io.clbs.openhes.services.svcapi.ApiService/ListFieldDescriptorOptions"
	ApiService_ListBulks_FullMethodName                                                        = "/io.clbs.openhes.services.svcapi.ApiService/ListBulks"
	ApiService_ListBulkJobs_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/ListBulkJobs"
	ApiService_GetBulkJob_FullMethodName                                                       = "/io.clbs.openhes.services.svcapi.ApiService/GetBulkJob"
	ApiService_UpdateBulkJob_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/UpdateBulkJob"
	ApiService_CancelBulk_FullMethodName                                                       = "/io.clbs.openhes.services.svcapi.ApiService/CancelBulk"
	ApiService_CancelBulkJobs_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/CancelBulkJobs"
	ApiService_CreateProxyBulk_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/CreateProxyBulk"
	ApiService_GetProxyBulk_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/GetProxyBulk"
	ApiService_CreateBulk_FullMethodName                                                       = "/io.clbs.openhes.services.svcapi.ApiService/CreateBulk"
	ApiService_GetBulk_FullMethodName                                                          = "/io.clbs.openhes.services.svcapi.ApiService/GetBulk"
	ApiService_UpdateBulk_FullMethodName                                                       = "/io.clbs.openhes.services.svcapi.ApiService/UpdateBulk"
	ApiService_ListDrivers_FullMethodName                                                      = "/io.clbs.openhes.services.svcapi.ApiService/ListDrivers"
	ApiService_GetDriver_FullMethodName                                                        = "/io.clbs.openhes.services.svcapi.ApiService/GetDriver"
	ApiService_CreateCommunicationUnit_FullMethodName                                          = "/io.clbs.openhes.services.svcapi.ApiService/CreateCommunicationUnit"
	ApiService_UpdateCommunicationUnit_FullMethodName                                          = "/io.clbs.openhes.services.svcapi.ApiService/UpdateCommunicationUnit"
	ApiService_ListCommunicationUnits_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationUnits"
	ApiService_GetCommunicationUnit_FullMethodName                                             = "/io.clbs.openhes.services.svcapi.ApiService/GetCommunicationUnit"
	ApiService_DeleteCommunicationUnit_FullMethodName                                          = "/io.clbs.openhes.services.svcapi.ApiService/DeleteCommunicationUnit"
	ApiService_GetCommunicationUnitNetworkMap_FullMethodName                                   = "/io.clbs.openhes.services.svcapi.ApiService/GetCommunicationUnitNetworkMap"
	ApiService_ListCommunicationUnitLogRecords_FullMethodName                                  = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationUnitLogRecords"
	ApiService_CreateCommunicationBus_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/CreateCommunicationBus"
	ApiService_ListCommunicationBuses_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/ListCommunicationBuses"
	ApiService_DeleteCommunicationBus_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/DeleteCommunicationBus"
	ApiService_AddCommunicationUnitsToCommunicationBus_FullMethodName                          = "/io.clbs.openhes.services.svcapi.ApiService/AddCommunicationUnitsToCommunicationBus"
	ApiService_RemoveCommunicationUnitsFromCommunicationBus_FullMethodName                     = "/io.clbs.openhes.services.svcapi.ApiService/RemoveCommunicationUnitsFromCommunicationBus"
	ApiService_CreateDevice_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/CreateDevice"
	ApiService_UpdateDevice_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/UpdateDevice"
	ApiService_ListDevices_FullMethodName                                                      = "/io.clbs.openhes.services.svcapi.ApiService/ListDevices"
	ApiService_GetDevice_FullMethodName                                                        = "/io.clbs.openhes.services.svcapi.ApiService/GetDevice"
	ApiService_DeleteDevice_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/DeleteDevice"
	ApiService_GetDeviceInfo_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceInfo"
	ApiService_SetDeviceCommunicationUnits_FullMethodName                                      = "/io.clbs.openhes.services.svcapi.ApiService/SetDeviceCommunicationUnits"
	ApiService_GetDeviceCommunicationUnits_FullMethodName                                      = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceCommunicationUnits"
	ApiService_ListDeviceCommunicationUnitChanges_FullMethodName                               = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceCommunicationUnitChanges"
	ApiService_GetDeviceDeviceGroups_FullMethodName                                            = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDeviceGroups"
	ApiService_GetDeviceNetworkMap_FullMethodName                                              = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceNetworkMap"
	ApiService_GetDeviceBulks_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceBulks"
	ApiService_CreateDeviceGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcapi.ApiService/CreateDeviceGroup"
	ApiService_ListDeviceGroups_FullMethodName                                                 = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceGroups"
	ApiService_GetDeviceGroup_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceGroup"
	ApiService_DeleteDeviceGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcapi.ApiService/DeleteDeviceGroup"
	ApiService_AddDevicesToGroup_FullMethodName                                                = "/io.clbs.openhes.services.svcapi.ApiService/AddDevicesToGroup"
	ApiService_RemoveDevicesFromGroup_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/RemoveDevicesFromGroup"
	ApiService_ListDeviceGroupDevices_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceGroupDevices"
	ApiService_ListModemPools_FullMethodName                                                   = "/io.clbs.openhes.services.svcapi.ApiService/ListModemPools"
	ApiService_GetModemPool_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/GetModemPool"
	ApiService_CreateModemPool_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/CreateModemPool"
	ApiService_UpdateModemPool_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/UpdateModemPool"
	ApiService_DeleteModemPool_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/DeleteModemPool"
	ApiService_CreateModem_FullMethodName                                                      = "/io.clbs.openhes.services.svcapi.ApiService/CreateModem"
	ApiService_UpdateModem_FullMethodName                                                      = "/io.clbs.openhes.services.svcapi.ApiService/UpdateModem"
	ApiService_DeleteModem_FullMethodName                                                      = "/io.clbs.openhes.services.svcapi.ApiService/DeleteModem"
	ApiService_GetApplicationConfig_FullMethodName                                             = "/io.clbs.openhes.services.svcapi.ApiService/GetApplicationConfig"
	ApiService_UpdateApplicationConfig_FullMethodName                                          = "/io.clbs.openhes.services.svcapi.ApiService/UpdateApplicationConfig"
	ApiService_SynchronizeComponentConfig_FullMethodName                                       = "/io.clbs.openhes.services.svcapi.ApiService/SynchronizeComponentConfig"
	ApiService_GetDeviceData_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceData"
	ApiService_ListDeviceDataInfo_FullMethodName                                               = "/io.clbs.openhes.services.svcapi.ApiService/ListDeviceDataInfo"
	ApiService_GetDeviceDataRegisters_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDataRegisters"
	ApiService_GetDeviceDataProfiles_FullMethodName                                            = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDataProfiles"
	ApiService_GetDeviceDataIrregularProfiles_FullMethodName                                   = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceDataIrregularProfiles"
	ApiService_GetDeviceEvents_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/GetDeviceEvents"
	ApiService_CreateTimeOfUseTable_FullMethodName                                             = "/io.clbs.openhes.services.svcapi.ApiService/CreateTimeOfUseTable"
	ApiService_ListTimeOfUseTables_FullMethodName                                              = "/io.clbs.openhes.services.svcapi.ApiService/ListTimeOfUseTables"
	ApiService_GetTimeOfUseTable_FullMethodName                                                = "/io.clbs.openhes.services.svcapi.ApiService/GetTimeOfUseTable"
	ApiService_UpdateTimeOfUseTable_FullMethodName                                             = "/io.clbs.openhes.services.svcapi.ApiService/UpdateTimeOfUseTable"
	ApiService_DeleteTimeOfUseTable_FullMethodName                                             = "/io.clbs.openhes.services.svcapi.ApiService/DeleteTimeOfUseTable"
	ApiService_CreateCronJob_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/CreateCronJob"
	ApiService_ListCronJobs_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/ListCronJobs"
	ApiService_GetCronJob_FullMethodName                                                       = "/io.clbs.openhes.services.svcapi.ApiService/GetCronJob"
	ApiService_UpdateCronJob_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/UpdateCronJob"
	ApiService_DeleteCronJob_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/DeleteCronJob"
	ApiService_RunCronJob_FullMethodName                                                       = "/io.clbs.openhes.services.svcapi.ApiService/RunCronJob"
	ApiService_PauseCronJob_FullMethodName                                                     = "/io.clbs.openhes.services.svcapi.ApiService/PauseCronJob"
	ApiService_ResumeCronJob_FullMethodName                                                    = "/io.clbs.openhes.services.svcapi.ApiService/ResumeCronJob"
	ApiService_UpdateObjectFields_FullMethodName                                               = "/io.clbs.openhes.services.svcapi.ApiService/UpdateObjectFields"
	ApiService_GetOpenIdConfiguration_FullMethodName                                           = "/io.clbs.openhes.services.svcapi.ApiService/GetOpenIdConfiguration"
	ApiService_GetCryptoSecret_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/GetCryptoSecret"
	ApiService_SetCryptoSecret_FullMethodName                                                  = "/io.clbs.openhes.services.svcapi.ApiService/SetCryptoSecret"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The Dataproxy related service definition.
type ApiServiceClient interface {
	// @group: Variables
	// Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
	CreateVariable(ctx context.Context, in *acquisition.CreateVariableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Variables
	ListVariables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfVariable, error)
	// @group: Variables
	GetVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Variable, error)
	// @group: Variables
	UpdateVariable(ctx context.Context, in *acquisition.Variable, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Variables
	DeleteVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Variables
	AddRegisterToVariable(ctx context.Context, in *acquisition.AddRegisterToVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Variables
	RemoveRegisterFromVariable(ctx context.Context, in *acquisition.RemoveRegisterFromVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Device Configuration Register
	// Creates a new register. The register object holds the information about the single device register.
	CreateDeviceConfigurationRegister(ctx context.Context, in *acquisition.CreateDeviceConfigurationRegisterRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Device Configuration Register
	ListDeviceConfigurationRegisters(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationRegister, error)
	// @group: Device Configuration Register
	GetDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationRegister, error)
	// @group: Device Configuration Register
	UpdateDeviceConfigurationRegister(ctx context.Context, in *acquisition.DeviceConfigurationRegister, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Device Configuration Register
	DeleteDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	CreateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.CreateDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Device Configuration Templates
	ListDeviceConfigurationTemplates(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationTemplate, error)
	// @group: Device Configuration Templates
	GetDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationTemplate, error)
	// @group: Device Configuration Templates
	UpdateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.DeviceConfigurationTemplate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	DeleteDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context, in *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context, in *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Fields
	// The method to create a new field descriptor user-defined field descriptor.
	CreateFieldDescriptor(ctx context.Context, in *common.CreateFieldDescriptorRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Fields
	// The method to update the field descriptor.
	UpdateFieldDescriptor(ctx context.Context, in *common.FieldDescriptor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Fields
	// The method to delete the field descriptor.
	DeleteFieldDescriptor(ctx context.Context, in *common.FieldDescriptorSelector, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Fields
	// The method to get the list of fields.
	ListFieldDescriptors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.ListOfFieldDescriptor, error)
	// @group: Fields
	// The method to get the options for the field descriptor.
	ListFieldDescriptorOptions(ctx context.Context, in *common.ListFieldDescriptorOptionsRequest, opts ...grpc.CallOption) (*common.FieldDescriptorOptions, error)
	// @group: Bulks
	// Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
	// The list contains both the proxy bulks and the regular bulks.
	ListBulks(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfBulk, error)
	// @group: Bulks
	// Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
	// The listing can be used for both proxy bulks and regular bulks.
	ListBulkJobs(ctx context.Context, in *acquisition.ListBulkJobsRequest, opts ...grpc.CallOption) (*acquisition.ListOfBulkJob, error)
	// @group: Bulks
	// Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
	GetBulkJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.BulkJob, error)
	// @group: Bulks
	// Updates the job metadata. The metadata is used to store additional information about the job.
	UpdateBulkJob(ctx context.Context, in *common.UpdateMetadata, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Bulks
	// Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
	CancelBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Bulks
	// Cancels the job(s) identified by the job identifier(s).
	CancelBulkJobs(ctx context.Context, in *common.ListOfId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
	CreateProxyBulk(ctx context.Context, in *acquisition.CreateProxyBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the proxy bulk info and status.
	GetProxyBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ProxyBulk, error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
	CreateBulk(ctx context.Context, in *acquisition.CreateBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Bulk, error)
	// @group: Bulks
	// Updates the bulk metadata. The metadata is used to store additional information about the job.
	UpdateBulk(ctx context.Context, in *common.UpdateMetadata, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	ListDrivers(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDriver, error)
	// @group: Driver Info
	// Retrieves the driver.
	GetDriver(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Driver, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(ctx context.Context, in *acquisition.CreateCommunicationUnitRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationunit
	// The method updates the communication unit. The parameter contains the communication unit specification.
	UpdateCommunicationUnit(ctx context.Context, in *acquisition.CommunicationUnit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnits(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.CommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// Deletes the communication unit. The parameter contains the communication unit identifier.
	DeleteCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetCommunicationUnitNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error)
	// @group: Drivers
	// @tag: communicationunit
	// Returns the list of communication unit log records.
	ListCommunicationUnitLogRecords(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnitLogRecord, error)
	// @group: Devices
	// @tag: communicationbus
	CreateCommunicationBus(ctx context.Context, in *acquisition.CreateCommunicationBusRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationbus
	ListCommunicationBuses(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationBus, error)
	// @group: Devices
	// @tag: communicationbus
	// Deletes the communication bus. The parameter contains the communication bus identifier.
	DeleteCommunicationBus(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	AddCommunicationUnitsToCommunicationBus(ctx context.Context, in *acquisition.AddCommunicationUnitsToCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	RemoveCommunicationUnitsFromCommunicationBus(ctx context.Context, in *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// Creates a new device. The device object defines the device specification.
	CreateDevice(ctx context.Context, in *acquisition.CreateDeviceRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: device
	// The method updates the device. The parameter contains the device specification.
	UpdateDevice(ctx context.Context, in *acquisition.Device, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Device, error)
	// @group: Devices
	// @tag: device
	// Deletes the device. The parameter contains the device identifier.
	DeleteDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// The method to stream out profile-typed device info.
	GetDeviceInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceInfo, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(ctx context.Context, in *acquisition.SetDeviceCommunicationUnitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDeviceCommunicationUnits(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnit, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the list of device communication unit changes.
	ListDeviceCommunicationUnitChanges(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnitChange, error)
	// @group: Devices
	// @tag: device
	// The method returns a list of device groups that contain the device. The parameter contains the device identifier.
	GetDeviceDeviceGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error)
	// @group: Devices
	// @tag: device
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetDeviceNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error)
	// @group: Bulks
	// Retrieves the list of bulk jobs related to given device in the specified time range. All the parameters are required.
	GetDeviceBulks(ctx context.Context, in *acquisition.GetDeviceBulksRequest, opts ...grpc.CallOption) (*acquisition.DeviceBulks, error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(ctx context.Context, in *acquisition.CreateDeviceGroupRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	ListDeviceGroups(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceGroup, error)
	// @group: Devices
	// @tag: devicegroup
	// Deletes the device group. The parameter contains the device group identifier.
	DeleteDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(ctx context.Context, in *acquisition.AddDevicesToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(ctx context.Context, in *acquisition.RemoveDevicesFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: devicegroup
	ListDeviceGroupDevices(ctx context.Context, in *acquisition.ListDeviceGroupDevicesRequest, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	ListModemPools(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfModemPool, error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ModemPool, error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem.
	DeleteModem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Configuration
	// Gets the application configuration.
	GetApplicationConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.ApplicationConfigDescriptor, error)
	// @group: Configuration
	// Updates the application configuration. The missing fields in the request will be kept unchanged.
	UpdateApplicationConfig(ctx context.Context, in *system.ApplicationConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Configuration
	// Synchronizes the application configuration. The input value shall contain all the default values and also all known keys (with null values).
	// The output value will contain currently set values including details which are not set.
	// The missing values in the defaults will be deleted if has been set previously in the application configuration.
	SynchronizeComponentConfig(ctx context.Context, in *system.ComponentConfigDescriptor, opts ...grpc.CallOption) (*system.ComponentConfig, error)
	// @group: Device Data
	// The method to returns register/profile/irregular-profile typed device data. The method is generic but limited to return
	GetDeviceData(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (*acquisition.DeviceData, error)
	// @group: Device Data
	// The method to get the list of device data info. The device data info contains various metadata, such as a period of the regular profiles or a timestamp of the last stored value.
	ListDeviceDataInfo(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceDataInfo, error)
	// @group: Device Data
	// The method to stream out register-typed device data.
	GetDeviceDataRegisters(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.RegisterValues], error)
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataProfiles(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.ProfileValues], error)
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataIrregularProfiles(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.IrregularProfileValues], error)
	// @group: Device Events
	// The method to stream out profile-typed device events.
	GetDeviceEvents(ctx context.Context, in *acquisition.GetDeviceEventsRequest, opts ...grpc.CallOption) (*acquisition.DeviceEvents, error)
	// @group: Time-Of-Use Tables
	// The method to create a new time-of-use table.
	CreateTimeOfUseTable(ctx context.Context, in *acquisition.CreateTimeOfUseTableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Time-Of-Use Tables
	// The method to get the list of time-of-use tables.
	ListTimeOfUseTables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfTimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// The method to get the time-of-use table.
	GetTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.TimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// The method to update the time-of-use table.
	UpdateTimeOfUseTable(ctx context.Context, in *acquisition.TimeOfUseTable, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Time-Of-Use Tables
	// The method to delete the time-of-use table.
	DeleteTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to create a new cron job.
	CreateCronJob(ctx context.Context, in *cronjobs.CreateCronJobRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	// @group: Cron Jobs
	// The method to get the list of cron jobs.
	ListCronJobs(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*cronjobs.ListOfCronJob, error)
	// @group: Cron Jobs
	// The method to get the cron job.
	GetCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*cronjobs.CronJob, error)
	// @group: Cron Jobs
	// The method to update the cron job.
	UpdateCronJob(ctx context.Context, in *cronjobs.CronJob, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to delete the cron job.
	DeleteCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to run the cron job immediately.
	RunCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to pause the cron job.
	PauseCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to resume the cron job.
	ResumeCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: Metadata
	// The method sets the fields of an object. The values are merged with the existing fields to preserve the existing fields that are not set in the request.
	UpdateObjectFields(ctx context.Context, in *common.UpdateObjectFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// @group: System
	// The method returns the OIDC configuration, proxied directly from the configured OIDC service.
	// All the authenticated endpoints shall be protected by token from this OIDC service.
	GetOpenIdConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.OpenIdConfiguration, error)
	// @group: Cryptography
	// The method returns a secret based on the request.
	GetCryptoSecret(ctx context.Context, in *crypto.GetCryptoSecretRequest, opts ...grpc.CallOption) (*crypto.CryptoSecrets, error)
	// @group: Cryptography
	// The method to store (create or replace) the secret.
	SetCryptoSecret(ctx context.Context, in *crypto.SetCryptoSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) CreateVariable(ctx context.Context, in *acquisition.CreateVariableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListVariables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfVariable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfVariable)
	err := c.cc.Invoke(ctx, ApiService_ListVariables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Variable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Variable)
	err := c.cc.Invoke(ctx, ApiService_GetVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateVariable(ctx context.Context, in *acquisition.Variable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteVariable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddRegisterToVariable(ctx context.Context, in *acquisition.AddRegisterToVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_AddRegisterToVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RemoveRegisterFromVariable(ctx context.Context, in *acquisition.RemoveRegisterFromVariableRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_RemoveRegisterFromVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateDeviceConfigurationRegister(ctx context.Context, in *acquisition.CreateDeviceConfigurationRegisterRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDeviceConfigurationRegisters(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationRegister, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceConfigurationRegister)
	err := c.cc.Invoke(ctx, ApiService_ListDeviceConfigurationRegisters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationRegister, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceConfigurationRegister)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateDeviceConfigurationRegister(ctx context.Context, in *acquisition.DeviceConfigurationRegister, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteDeviceConfigurationRegister(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteDeviceConfigurationRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.CreateDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDeviceConfigurationTemplates(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceConfigurationTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceConfigurationTemplate)
	err := c.cc.Invoke(ctx, ApiService_ListDeviceConfigurationTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceConfigurationTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceConfigurationTemplate)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateDeviceConfigurationTemplate(ctx context.Context, in *acquisition.DeviceConfigurationTemplate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteDeviceConfigurationTemplate(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context, in *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context, in *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateFieldDescriptor(ctx context.Context, in *common.CreateFieldDescriptorRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateFieldDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateFieldDescriptor(ctx context.Context, in *common.FieldDescriptor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateFieldDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteFieldDescriptor(ctx context.Context, in *common.FieldDescriptorSelector, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteFieldDescriptor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListFieldDescriptors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*common.ListOfFieldDescriptor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.ListOfFieldDescriptor)
	err := c.cc.Invoke(ctx, ApiService_ListFieldDescriptors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListFieldDescriptorOptions(ctx context.Context, in *common.ListFieldDescriptorOptionsRequest, opts ...grpc.CallOption) (*common.FieldDescriptorOptions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.FieldDescriptorOptions)
	err := c.cc.Invoke(ctx, ApiService_ListFieldDescriptorOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListBulks(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfBulk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfBulk)
	err := c.cc.Invoke(ctx, ApiService_ListBulks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListBulkJobs(ctx context.Context, in *acquisition.ListBulkJobsRequest, opts ...grpc.CallOption) (*acquisition.ListOfBulkJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfBulkJob)
	err := c.cc.Invoke(ctx, ApiService_ListBulkJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBulkJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.BulkJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.BulkJob)
	err := c.cc.Invoke(ctx, ApiService_GetBulkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateBulkJob(ctx context.Context, in *common.UpdateMetadata, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateBulkJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_CancelBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CancelBulkJobs(ctx context.Context, in *common.ListOfId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_CancelBulkJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateProxyBulk(ctx context.Context, in *acquisition.CreateProxyBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateProxyBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetProxyBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ProxyBulk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ProxyBulk)
	err := c.cc.Invoke(ctx, ApiService_GetProxyBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateBulk(ctx context.Context, in *acquisition.CreateBulkRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetBulk(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Bulk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Bulk)
	err := c.cc.Invoke(ctx, ApiService_GetBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateBulk(ctx context.Context, in *common.UpdateMetadata, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateBulk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDrivers(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDriver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDriver)
	err := c.cc.Invoke(ctx, ApiService_ListDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDriver(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Driver, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Driver)
	err := c.cc.Invoke(ctx, ApiService_GetDriver_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateCommunicationUnit(ctx context.Context, in *acquisition.CreateCommunicationUnitRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateCommunicationUnit(ctx context.Context, in *acquisition.CommunicationUnit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCommunicationUnits(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationUnit)
	err := c.cc.Invoke(ctx, ApiService_ListCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.CommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.CommunicationUnit)
	err := c.cc.Invoke(ctx, ApiService_GetCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteCommunicationUnit(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteCommunicationUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCommunicationUnitNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.NetworkMap)
	err := c.cc.Invoke(ctx, ApiService_GetCommunicationUnitNetworkMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCommunicationUnitLogRecords(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationUnitLogRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationUnitLogRecord)
	err := c.cc.Invoke(ctx, ApiService_ListCommunicationUnitLogRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateCommunicationBus(ctx context.Context, in *acquisition.CreateCommunicationBusRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCommunicationBuses(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfCommunicationBus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfCommunicationBus)
	err := c.cc.Invoke(ctx, ApiService_ListCommunicationBuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteCommunicationBus(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddCommunicationUnitsToCommunicationBus(ctx context.Context, in *acquisition.AddCommunicationUnitsToCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_AddCommunicationUnitsToCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RemoveCommunicationUnitsFromCommunicationBus(ctx context.Context, in *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_RemoveCommunicationUnitsFromCommunicationBus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateDevice(ctx context.Context, in *acquisition.CreateDeviceRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateDevice(ctx context.Context, in *acquisition.Device, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDevices(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDevice)
	err := c.cc.Invoke(ctx, ApiService_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.Device, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.Device)
	err := c.cc.Invoke(ctx, ApiService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteDevice(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceInfo(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceInfo)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetDeviceCommunicationUnits(ctx context.Context, in *acquisition.SetDeviceCommunicationUnitsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_SetDeviceCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceCommunicationUnits(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceCommunicationUnit)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceCommunicationUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDeviceCommunicationUnitChanges(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceCommunicationUnitChange, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceCommunicationUnitChange)
	err := c.cc.Invoke(ctx, ApiService_ListDeviceCommunicationUnitChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceDeviceGroups(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceGroup)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceDeviceGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceNetworkMap(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.NetworkMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.NetworkMap)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceNetworkMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceBulks(ctx context.Context, in *acquisition.GetDeviceBulksRequest, opts ...grpc.CallOption) (*acquisition.DeviceBulks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceBulks)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceBulks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateDeviceGroup(ctx context.Context, in *acquisition.CreateDeviceGroupRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDeviceGroups(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceGroup)
	err := c.cc.Invoke(ctx, ApiService_ListDeviceGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.DeviceGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceGroup)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteDeviceGroup(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteDeviceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) AddDevicesToGroup(ctx context.Context, in *acquisition.AddDevicesToGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_AddDevicesToGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RemoveDevicesFromGroup(ctx context.Context, in *acquisition.RemoveDevicesFromGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_RemoveDevicesFromGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDeviceGroupDevices(ctx context.Context, in *acquisition.ListDeviceGroupDevicesRequest, opts ...grpc.CallOption) (*acquisition.ListOfDevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDevice)
	err := c.cc.Invoke(ctx, ApiService_ListDeviceGroupDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListModemPools(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfModemPool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfModemPool)
	err := c.cc.Invoke(ctx, ApiService_ListModemPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.ModemPool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ModemPool)
	err := c.cc.Invoke(ctx, ApiService_GetModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateModemPool(ctx context.Context, in *acquisition.SetModemPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteModemPool(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteModemPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateModem(ctx context.Context, in *acquisition.SetModemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteModem(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteModem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetApplicationConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.ApplicationConfigDescriptor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(system.ApplicationConfigDescriptor)
	err := c.cc.Invoke(ctx, ApiService_GetApplicationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateApplicationConfig(ctx context.Context, in *system.ApplicationConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateApplicationConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SynchronizeComponentConfig(ctx context.Context, in *system.ComponentConfigDescriptor, opts ...grpc.CallOption) (*system.ComponentConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(system.ComponentConfig)
	err := c.cc.Invoke(ctx, ApiService_SynchronizeComponentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceData(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (*acquisition.DeviceData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceData)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListDeviceDataInfo(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfDeviceDataInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfDeviceDataInfo)
	err := c.cc.Invoke(ctx, ApiService_ListDeviceDataInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetDeviceDataRegisters(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.RegisterValues], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], ApiService_GetDeviceDataRegisters_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetDeviceDataRequest, acquisition.RegisterValues]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiService_GetDeviceDataRegistersClient = grpc.ServerStreamingClient[acquisition.RegisterValues]

func (c *apiServiceClient) GetDeviceDataProfiles(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.ProfileValues], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[1], ApiService_GetDeviceDataProfiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetDeviceDataRequest, acquisition.ProfileValues]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiService_GetDeviceDataProfilesClient = grpc.ServerStreamingClient[acquisition.ProfileValues]

func (c *apiServiceClient) GetDeviceDataIrregularProfiles(ctx context.Context, in *acquisition.GetDeviceDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[acquisition.IrregularProfileValues], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[2], ApiService_GetDeviceDataIrregularProfiles_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[acquisition.GetDeviceDataRequest, acquisition.IrregularProfileValues]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiService_GetDeviceDataIrregularProfilesClient = grpc.ServerStreamingClient[acquisition.IrregularProfileValues]

func (c *apiServiceClient) GetDeviceEvents(ctx context.Context, in *acquisition.GetDeviceEventsRequest, opts ...grpc.CallOption) (*acquisition.DeviceEvents, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.DeviceEvents)
	err := c.cc.Invoke(ctx, ApiService_GetDeviceEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateTimeOfUseTable(ctx context.Context, in *acquisition.CreateTimeOfUseTableRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListTimeOfUseTables(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*acquisition.ListOfTimeOfUseTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.ListOfTimeOfUseTable)
	err := c.cc.Invoke(ctx, ApiService_ListTimeOfUseTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*acquisition.TimeOfUseTable, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(acquisition.TimeOfUseTable)
	err := c.cc.Invoke(ctx, ApiService_GetTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateTimeOfUseTable(ctx context.Context, in *acquisition.TimeOfUseTable, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteTimeOfUseTable(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteTimeOfUseTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateCronJob(ctx context.Context, in *cronjobs.CreateCronJobRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, ApiService_CreateCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCronJobs(ctx context.Context, in *common.ListSelector, opts ...grpc.CallOption) (*cronjobs.ListOfCronJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(cronjobs.ListOfCronJob)
	err := c.cc.Invoke(ctx, ApiService_ListCronJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*cronjobs.CronJob, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(cronjobs.CronJob)
	err := c.cc.Invoke(ctx, ApiService_GetCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateCronJob(ctx context.Context, in *cronjobs.CronJob, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_DeleteCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RunCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_RunCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) PauseCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_PauseCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ResumeCronJob(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_ResumeCronJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateObjectFields(ctx context.Context, in *common.UpdateObjectFieldsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_UpdateObjectFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetOpenIdConfiguration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*system.OpenIdConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(system.OpenIdConfiguration)
	err := c.cc.Invoke(ctx, ApiService_GetOpenIdConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCryptoSecret(ctx context.Context, in *crypto.GetCryptoSecretRequest, opts ...grpc.CallOption) (*crypto.CryptoSecrets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(crypto.CryptoSecrets)
	err := c.cc.Invoke(ctx, ApiService_GetCryptoSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SetCryptoSecret(ctx context.Context, in *crypto.SetCryptoSecretRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiService_SetCryptoSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility.
//
// The Dataproxy related service definition.
type ApiServiceServer interface {
	// @group: Variables
	// Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
	CreateVariable(context.Context, *acquisition.CreateVariableRequest) (*wrapperspb.StringValue, error)
	// @group: Variables
	ListVariables(context.Context, *common.ListSelector) (*acquisition.ListOfVariable, error)
	// @group: Variables
	GetVariable(context.Context, *wrapperspb.StringValue) (*acquisition.Variable, error)
	// @group: Variables
	UpdateVariable(context.Context, *acquisition.Variable) (*emptypb.Empty, error)
	// @group: Variables
	DeleteVariable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Variables
	AddRegisterToVariable(context.Context, *acquisition.AddRegisterToVariableRequest) (*emptypb.Empty, error)
	// @group: Variables
	RemoveRegisterFromVariable(context.Context, *acquisition.RemoveRegisterFromVariableRequest) (*emptypb.Empty, error)
	// @group: Device Configuration Register
	// Creates a new register. The register object holds the information about the single device register.
	CreateDeviceConfigurationRegister(context.Context, *acquisition.CreateDeviceConfigurationRegisterRequest) (*wrapperspb.StringValue, error)
	// @group: Device Configuration Register
	ListDeviceConfigurationRegisters(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationRegister, error)
	// @group: Device Configuration Register
	GetDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationRegister, error)
	// @group: Device Configuration Register
	UpdateDeviceConfigurationRegister(context.Context, *acquisition.DeviceConfigurationRegister) (*emptypb.Empty, error)
	// @group: Device Configuration Register
	DeleteDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	CreateDeviceConfigurationTemplate(context.Context, *acquisition.CreateDeviceConfigurationTemplateRequest) (*wrapperspb.StringValue, error)
	// @group: Device Configuration Templates
	ListDeviceConfigurationTemplates(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationTemplate, error)
	// @group: Device Configuration Templates
	GetDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationTemplate, error)
	// @group: Device Configuration Templates
	UpdateDeviceConfigurationTemplate(context.Context, *acquisition.DeviceConfigurationTemplate) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	DeleteDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) (*emptypb.Empty, error)
	// @group: Device Configuration Templates
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) (*emptypb.Empty, error)
	// @group: Fields
	// The method to create a new field descriptor user-defined field descriptor.
	CreateFieldDescriptor(context.Context, *common.CreateFieldDescriptorRequest) (*wrapperspb.StringValue, error)
	// @group: Fields
	// The method to update the field descriptor.
	UpdateFieldDescriptor(context.Context, *common.FieldDescriptor) (*emptypb.Empty, error)
	// @group: Fields
	// The method to delete the field descriptor.
	DeleteFieldDescriptor(context.Context, *common.FieldDescriptorSelector) (*emptypb.Empty, error)
	// @group: Fields
	// The method to get the list of fields.
	ListFieldDescriptors(context.Context, *emptypb.Empty) (*common.ListOfFieldDescriptor, error)
	// @group: Fields
	// The method to get the options for the field descriptor.
	ListFieldDescriptorOptions(context.Context, *common.ListFieldDescriptorOptionsRequest) (*common.FieldDescriptorOptions, error)
	// @group: Bulks
	// Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
	// The list contains both the proxy bulks and the regular bulks.
	ListBulks(context.Context, *common.ListSelector) (*acquisition.ListOfBulk, error)
	// @group: Bulks
	// Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
	// The listing can be used for both proxy bulks and regular bulks.
	ListBulkJobs(context.Context, *acquisition.ListBulkJobsRequest) (*acquisition.ListOfBulkJob, error)
	// @group: Bulks
	// Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
	GetBulkJob(context.Context, *wrapperspb.StringValue) (*acquisition.BulkJob, error)
	// @group: Bulks
	// Updates the job metadata. The metadata is used to store additional information about the job.
	UpdateBulkJob(context.Context, *common.UpdateMetadata) (*emptypb.Empty, error)
	// @group: Bulks
	// Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
	CancelBulk(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Bulks
	// Cancels the job(s) identified by the job identifier(s).
	CancelBulkJobs(context.Context, *common.ListOfId) (*emptypb.Empty, error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
	CreateProxyBulk(context.Context, *acquisition.CreateProxyBulkRequest) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the proxy bulk info and status.
	GetProxyBulk(context.Context, *wrapperspb.StringValue) (*acquisition.ProxyBulk, error)
	// @group: Bulks
	// @tag: acquisition
	// @tag: action
	// Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
	CreateBulk(context.Context, *acquisition.CreateBulkRequest) (*wrapperspb.StringValue, error)
	// @group: Bulks
	// Retrieves the bulk info and status.
	GetBulk(context.Context, *wrapperspb.StringValue) (*acquisition.Bulk, error)
	// @group: Bulks
	// Updates the bulk metadata. The metadata is used to store additional information about the job.
	UpdateBulk(context.Context, *common.UpdateMetadata) (*emptypb.Empty, error)
	// @group: Driver Info
	// Retrieves the list of drivers.
	ListDrivers(context.Context, *common.ListSelector) (*acquisition.ListOfDriver, error)
	// @group: Driver Info
	// Retrieves the driver.
	GetDriver(context.Context, *wrapperspb.StringValue) (*acquisition.Driver, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
	CreateCommunicationUnit(context.Context, *acquisition.CreateCommunicationUnitRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationunit
	// The method updates the communication unit. The parameter contains the communication unit specification.
	UpdateCommunicationUnit(context.Context, *acquisition.CommunicationUnit) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	ListCommunicationUnits(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
	GetCommunicationUnit(context.Context, *wrapperspb.StringValue) (*acquisition.CommunicationUnit, error)
	// @group: Devices
	// @tag: communicationunit
	// Deletes the communication unit. The parameter contains the communication unit identifier.
	DeleteCommunicationUnit(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationunit
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetCommunicationUnitNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error)
	// @group: Drivers
	// @tag: communicationunit
	// Returns the list of communication unit log records.
	ListCommunicationUnitLogRecords(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnitLogRecord, error)
	// @group: Devices
	// @tag: communicationbus
	CreateCommunicationBus(context.Context, *acquisition.CreateCommunicationBusRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: communicationbus
	ListCommunicationBuses(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationBus, error)
	// @group: Devices
	// @tag: communicationbus
	// Deletes the communication bus. The parameter contains the communication bus identifier.
	DeleteCommunicationBus(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	AddCommunicationUnitsToCommunicationBus(context.Context, *acquisition.AddCommunicationUnitsToCommunicationBusRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: communicationbus
	RemoveCommunicationUnitsFromCommunicationBus(context.Context, *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// Creates a new device. The device object defines the device specification.
	CreateDevice(context.Context, *acquisition.CreateDeviceRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: device
	// The method updates the device. The parameter contains the device specification.
	UpdateDevice(context.Context, *acquisition.Device) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	ListDevices(context.Context, *common.ListSelector) (*acquisition.ListOfDevice, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
	GetDevice(context.Context, *wrapperspb.StringValue) (*acquisition.Device, error)
	// @group: Devices
	// @tag: device
	// Deletes the device. The parameter contains the device identifier.
	DeleteDevice(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// The method to stream out profile-typed device info.
	GetDeviceInfo(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceInfo, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to replace ordered set of linked communication units.
	SetDeviceCommunicationUnits(context.Context, *acquisition.SetDeviceCommunicationUnitsRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get communication units definitions linked to the device(s).
	GetDeviceCommunicationUnits(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceCommunicationUnit, error)
	// @group: Devices
	// @tag: device
	// The method called by the RestAPI to get the list of device communication unit changes.
	ListDeviceCommunicationUnitChanges(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceCommunicationUnitChange, error)
	// @group: Devices
	// @tag: device
	// The method returns a list of device groups that contain the device. The parameter contains the device identifier.
	GetDeviceDeviceGroups(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceGroup, error)
	// @group: Devices
	// @tag: device
	// Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
	GetDeviceNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error)
	// @group: Bulks
	// Retrieves the list of bulk jobs related to given device in the specified time range. All the parameters are required.
	GetDeviceBulks(context.Context, *acquisition.GetDeviceBulksRequest) (*acquisition.DeviceBulks, error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
	CreateDeviceGroup(context.Context, *acquisition.CreateDeviceGroupRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns a list of device groups.
	ListDeviceGroups(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceGroup, error)
	// @group: Devices
	// @tag: devicegroup
	// The method returns single device group.
	// @param The device group identifier.
	// @return The device group specification.
	GetDeviceGroup(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceGroup, error)
	// @group: Devices
	// @tag: devicegroup
	// Deletes the device group. The parameter contains the device group identifier.
	DeleteDeviceGroup(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
	AddDevicesToGroup(context.Context, *acquisition.AddDevicesToGroupRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: devicegroup
	// The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
	RemoveDevicesFromGroup(context.Context, *acquisition.RemoveDevicesFromGroupRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: devicegroup
	ListDeviceGroupDevices(context.Context, *acquisition.ListDeviceGroupDevicesRequest) (*acquisition.ListOfDevice, error)
	// @group: Devices
	// @tag: modempool
	// The method to get list of the modem pools.
	ListModemPools(context.Context, *common.ListSelector) (*acquisition.ListOfModemPool, error)
	// @group: Devices
	// @tag: modempool
	// The method to get the information about the modem pool. The method returns the modem pool information.
	GetModemPool(context.Context, *wrapperspb.StringValue) (*acquisition.ModemPool, error)
	// @group: Devices
	// @tag: modempool
	// The method to create a new modem pool.
	CreateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: modempool
	// The method to update the modem pool.
	UpdateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: modempool
	// The method to delete the modem pool.
	DeleteModemPool(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: modem
	// The method to create a new modem within the pool.
	CreateModem(context.Context, *acquisition.SetModemRequest) (*wrapperspb.StringValue, error)
	// @group: Devices
	// @tag: modem
	// The method to update the modem within the pool.
	UpdateModem(context.Context, *acquisition.SetModemRequest) (*emptypb.Empty, error)
	// @group: Devices
	// @tag: modem
	// The method to delete the modem.
	DeleteModem(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Configuration
	// Gets the application configuration.
	GetApplicationConfig(context.Context, *emptypb.Empty) (*system.ApplicationConfigDescriptor, error)
	// @group: Configuration
	// Updates the application configuration. The missing fields in the request will be kept unchanged.
	UpdateApplicationConfig(context.Context, *system.ApplicationConfig) (*emptypb.Empty, error)
	// @group: Configuration
	// Synchronizes the application configuration. The input value shall contain all the default values and also all known keys (with null values).
	// The output value will contain currently set values including details which are not set.
	// The missing values in the defaults will be deleted if has been set previously in the application configuration.
	SynchronizeComponentConfig(context.Context, *system.ComponentConfigDescriptor) (*system.ComponentConfig, error)
	// @group: Device Data
	// The method to returns register/profile/irregular-profile typed device data. The method is generic but limited to return
	GetDeviceData(context.Context, *acquisition.GetDeviceDataRequest) (*acquisition.DeviceData, error)
	// @group: Device Data
	// The method to get the list of device data info. The device data info contains various metadata, such as a period of the regular profiles or a timestamp of the last stored value.
	ListDeviceDataInfo(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceDataInfo, error)
	// @group: Device Data
	// The method to stream out register-typed device data.
	GetDeviceDataRegisters(*acquisition.GetDeviceDataRequest, grpc.ServerStreamingServer[acquisition.RegisterValues]) error
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataProfiles(*acquisition.GetDeviceDataRequest, grpc.ServerStreamingServer[acquisition.ProfileValues]) error
	// @group: Device Data
	// The method to stream out profile-typed device data.
	GetDeviceDataIrregularProfiles(*acquisition.GetDeviceDataRequest, grpc.ServerStreamingServer[acquisition.IrregularProfileValues]) error
	// @group: Device Events
	// The method to stream out profile-typed device events.
	GetDeviceEvents(context.Context, *acquisition.GetDeviceEventsRequest) (*acquisition.DeviceEvents, error)
	// @group: Time-Of-Use Tables
	// The method to create a new time-of-use table.
	CreateTimeOfUseTable(context.Context, *acquisition.CreateTimeOfUseTableRequest) (*wrapperspb.StringValue, error)
	// @group: Time-Of-Use Tables
	// The method to get the list of time-of-use tables.
	ListTimeOfUseTables(context.Context, *common.ListSelector) (*acquisition.ListOfTimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// The method to get the time-of-use table.
	GetTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*acquisition.TimeOfUseTable, error)
	// @group: Time-Of-Use Tables
	// The method to update the time-of-use table.
	UpdateTimeOfUseTable(context.Context, *acquisition.TimeOfUseTable) (*emptypb.Empty, error)
	// @group: Time-Of-Use Tables
	// The method to delete the time-of-use table.
	DeleteTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to create a new cron job.
	CreateCronJob(context.Context, *cronjobs.CreateCronJobRequest) (*wrapperspb.StringValue, error)
	// @group: Cron Jobs
	// The method to get the list of cron jobs.
	ListCronJobs(context.Context, *common.ListSelector) (*cronjobs.ListOfCronJob, error)
	// @group: Cron Jobs
	// The method to get the cron job.
	GetCronJob(context.Context, *wrapperspb.StringValue) (*cronjobs.CronJob, error)
	// @group: Cron Jobs
	// The method to update the cron job.
	UpdateCronJob(context.Context, *cronjobs.CronJob) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to delete the cron job.
	DeleteCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to run the cron job immediately.
	RunCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to pause the cron job.
	PauseCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Cron Jobs
	// The method to resume the cron job.
	ResumeCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// @group: Metadata
	// The method sets the fields of an object. The values are merged with the existing fields to preserve the existing fields that are not set in the request.
	UpdateObjectFields(context.Context, *common.UpdateObjectFieldsRequest) (*emptypb.Empty, error)
	// @group: System
	// The method returns the OIDC configuration, proxied directly from the configured OIDC service.
	// All the authenticated endpoints shall be protected by token from this OIDC service.
	GetOpenIdConfiguration(context.Context, *emptypb.Empty) (*system.OpenIdConfiguration, error)
	// @group: Cryptography
	// The method returns a secret based on the request.
	GetCryptoSecret(context.Context, *crypto.GetCryptoSecretRequest) (*crypto.CryptoSecrets, error)
	// @group: Cryptography
	// The method to store (create or replace) the secret.
	SetCryptoSecret(context.Context, *crypto.SetCryptoSecretRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiServiceServer struct{}

func (UnimplementedApiServiceServer) CreateVariable(context.Context, *acquisition.CreateVariableRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVariable not implemented")
}
func (UnimplementedApiServiceServer) ListVariables(context.Context, *common.ListSelector) (*acquisition.ListOfVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (UnimplementedApiServiceServer) GetVariable(context.Context, *wrapperspb.StringValue) (*acquisition.Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedApiServiceServer) UpdateVariable(context.Context, *acquisition.Variable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVariable not implemented")
}
func (UnimplementedApiServiceServer) DeleteVariable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVariable not implemented")
}
func (UnimplementedApiServiceServer) AddRegisterToVariable(context.Context, *acquisition.AddRegisterToVariableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRegisterToVariable not implemented")
}
func (UnimplementedApiServiceServer) RemoveRegisterFromVariable(context.Context, *acquisition.RemoveRegisterFromVariableRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRegisterFromVariable not implemented")
}
func (UnimplementedApiServiceServer) CreateDeviceConfigurationRegister(context.Context, *acquisition.CreateDeviceConfigurationRegisterRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceConfigurationRegister not implemented")
}
func (UnimplementedApiServiceServer) ListDeviceConfigurationRegisters(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConfigurationRegisters not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigurationRegister not implemented")
}
func (UnimplementedApiServiceServer) UpdateDeviceConfigurationRegister(context.Context, *acquisition.DeviceConfigurationRegister) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfigurationRegister not implemented")
}
func (UnimplementedApiServiceServer) DeleteDeviceConfigurationRegister(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceConfigurationRegister not implemented")
}
func (UnimplementedApiServiceServer) CreateDeviceConfigurationTemplate(context.Context, *acquisition.CreateDeviceConfigurationTemplateRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceConfigurationTemplate not implemented")
}
func (UnimplementedApiServiceServer) ListDeviceConfigurationTemplates(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceConfigurationTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConfigurationTemplates not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceConfigurationTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigurationTemplate not implemented")
}
func (UnimplementedApiServiceServer) UpdateDeviceConfigurationTemplate(context.Context, *acquisition.DeviceConfigurationTemplate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfigurationTemplate not implemented")
}
func (UnimplementedApiServiceServer) DeleteDeviceConfigurationTemplate(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceConfigurationTemplate not implemented")
}
func (UnimplementedApiServiceServer) AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(context.Context, *acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceConfigurationRegisterToDeviceConfigurationTemplate not implemented")
}
func (UnimplementedApiServiceServer) RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(context.Context, *acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate not implemented")
}
func (UnimplementedApiServiceServer) CreateFieldDescriptor(context.Context, *common.CreateFieldDescriptorRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFieldDescriptor not implemented")
}
func (UnimplementedApiServiceServer) UpdateFieldDescriptor(context.Context, *common.FieldDescriptor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFieldDescriptor not implemented")
}
func (UnimplementedApiServiceServer) DeleteFieldDescriptor(context.Context, *common.FieldDescriptorSelector) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFieldDescriptor not implemented")
}
func (UnimplementedApiServiceServer) ListFieldDescriptors(context.Context, *emptypb.Empty) (*common.ListOfFieldDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFieldDescriptors not implemented")
}
func (UnimplementedApiServiceServer) ListFieldDescriptorOptions(context.Context, *common.ListFieldDescriptorOptionsRequest) (*common.FieldDescriptorOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFieldDescriptorOptions not implemented")
}
func (UnimplementedApiServiceServer) ListBulks(context.Context, *common.ListSelector) (*acquisition.ListOfBulk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBulks not implemented")
}
func (UnimplementedApiServiceServer) ListBulkJobs(context.Context, *acquisition.ListBulkJobsRequest) (*acquisition.ListOfBulkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBulkJobs not implemented")
}
func (UnimplementedApiServiceServer) GetBulkJob(context.Context, *wrapperspb.StringValue) (*acquisition.BulkJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkJob not implemented")
}
func (UnimplementedApiServiceServer) UpdateBulkJob(context.Context, *common.UpdateMetadata) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBulkJob not implemented")
}
func (UnimplementedApiServiceServer) CancelBulk(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBulk not implemented")
}
func (UnimplementedApiServiceServer) CancelBulkJobs(context.Context, *common.ListOfId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBulkJobs not implemented")
}
func (UnimplementedApiServiceServer) CreateProxyBulk(context.Context, *acquisition.CreateProxyBulkRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProxyBulk not implemented")
}
func (UnimplementedApiServiceServer) GetProxyBulk(context.Context, *wrapperspb.StringValue) (*acquisition.ProxyBulk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProxyBulk not implemented")
}
func (UnimplementedApiServiceServer) CreateBulk(context.Context, *acquisition.CreateBulkRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulk not implemented")
}
func (UnimplementedApiServiceServer) GetBulk(context.Context, *wrapperspb.StringValue) (*acquisition.Bulk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulk not implemented")
}
func (UnimplementedApiServiceServer) UpdateBulk(context.Context, *common.UpdateMetadata) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBulk not implemented")
}
func (UnimplementedApiServiceServer) ListDrivers(context.Context, *common.ListSelector) (*acquisition.ListOfDriver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrivers not implemented")
}
func (UnimplementedApiServiceServer) GetDriver(context.Context, *wrapperspb.StringValue) (*acquisition.Driver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriver not implemented")
}
func (UnimplementedApiServiceServer) CreateCommunicationUnit(context.Context, *acquisition.CreateCommunicationUnitRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunicationUnit not implemented")
}
func (UnimplementedApiServiceServer) UpdateCommunicationUnit(context.Context, *acquisition.CommunicationUnit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommunicationUnit not implemented")
}
func (UnimplementedApiServiceServer) ListCommunicationUnits(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationUnits not implemented")
}
func (UnimplementedApiServiceServer) GetCommunicationUnit(context.Context, *wrapperspb.StringValue) (*acquisition.CommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunicationUnit not implemented")
}
func (UnimplementedApiServiceServer) DeleteCommunicationUnit(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunicationUnit not implemented")
}
func (UnimplementedApiServiceServer) GetCommunicationUnitNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommunicationUnitNetworkMap not implemented")
}
func (UnimplementedApiServiceServer) ListCommunicationUnitLogRecords(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationUnitLogRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationUnitLogRecords not implemented")
}
func (UnimplementedApiServiceServer) CreateCommunicationBus(context.Context, *acquisition.CreateCommunicationBusRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommunicationBus not implemented")
}
func (UnimplementedApiServiceServer) ListCommunicationBuses(context.Context, *common.ListSelector) (*acquisition.ListOfCommunicationBus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommunicationBuses not implemented")
}
func (UnimplementedApiServiceServer) DeleteCommunicationBus(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommunicationBus not implemented")
}
func (UnimplementedApiServiceServer) AddCommunicationUnitsToCommunicationBus(context.Context, *acquisition.AddCommunicationUnitsToCommunicationBusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommunicationUnitsToCommunicationBus not implemented")
}
func (UnimplementedApiServiceServer) RemoveCommunicationUnitsFromCommunicationBus(context.Context, *acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCommunicationUnitsFromCommunicationBus not implemented")
}
func (UnimplementedApiServiceServer) CreateDevice(context.Context, *acquisition.CreateDeviceRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedApiServiceServer) UpdateDevice(context.Context, *acquisition.Device) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedApiServiceServer) ListDevices(context.Context, *common.ListSelector) (*acquisition.ListOfDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedApiServiceServer) GetDevice(context.Context, *wrapperspb.StringValue) (*acquisition.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedApiServiceServer) DeleteDevice(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceInfo(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedApiServiceServer) SetDeviceCommunicationUnits(context.Context, *acquisition.SetDeviceCommunicationUnitsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceCommunicationUnits not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceCommunicationUnits(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceCommunicationUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCommunicationUnits not implemented")
}
func (UnimplementedApiServiceServer) ListDeviceCommunicationUnitChanges(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceCommunicationUnitChange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceCommunicationUnitChanges not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceDeviceGroups(context.Context, *wrapperspb.StringValue) (*acquisition.ListOfDeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDeviceGroups not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceNetworkMap(context.Context, *wrapperspb.StringValue) (*acquisition.NetworkMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceNetworkMap not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceBulks(context.Context, *acquisition.GetDeviceBulksRequest) (*acquisition.DeviceBulks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceBulks not implemented")
}
func (UnimplementedApiServiceServer) CreateDeviceGroup(context.Context, *acquisition.CreateDeviceGroupRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceGroup not implemented")
}
func (UnimplementedApiServiceServer) ListDeviceGroups(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceGroups not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceGroup(context.Context, *wrapperspb.StringValue) (*acquisition.DeviceGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceGroup not implemented")
}
func (UnimplementedApiServiceServer) DeleteDeviceGroup(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceGroup not implemented")
}
func (UnimplementedApiServiceServer) AddDevicesToGroup(context.Context, *acquisition.AddDevicesToGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevicesToGroup not implemented")
}
func (UnimplementedApiServiceServer) RemoveDevicesFromGroup(context.Context, *acquisition.RemoveDevicesFromGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDevicesFromGroup not implemented")
}
func (UnimplementedApiServiceServer) ListDeviceGroupDevices(context.Context, *acquisition.ListDeviceGroupDevicesRequest) (*acquisition.ListOfDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceGroupDevices not implemented")
}
func (UnimplementedApiServiceServer) ListModemPools(context.Context, *common.ListSelector) (*acquisition.ListOfModemPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModemPools not implemented")
}
func (UnimplementedApiServiceServer) GetModemPool(context.Context, *wrapperspb.StringValue) (*acquisition.ModemPool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModemPool not implemented")
}
func (UnimplementedApiServiceServer) CreateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModemPool not implemented")
}
func (UnimplementedApiServiceServer) UpdateModemPool(context.Context, *acquisition.SetModemPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModemPool not implemented")
}
func (UnimplementedApiServiceServer) DeleteModemPool(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModemPool not implemented")
}
func (UnimplementedApiServiceServer) CreateModem(context.Context, *acquisition.SetModemRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModem not implemented")
}
func (UnimplementedApiServiceServer) UpdateModem(context.Context, *acquisition.SetModemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModem not implemented")
}
func (UnimplementedApiServiceServer) DeleteModem(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModem not implemented")
}
func (UnimplementedApiServiceServer) GetApplicationConfig(context.Context, *emptypb.Empty) (*system.ApplicationConfigDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationConfig not implemented")
}
func (UnimplementedApiServiceServer) UpdateApplicationConfig(context.Context, *system.ApplicationConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplicationConfig not implemented")
}
func (UnimplementedApiServiceServer) SynchronizeComponentConfig(context.Context, *system.ComponentConfigDescriptor) (*system.ComponentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizeComponentConfig not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceData(context.Context, *acquisition.GetDeviceDataRequest) (*acquisition.DeviceData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceData not implemented")
}
func (UnimplementedApiServiceServer) ListDeviceDataInfo(context.Context, *common.ListSelector) (*acquisition.ListOfDeviceDataInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceDataInfo not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceDataRegisters(*acquisition.GetDeviceDataRequest, grpc.ServerStreamingServer[acquisition.RegisterValues]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceDataRegisters not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceDataProfiles(*acquisition.GetDeviceDataRequest, grpc.ServerStreamingServer[acquisition.ProfileValues]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceDataProfiles not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceDataIrregularProfiles(*acquisition.GetDeviceDataRequest, grpc.ServerStreamingServer[acquisition.IrregularProfileValues]) error {
	return status.Errorf(codes.Unimplemented, "method GetDeviceDataIrregularProfiles not implemented")
}
func (UnimplementedApiServiceServer) GetDeviceEvents(context.Context, *acquisition.GetDeviceEventsRequest) (*acquisition.DeviceEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceEvents not implemented")
}
func (UnimplementedApiServiceServer) CreateTimeOfUseTable(context.Context, *acquisition.CreateTimeOfUseTableRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeOfUseTable not implemented")
}
func (UnimplementedApiServiceServer) ListTimeOfUseTables(context.Context, *common.ListSelector) (*acquisition.ListOfTimeOfUseTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeOfUseTables not implemented")
}
func (UnimplementedApiServiceServer) GetTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*acquisition.TimeOfUseTable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeOfUseTable not implemented")
}
func (UnimplementedApiServiceServer) UpdateTimeOfUseTable(context.Context, *acquisition.TimeOfUseTable) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeOfUseTable not implemented")
}
func (UnimplementedApiServiceServer) DeleteTimeOfUseTable(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimeOfUseTable not implemented")
}
func (UnimplementedApiServiceServer) CreateCronJob(context.Context, *cronjobs.CreateCronJobRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronJob not implemented")
}
func (UnimplementedApiServiceServer) ListCronJobs(context.Context, *common.ListSelector) (*cronjobs.ListOfCronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronJobs not implemented")
}
func (UnimplementedApiServiceServer) GetCronJob(context.Context, *wrapperspb.StringValue) (*cronjobs.CronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronJob not implemented")
}
func (UnimplementedApiServiceServer) UpdateCronJob(context.Context, *cronjobs.CronJob) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronJob not implemented")
}
func (UnimplementedApiServiceServer) DeleteCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (UnimplementedApiServiceServer) RunCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCronJob not implemented")
}
func (UnimplementedApiServiceServer) PauseCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseCronJob not implemented")
}
func (UnimplementedApiServiceServer) ResumeCronJob(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCronJob not implemented")
}
func (UnimplementedApiServiceServer) UpdateObjectFields(context.Context, *common.UpdateObjectFieldsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectFields not implemented")
}
func (UnimplementedApiServiceServer) GetOpenIdConfiguration(context.Context, *emptypb.Empty) (*system.OpenIdConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenIdConfiguration not implemented")
}
func (UnimplementedApiServiceServer) GetCryptoSecret(context.Context, *crypto.GetCryptoSecretRequest) (*crypto.CryptoSecrets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoSecret not implemented")
}
func (UnimplementedApiServiceServer) SetCryptoSecret(context.Context, *crypto.SetCryptoSecretRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCryptoSecret not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}
func (UnimplementedApiServiceServer) testEmbeddedByValue()                    {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	// If the following call pancis, it indicates UnimplementedApiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_CreateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateVariable(ctx, req.(*acquisition.CreateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListVariables(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetVariable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.Variable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateVariable(ctx, req.(*acquisition.Variable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteVariable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddRegisterToVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddRegisterToVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddRegisterToVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AddRegisterToVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddRegisterToVariable(ctx, req.(*acquisition.AddRegisterToVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RemoveRegisterFromVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveRegisterFromVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RemoveRegisterFromVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RemoveRegisterFromVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RemoveRegisterFromVariable(ctx, req.(*acquisition.RemoveRegisterFromVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceConfigurationRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateDeviceConfigurationRegister(ctx, req.(*acquisition.CreateDeviceConfigurationRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDeviceConfigurationRegisters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDeviceConfigurationRegisters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDeviceConfigurationRegisters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDeviceConfigurationRegisters(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceConfigurationRegister(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.DeviceConfigurationRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateDeviceConfigurationRegister(ctx, req.(*acquisition.DeviceConfigurationRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteDeviceConfigurationRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteDeviceConfigurationRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteDeviceConfigurationRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteDeviceConfigurationRegister(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceConfigurationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateDeviceConfigurationTemplate(ctx, req.(*acquisition.CreateDeviceConfigurationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDeviceConfigurationTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDeviceConfigurationTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDeviceConfigurationTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDeviceConfigurationTemplates(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceConfigurationTemplate(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.DeviceConfigurationTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateDeviceConfigurationTemplate(ctx, req.(*acquisition.DeviceConfigurationTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteDeviceConfigurationTemplate(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx, req.(*acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx, req.(*acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateFieldDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.CreateFieldDescriptorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateFieldDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateFieldDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateFieldDescriptor(ctx, req.(*common.CreateFieldDescriptorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateFieldDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FieldDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateFieldDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateFieldDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateFieldDescriptor(ctx, req.(*common.FieldDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteFieldDescriptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.FieldDescriptorSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteFieldDescriptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteFieldDescriptor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteFieldDescriptor(ctx, req.(*common.FieldDescriptorSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListFieldDescriptors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListFieldDescriptors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListFieldDescriptors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListFieldDescriptors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListFieldDescriptorOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListFieldDescriptorOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListFieldDescriptorOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListFieldDescriptorOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListFieldDescriptorOptions(ctx, req.(*common.ListFieldDescriptorOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListBulks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListBulks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListBulks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListBulks(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListBulkJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.ListBulkJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListBulkJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListBulkJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListBulkJobs(ctx, req.(*acquisition.ListBulkJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBulkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBulkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBulkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBulkJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateBulkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateBulkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateBulkJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateBulkJob(ctx, req.(*common.UpdateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CancelBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelBulk(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CancelBulkJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListOfId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CancelBulkJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CancelBulkJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CancelBulkJobs(ctx, req.(*common.ListOfId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateProxyBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateProxyBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateProxyBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateProxyBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateProxyBulk(ctx, req.(*acquisition.CreateProxyBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetProxyBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetProxyBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetProxyBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetProxyBulk(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateBulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateBulk(ctx, req.(*acquisition.CreateBulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetBulk(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateBulk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateBulk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateBulk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateBulk(ctx, req.(*common.UpdateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDrivers(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDriver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDriver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDriver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDriver(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateCommunicationUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateCommunicationUnit(ctx, req.(*acquisition.CreateCommunicationUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CommunicationUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateCommunicationUnit(ctx, req.(*acquisition.CommunicationUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCommunicationUnits(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCommunicationUnit(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteCommunicationUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteCommunicationUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteCommunicationUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteCommunicationUnit(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCommunicationUnitNetworkMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCommunicationUnitNetworkMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetCommunicationUnitNetworkMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCommunicationUnitNetworkMap(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCommunicationUnitLogRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCommunicationUnitLogRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListCommunicationUnitLogRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCommunicationUnitLogRecords(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateCommunicationBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateCommunicationBus(ctx, req.(*acquisition.CreateCommunicationBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCommunicationBuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCommunicationBuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListCommunicationBuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCommunicationBuses(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteCommunicationBus(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddCommunicationUnitsToCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddCommunicationUnitsToCommunicationBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddCommunicationUnitsToCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AddCommunicationUnitsToCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddCommunicationUnitsToCommunicationBus(ctx, req.(*acquisition.AddCommunicationUnitsToCommunicationBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RemoveCommunicationUnitsFromCommunicationBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RemoveCommunicationUnitsFromCommunicationBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RemoveCommunicationUnitsFromCommunicationBus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RemoveCommunicationUnitsFromCommunicationBus(ctx, req.(*acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateDevice(ctx, req.(*acquisition.CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateDevice(ctx, req.(*acquisition.Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDevices(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDevice(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteDevice(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceInfo(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetDeviceCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetDeviceCommunicationUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetDeviceCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SetDeviceCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetDeviceCommunicationUnits(ctx, req.(*acquisition.SetDeviceCommunicationUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceCommunicationUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceCommunicationUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceCommunicationUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceCommunicationUnits(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDeviceCommunicationUnitChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDeviceCommunicationUnitChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDeviceCommunicationUnitChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDeviceCommunicationUnitChanges(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceDeviceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceDeviceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceDeviceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceDeviceGroups(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceNetworkMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceNetworkMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceNetworkMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceNetworkMap(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceBulks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.GetDeviceBulksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceBulks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceBulks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceBulks(ctx, req.(*acquisition.GetDeviceBulksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateDeviceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateDeviceGroup(ctx, req.(*acquisition.CreateDeviceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDeviceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDeviceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDeviceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDeviceGroups(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteDeviceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteDeviceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteDeviceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteDeviceGroup(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_AddDevicesToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.AddDevicesToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).AddDevicesToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_AddDevicesToGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).AddDevicesToGroup(ctx, req.(*acquisition.AddDevicesToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RemoveDevicesFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.RemoveDevicesFromGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RemoveDevicesFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RemoveDevicesFromGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RemoveDevicesFromGroup(ctx, req.(*acquisition.RemoveDevicesFromGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDeviceGroupDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.ListDeviceGroupDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDeviceGroupDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDeviceGroupDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDeviceGroupDevices(ctx, req.(*acquisition.ListDeviceGroupDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListModemPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListModemPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListModemPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListModemPools(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetModemPool(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateModemPool(ctx, req.(*acquisition.SetModemPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateModemPool(ctx, req.(*acquisition.SetModemPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteModemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteModemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteModemPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteModemPool(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateModem(ctx, req.(*acquisition.SetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.SetModemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateModem(ctx, req.(*acquisition.SetModemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteModem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteModem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteModem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteModem(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetApplicationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetApplicationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetApplicationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetApplicationConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateApplicationConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(system.ApplicationConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateApplicationConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateApplicationConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateApplicationConfig(ctx, req.(*system.ApplicationConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SynchronizeComponentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(system.ComponentConfigDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SynchronizeComponentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SynchronizeComponentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SynchronizeComponentConfig(ctx, req.(*system.ComponentConfigDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.GetDeviceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceData(ctx, req.(*acquisition.GetDeviceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListDeviceDataInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListDeviceDataInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListDeviceDataInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListDeviceDataInfo(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetDeviceDataRegisters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetDeviceDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).GetDeviceDataRegisters(m, &grpc.GenericServerStream[acquisition.GetDeviceDataRequest, acquisition.RegisterValues]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiService_GetDeviceDataRegistersServer = grpc.ServerStreamingServer[acquisition.RegisterValues]

func _ApiService_GetDeviceDataProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetDeviceDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).GetDeviceDataProfiles(m, &grpc.GenericServerStream[acquisition.GetDeviceDataRequest, acquisition.ProfileValues]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiService_GetDeviceDataProfilesServer = grpc.ServerStreamingServer[acquisition.ProfileValues]

func _ApiService_GetDeviceDataIrregularProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(acquisition.GetDeviceDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).GetDeviceDataIrregularProfiles(m, &grpc.GenericServerStream[acquisition.GetDeviceDataRequest, acquisition.IrregularProfileValues]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApiService_GetDeviceDataIrregularProfilesServer = grpc.ServerStreamingServer[acquisition.IrregularProfileValues]

func _ApiService_GetDeviceEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.GetDeviceEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetDeviceEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetDeviceEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetDeviceEvents(ctx, req.(*acquisition.GetDeviceEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.CreateTimeOfUseTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateTimeOfUseTable(ctx, req.(*acquisition.CreateTimeOfUseTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListTimeOfUseTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListTimeOfUseTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListTimeOfUseTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListTimeOfUseTables(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetTimeOfUseTable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(acquisition.TimeOfUseTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateTimeOfUseTable(ctx, req.(*acquisition.TimeOfUseTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteTimeOfUseTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteTimeOfUseTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteTimeOfUseTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteTimeOfUseTable(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cronjobs.CreateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_CreateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateCronJob(ctx, req.(*cronjobs.CreateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCronJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCronJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ListCronJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCronJobs(ctx, req.(*common.ListSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCronJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cronjobs.CronJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateCronJob(ctx, req.(*cronjobs.CronJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_DeleteCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteCronJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RunCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RunCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_RunCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RunCronJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_PauseCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).PauseCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_PauseCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).PauseCronJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ResumeCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ResumeCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_ResumeCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ResumeCronJob(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateObjectFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.UpdateObjectFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateObjectFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_UpdateObjectFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateObjectFields(ctx, req.(*common.UpdateObjectFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetOpenIdConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetOpenIdConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetOpenIdConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetOpenIdConfiguration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCryptoSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crypto.GetCryptoSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCryptoSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_GetCryptoSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCryptoSecret(ctx, req.(*crypto.GetCryptoSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SetCryptoSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crypto.SetCryptoSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SetCryptoSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiService_SetCryptoSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SetCryptoSecret(ctx, req.(*crypto.SetCryptoSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.openhes.services.svcapi.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVariable",
			Handler:    _ApiService_CreateVariable_Handler,
		},
		{
			MethodName: "ListVariables",
			Handler:    _ApiService_ListVariables_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _ApiService_GetVariable_Handler,
		},
		{
			MethodName: "UpdateVariable",
			Handler:    _ApiService_UpdateVariable_Handler,
		},
		{
			MethodName: "DeleteVariable",
			Handler:    _ApiService_DeleteVariable_Handler,
		},
		{
			MethodName: "AddRegisterToVariable",
			Handler:    _ApiService_AddRegisterToVariable_Handler,
		},
		{
			MethodName: "RemoveRegisterFromVariable",
			Handler:    _ApiService_RemoveRegisterFromVariable_Handler,
		},
		{
			MethodName: "CreateDeviceConfigurationRegister",
			Handler:    _ApiService_CreateDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "ListDeviceConfigurationRegisters",
			Handler:    _ApiService_ListDeviceConfigurationRegisters_Handler,
		},
		{
			MethodName: "GetDeviceConfigurationRegister",
			Handler:    _ApiService_GetDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "UpdateDeviceConfigurationRegister",
			Handler:    _ApiService_UpdateDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "DeleteDeviceConfigurationRegister",
			Handler:    _ApiService_DeleteDeviceConfigurationRegister_Handler,
		},
		{
			MethodName: "CreateDeviceConfigurationTemplate",
			Handler:    _ApiService_CreateDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "ListDeviceConfigurationTemplates",
			Handler:    _ApiService_ListDeviceConfigurationTemplates_Handler,
		},
		{
			MethodName: "GetDeviceConfigurationTemplate",
			Handler:    _ApiService_GetDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "UpdateDeviceConfigurationTemplate",
			Handler:    _ApiService_UpdateDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "DeleteDeviceConfigurationTemplate",
			Handler:    _ApiService_DeleteDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "AddDeviceConfigurationRegisterToDeviceConfigurationTemplate",
			Handler:    _ApiService_AddDeviceConfigurationRegisterToDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate",
			Handler:    _ApiService_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate_Handler,
		},
		{
			MethodName: "CreateFieldDescriptor",
			Handler:    _ApiService_CreateFieldDescriptor_Handler,
		},
		{
			MethodName: "UpdateFieldDescriptor",
			Handler:    _ApiService_UpdateFieldDescriptor_Handler,
		},
		{
			MethodName: "DeleteFieldDescriptor",
			Handler:    _ApiService_DeleteFieldDescriptor_Handler,
		},
		{
			MethodName: "ListFieldDescriptors",
			Handler:    _ApiService_ListFieldDescriptors_Handler,
		},
		{
			MethodName: "ListFieldDescriptorOptions",
			Handler:    _ApiService_ListFieldDescriptorOptions_Handler,
		},
		{
			MethodName: "ListBulks",
			Handler:    _ApiService_ListBulks_Handler,
		},
		{
			MethodName: "ListBulkJobs",
			Handler:    _ApiService_ListBulkJobs_Handler,
		},
		{
			MethodName: "GetBulkJob",
			Handler:    _ApiService_GetBulkJob_Handler,
		},
		{
			MethodName: "UpdateBulkJob",
			Handler:    _ApiService_UpdateBulkJob_Handler,
		},
		{
			MethodName: "CancelBulk",
			Handler:    _ApiService_CancelBulk_Handler,
		},
		{
			MethodName: "CancelBulkJobs",
			Handler:    _ApiService_CancelBulkJobs_Handler,
		},
		{
			MethodName: "CreateProxyBulk",
			Handler:    _ApiService_CreateProxyBulk_Handler,
		},
		{
			MethodName: "GetProxyBulk",
			Handler:    _ApiService_GetProxyBulk_Handler,
		},
		{
			MethodName: "CreateBulk",
			Handler:    _ApiService_CreateBulk_Handler,
		},
		{
			MethodName: "GetBulk",
			Handler:    _ApiService_GetBulk_Handler,
		},
		{
			MethodName: "UpdateBulk",
			Handler:    _ApiService_UpdateBulk_Handler,
		},
		{
			MethodName: "ListDrivers",
			Handler:    _ApiService_ListDrivers_Handler,
		},
		{
			MethodName: "GetDriver",
			Handler:    _ApiService_GetDriver_Handler,
		},
		{
			MethodName: "CreateCommunicationUnit",
			Handler:    _ApiService_CreateCommunicationUnit_Handler,
		},
		{
			MethodName: "UpdateCommunicationUnit",
			Handler:    _ApiService_UpdateCommunicationUnit_Handler,
		},
		{
			MethodName: "ListCommunicationUnits",
			Handler:    _ApiService_ListCommunicationUnits_Handler,
		},
		{
			MethodName: "GetCommunicationUnit",
			Handler:    _ApiService_GetCommunicationUnit_Handler,
		},
		{
			MethodName: "DeleteCommunicationUnit",
			Handler:    _ApiService_DeleteCommunicationUnit_Handler,
		},
		{
			MethodName: "GetCommunicationUnitNetworkMap",
			Handler:    _ApiService_GetCommunicationUnitNetworkMap_Handler,
		},
		{
			MethodName: "ListCommunicationUnitLogRecords",
			Handler:    _ApiService_ListCommunicationUnitLogRecords_Handler,
		},
		{
			MethodName: "CreateCommunicationBus",
			Handler:    _ApiService_CreateCommunicationBus_Handler,
		},
		{
			MethodName: "ListCommunicationBuses",
			Handler:    _ApiService_ListCommunicationBuses_Handler,
		},
		{
			MethodName: "DeleteCommunicationBus",
			Handler:    _ApiService_DeleteCommunicationBus_Handler,
		},
		{
			MethodName: "AddCommunicationUnitsToCommunicationBus",
			Handler:    _ApiService_AddCommunicationUnitsToCommunicationBus_Handler,
		},
		{
			MethodName: "RemoveCommunicationUnitsFromCommunicationBus",
			Handler:    _ApiService_RemoveCommunicationUnitsFromCommunicationBus_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _ApiService_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _ApiService_UpdateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _ApiService_ListDevices_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ApiService_GetDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _ApiService_DeleteDevice_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _ApiService_GetDeviceInfo_Handler,
		},
		{
			MethodName: "SetDeviceCommunicationUnits",
			Handler:    _ApiService_SetDeviceCommunicationUnits_Handler,
		},
		{
			MethodName: "GetDeviceCommunicationUnits",
			Handler:    _ApiService_GetDeviceCommunicationUnits_Handler,
		},
		{
			MethodName: "ListDeviceCommunicationUnitChanges",
			Handler:    _ApiService_ListDeviceCommunicationUnitChanges_Handler,
		},
		{
			MethodName: "GetDeviceDeviceGroups",
			Handler:    _ApiService_GetDeviceDeviceGroups_Handler,
		},
		{
			MethodName: "GetDeviceNetworkMap",
			Handler:    _ApiService_GetDeviceNetworkMap_Handler,
		},
		{
			MethodName: "GetDeviceBulks",
			Handler:    _ApiService_GetDeviceBulks_Handler,
		},
		{
			MethodName: "CreateDeviceGroup",
			Handler:    _ApiService_CreateDeviceGroup_Handler,
		},
		{
			MethodName: "ListDeviceGroups",
			Handler:    _ApiService_ListDeviceGroups_Handler,
		},
		{
			MethodName: "GetDeviceGroup",
			Handler:    _ApiService_GetDeviceGroup_Handler,
		},
		{
			MethodName: "DeleteDeviceGroup",
			Handler:    _ApiService_DeleteDeviceGroup_Handler,
		},
		{
			MethodName: "AddDevicesToGroup",
			Handler:    _ApiService_AddDevicesToGroup_Handler,
		},
		{
			MethodName: "RemoveDevicesFromGroup",
			Handler:    _ApiService_RemoveDevicesFromGroup_Handler,
		},
		{
			MethodName: "ListDeviceGroupDevices",
			Handler:    _ApiService_ListDeviceGroupDevices_Handler,
		},
		{
			MethodName: "ListModemPools",
			Handler:    _ApiService_ListModemPools_Handler,
		},
		{
			MethodName: "GetModemPool",
			Handler:    _ApiService_GetModemPool_Handler,
		},
		{
			MethodName: "CreateModemPool",
			Handler:    _ApiService_CreateModemPool_Handler,
		},
		{
			MethodName: "UpdateModemPool",
			Handler:    _ApiService_UpdateModemPool_Handler,
		},
		{
			MethodName: "DeleteModemPool",
			Handler:    _ApiService_DeleteModemPool_Handler,
		},
		{
			MethodName: "CreateModem",
			Handler:    _ApiService_CreateModem_Handler,
		},
		{
			MethodName: "UpdateModem",
			Handler:    _ApiService_UpdateModem_Handler,
		},
		{
			MethodName: "DeleteModem",
			Handler:    _ApiService_DeleteModem_Handler,
		},
		{
			MethodName: "GetApplicationConfig",
			Handler:    _ApiService_GetApplicationConfig_Handler,
		},
		{
			MethodName: "UpdateApplicationConfig",
			Handler:    _ApiService_UpdateApplicationConfig_Handler,
		},
		{
			MethodName: "SynchronizeComponentConfig",
			Handler:    _ApiService_SynchronizeComponentConfig_Handler,
		},
		{
			MethodName: "GetDeviceData",
			Handler:    _ApiService_GetDeviceData_Handler,
		},
		{
			MethodName: "ListDeviceDataInfo",
			Handler:    _ApiService_ListDeviceDataInfo_Handler,
		},
		{
			MethodName: "GetDeviceEvents",
			Handler:    _ApiService_GetDeviceEvents_Handler,
		},
		{
			MethodName: "CreateTimeOfUseTable",
			Handler:    _ApiService_CreateTimeOfUseTable_Handler,
		},
		{
			MethodName: "ListTimeOfUseTables",
			Handler:    _ApiService_ListTimeOfUseTables_Handler,
		},
		{
			MethodName: "GetTimeOfUseTable",
			Handler:    _ApiService_GetTimeOfUseTable_Handler,
		},
		{
			MethodName: "UpdateTimeOfUseTable",
			Handler:    _ApiService_UpdateTimeOfUseTable_Handler,
		},
		{
			MethodName: "DeleteTimeOfUseTable",
			Handler:    _ApiService_DeleteTimeOfUseTable_Handler,
		},
		{
			MethodName: "CreateCronJob",
			Handler:    _ApiService_CreateCronJob_Handler,
		},
		{
			MethodName: "ListCronJobs",
			Handler:    _ApiService_ListCronJobs_Handler,
		},
		{
			MethodName: "GetCronJob",
			Handler:    _ApiService_GetCronJob_Handler,
		},
		{
			MethodName: "UpdateCronJob",
			Handler:    _ApiService_UpdateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _ApiService_DeleteCronJob_Handler,
		},
		{
			MethodName: "RunCronJob",
			Handler:    _ApiService_RunCronJob_Handler,
		},
		{
			MethodName: "PauseCronJob",
			Handler:    _ApiService_PauseCronJob_Handler,
		},
		{
			MethodName: "ResumeCronJob",
			Handler:    _ApiService_ResumeCronJob_Handler,
		},
		{
			MethodName: "UpdateObjectFields",
			Handler:    _ApiService_UpdateObjectFields_Handler,
		},
		{
			MethodName: "GetOpenIdConfiguration",
			Handler:    _ApiService_GetOpenIdConfiguration_Handler,
		},
		{
			MethodName: "GetCryptoSecret",
			Handler:    _ApiService_GetCryptoSecret_Handler,
		},
		{
			MethodName: "SetCryptoSecret",
			Handler:    _ApiService_SetCryptoSecret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDeviceDataRegisters",
			Handler:       _ApiService_GetDeviceDataRegisters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeviceDataProfiles",
			Handler:       _ApiService_GetDeviceDataProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeviceDataIrregularProfiles",
			Handler:       _ApiService_GetDeviceDataIrregularProfiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/svcapi/api.proto",
}
