// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/cybroslabs/ouro-api-shared/graph/model"
	"github.com/google/uuid"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccessLevelTemplate struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	ActionData struct {
		DeviceInfo       func(childComplexity int) int
		Events           func(childComplexity int) int
		IrregularProfile func(childComplexity int) int
		Nodata           func(childComplexity int) int
		Profile          func(childComplexity int) int
		Registers        func(childComplexity int) int
		TouTable         func(childComplexity int) int
	}

	ActionFwUpdate struct {
		Empty func(childComplexity int) int
	}

	ActionGetDeviceInfo struct {
		Empty func(childComplexity int) int
	}

	ActionGetEvents struct {
		From func(childComplexity int) int
		To   func(childComplexity int) int
	}

	ActionGetIrregularProfile struct {
		DataType func(childComplexity int) int
		From     func(childComplexity int) int
		To       func(childComplexity int) int
	}

	ActionGetPeriodicalProfile struct {
		DataType func(childComplexity int) int
		From     func(childComplexity int) int
		To       func(childComplexity int) int
	}

	ActionGetRegister struct {
		DataType func(childComplexity int) int
	}

	ActionGetTou struct {
		Passive func(childComplexity int) int
	}

	ActionResetBillingPeriod struct {
		Empty func(childComplexity int) int
	}

	ActionResult struct {
		ActionID     func(childComplexity int) int
		Data         func(childComplexity int) int
		RegisterID   func(childComplexity int) int
		Status       func(childComplexity int) int
		VariableName func(childComplexity int) int
	}

	ActionSetDisconnectorState struct {
		Empty func(childComplexity int) int
	}

	ActionSetLimiter struct {
		Empty func(childComplexity int) int
	}

	ActionSetRelayState struct {
		Empty func(childComplexity int) int
	}

	ActionSetTou struct {
		Table func(childComplexity int) int
	}

	ActionSyncClock struct {
		Empty func(childComplexity int) int
	}

	AddCommunicationUnitsToCommunicationBusRequest struct {
		CommunicationBusID  func(childComplexity int) int
		CommunicationUnitID func(childComplexity int) int
	}

	AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest struct {
		DctID      func(childComplexity int) int
		RegisterID func(childComplexity int) int
	}

	AddDevicesToGroupRequest struct {
		DeviceID func(childComplexity int) int
		GroupID  func(childComplexity int) int
	}

	AddRegisterToVariableRequest struct {
		RegisterID func(childComplexity int) int
		VariableID func(childComplexity int) int
	}

	ApplicationConfig struct {
		Items func(childComplexity int) int
	}

	ApplicationConfigDescriptor struct {
		Descriptors func(childComplexity int) int
		Items       func(childComplexity int) int
	}

	ApplicationProtocolTemplate struct {
		Attributes func(childComplexity int) int
		Protocol   func(childComplexity int) int
	}

	Bulk struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	BulkJob struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	BulkJobSpec struct {
		Device func(childComplexity int) int
	}

	BulkSpec struct {
		Actions       func(childComplexity int) int
		CorrelationID func(childComplexity int) int
		DeviceGroupID func(childComplexity int) int
		Devices       func(childComplexity int) int
		Settings      func(childComplexity int) int
		WebhookURL    func(childComplexity int) int
	}

	BulkStatus struct {
		CreatedAt      func(childComplexity int) int
		FinishedAt     func(childComplexity int) int
		JobsCount      func(childComplexity int) int
		JobsFinished   func(childComplexity int) int
		JobsSuccessful func(childComplexity int) int
		StartedAt      func(childComplexity int) int
		Status         func(childComplexity int) int
	}

	CommunicationBus struct {
		Metadata func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	CommunicationBusStatus struct {
		CommunicationUnitID func(childComplexity int) int
	}

	CommunicationTemplate struct {
		Datalinks func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	CommunicationUnit struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CommunicationUnitSpec struct {
		ConnectionInfo func(childComplexity int) int
		ExternalID     func(childComplexity int) int
	}

	ComponentConfig struct {
		Items func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	ComponentConfigDescriptor struct {
		Items func(childComplexity int) int
		Name  func(childComplexity int) int
	}

	ConnectionInfo struct {
		Attributes         func(childComplexity int) int
		CommunicationBusID func(childComplexity int) int
		LinkProtocol       func(childComplexity int) int
		ModemPool          func(childComplexity int) int
		SerialOverIP       func(childComplexity int) int
		Tcpip              func(childComplexity int) int
	}

	ConnectionTypeControlledSerial struct {
		Direct  func(childComplexity int) int
		Moxa    func(childComplexity int) int
		Rfc2217 func(childComplexity int) int
	}

	ConnectionTypeDirectTcpIp struct {
		Host    func(childComplexity int) int
		Port    func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	ConnectionTypeModemPool struct {
		Modem  func(childComplexity int) int
		Number func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	ConnectionTypeSerialDirect struct {
		Host    func(childComplexity int) int
		Port    func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	ConnectionTypeSerialMoxa struct {
		CommandPort func(childComplexity int) int
		DataPort    func(childComplexity int) int
		Host        func(childComplexity int) int
		Timeout     func(childComplexity int) int
	}

	ConnectionTypeSerialRfc2217 struct {
		Host    func(childComplexity int) int
		Port    func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	CreateBulkRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateCommunicationBusRequest struct {
		Metadata func(childComplexity int) int
	}

	CreateCommunicationUnitRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateCronJobRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateDeviceConfigurationRegisterRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateDeviceConfigurationTemplateRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateDeviceGroupRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateDeviceRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateFieldDescriptorRequest struct {
		Spec func(childComplexity int) int
	}

	CreateProxyBulkRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateTimeOfUseTableRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CreateVariableRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	CronJob struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	CronJobSpec struct {
		Data     func(childComplexity int) int
		Schedule func(childComplexity int) int
		Suspend  func(childComplexity int) int
		Timezone func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	CronJobStatus struct {
		Error     func(childComplexity int) int
		LastRunAt func(childComplexity int) int
		NextRunAt func(childComplexity int) int
	}

	CryptoSecret struct {
		AccessLevel func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Data        func(childComplexity int) int
		KeyID       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CryptoSecrets struct {
		Secrets func(childComplexity int) int
	}

	DataLinkTemplate struct {
		AppProtocolRefs func(childComplexity int) int
		Attributes      func(childComplexity int) int
		LinkProtocol    func(childComplexity int) int
	}

	Date struct {
		Day   func(childComplexity int) int
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	DayProfile struct {
		DayID     func(childComplexity int) int
		Switching func(childComplexity int) int
	}

	Device struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	DeviceBulks struct {
		Bulks func(childComplexity int) int
	}

	DeviceCommunicationUnit struct {
		AppProtocol         func(childComplexity int) int
		Attributes          func(childComplexity int) int
		CommunicationUnitID func(childComplexity int) int
	}

	DeviceCommunicationUnitChange struct {
		Status func(childComplexity int) int
	}

	DeviceCommunicationUnitChangeStatus struct {
		ChangeAt              func(childComplexity int) int
		CommunicationUnitID   func(childComplexity int) int
		CommunicationUnitName func(childComplexity int) int
		DeviceID              func(childComplexity int) int
		DeviceName            func(childComplexity int) int
	}

	DeviceConfigurationRegister struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	DeviceConfigurationRegisterSpec struct {
		Attributes   func(childComplexity int) int
		DataType     func(childComplexity int) int
		DriverType   func(childComplexity int) int
		RegisterType func(childComplexity int) int
	}

	DeviceConfigurationTemplate struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	DeviceConfigurationTemplateSpec struct {
		DriverType func(childComplexity int) int
		RegisterID func(childComplexity int) int
	}

	DeviceData struct {
		Devices func(childComplexity int) int
	}

	DeviceDataInfo struct {
		Spec   func(childComplexity int) int
		Status func(childComplexity int) int
	}

	DeviceDataInfoSpec struct {
		DeviceID   func(childComplexity int) int
		RegisterID func(childComplexity int) int
	}

	DeviceDataInfoStatus struct {
		LastValueAt  func(childComplexity int) int
		Period       func(childComplexity int) int
		RegisterName func(childComplexity int) int
	}

	DeviceDeviceData struct {
		Data     func(childComplexity int) int
		DeviceID func(childComplexity int) int
	}

	DeviceEventRecord struct {
		DeviceID    func(childComplexity int) int
		EventCode   func(childComplexity int) int
		EventID     func(childComplexity int) int
		EventSource func(childComplexity int) int
		EventText   func(childComplexity int) int
		Timestamp   func(childComplexity int) int
	}

	DeviceEvents struct {
		Events func(childComplexity int) int
	}

	DeviceGroup struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	DeviceGroupSpec struct {
		ExternalID func(childComplexity int) int
	}

	DeviceInfo struct {
		ClockDelta               func(childComplexity int) int
		ConnectionState          func(childComplexity int) int
		DeviceModel              func(childComplexity int) int
		DeviceSerialNumber       func(childComplexity int) int
		ErrorRegister            func(childComplexity int) int
		FirmwareVersion          func(childComplexity int) int
		InfoTimestamp            func(childComplexity int) int
		ManufacturerSerialNumber func(childComplexity int) int
		RelayStates              func(childComplexity int) int
	}

	DeviceSpec struct {
		CommunicationUnitLink func(childComplexity int) int
		DctID                 func(childComplexity int) int
		ExternalID            func(childComplexity int) int
		Timezone              func(childComplexity int) int
	}

	DeviceStatus struct {
		DriverType func(childComplexity int) int
		Info       func(childComplexity int) int
	}

	Driver struct {
		Spec   func(childComplexity int) int
		Status func(childComplexity int) int
	}

	DriverSpec struct {
		DisplayName       func(childComplexity int) int
		DriverType        func(childComplexity int) int
		ListeningPort     func(childComplexity int) int
		MaxCascadeDepth   func(childComplexity int) int
		MaxConcurrentJobs func(childComplexity int) int
		Templates         func(childComplexity int) int
		TypicalMemUsage   func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	DriverStatus struct {
		IsLatest       func(childComplexity int) int
		UpdateFinished func(childComplexity int) int
	}

	DriverTemplates struct {
		AccessTemplates         func(childComplexity int) int
		ActionAttributes        func(childComplexity int) int
		ActionConstraints       func(childComplexity int) int
		AppProtocols            func(childComplexity int) int
		CommunicationTemplates  func(childComplexity int) int
		UknownDeviceDescriptors func(childComplexity int) int
	}

	Duration struct {
		Nanos   func(childComplexity int) int
		Seconds func(childComplexity int) int
	}

	Empty struct {
		Empty func(childComplexity int) int
	}

	EventRecord struct {
		EventCode   func(childComplexity int) int
		EventID     func(childComplexity int) int
		EventSource func(childComplexity int) int
		EventText   func(childComplexity int) int
		Timestamp   func(childComplexity int) int
	}

	EventRecords struct {
		Values func(childComplexity int) int
	}

	FieldDescriptor struct {
		DataType      func(childComplexity int) int
		DefaultValue  func(childComplexity int) int
		Editable      func(childComplexity int) int
		FieldID       func(childComplexity int) int
		Filterable    func(childComplexity int) int
		Format        func(childComplexity int) int
		Gid           func(childComplexity int) int
		GroupID       func(childComplexity int) int
		IsUserDefined func(childComplexity int) int
		JsPath        func(childComplexity int) int
		Label         func(childComplexity int) int
		MultiValue    func(childComplexity int) int
		ObjectType    func(childComplexity int) int
		Path          func(childComplexity int) int
		Precision     func(childComplexity int) int
		Required      func(childComplexity int) int
		Secured       func(childComplexity int) int
		Sortable      func(childComplexity int) int
		Tooltip       func(childComplexity int) int
		Unit          func(childComplexity int) int
		Validation    func(childComplexity int) int
		Visible       func(childComplexity int) int
	}

	FieldDescriptorOptions struct {
		Complete func(childComplexity int) int
		Options  func(childComplexity int) int
	}

	FieldDescriptorSelector struct {
		Gid        func(childComplexity int) int
		ObjectType func(childComplexity int) int
	}

	FieldValidation struct {
		MaxInteger    func(childComplexity int) int
		MaxLength     func(childComplexity int) int
		MaxNumber     func(childComplexity int) int
		MinInteger    func(childComplexity int) int
		MinLength     func(childComplexity int) int
		MinNumber     func(childComplexity int) int
		Options       func(childComplexity int) int
		OptionsSource func(childComplexity int) int
		Re            func(childComplexity int) int
	}

	FieldValue struct {
		BinaryValue   func(childComplexity int) int
		BoolValue     func(childComplexity int) int
		DateValue     func(childComplexity int) int
		DoubleValue   func(childComplexity int) int
		DurationValue func(childComplexity int) int
		IntegerValue  func(childComplexity int) int
		StringValue   func(childComplexity int) int
	}

	FieldValues struct {
		Attributes func(childComplexity int) int
	}

	GetCryptoSecretRequest struct {
		CryptoID   func(childComplexity int) int
		DriverType func(childComplexity int) int
		ObjectType func(childComplexity int) int
	}

	GetDeviceBulksRequest struct {
		DeviceID func(childComplexity int) int
		From     func(childComplexity int) int
		To       func(childComplexity int) int
	}

	GetDeviceDataRequest struct {
		FilterExcludeStatus func(childComplexity int) int
		FilterIncludeStatus func(childComplexity int) int
		From                func(childComplexity int) int
		Series              func(childComplexity int) int
		Snapshot            func(childComplexity int) int
		To                  func(childComplexity int) int
	}

	GetDeviceDataSeriesSelector struct {
		DeviceID   func(childComplexity int) int
		VariableID func(childComplexity int) int
	}

	GetDeviceEventsRequest struct {
		DeviceID func(childComplexity int) int
		From     func(childComplexity int) int
		To       func(childComplexity int) int
	}

	IrregularProfileValues struct {
		Unit   func(childComplexity int) int
		Values func(childComplexity int) int
	}

	IrregularValue struct {
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	JobAction struct {
		ActionID             func(childComplexity int) int
		Attributes           func(childComplexity int) int
		FwUpdate             func(childComplexity int) int
		GetDeviceInfo        func(childComplexity int) int
		GetEvents            func(childComplexity int) int
		GetIrregularProfile  func(childComplexity int) int
		GetPeriodicalProfile func(childComplexity int) int
		GetRegister          func(childComplexity int) int
		GetTou               func(childComplexity int) int
		ResetBillingPeriod   func(childComplexity int) int
		SetDisconnectorState func(childComplexity int) int
		SetLimiter           func(childComplexity int) int
		SetRelayState        func(childComplexity int) int
		SetTou               func(childComplexity int) int
		SyncClock            func(childComplexity int) int
	}

	JobActionAttributes struct {
		Attributes func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	JobActionContraints struct {
		GetRegisterTypeAttributes func(childComplexity int) int
		GetRegisterTypeName       func(childComplexity int) int
	}

	JobActionSet struct {
		FwUpdate             func(childComplexity int) int
		GetDeviceInfo        func(childComplexity int) int
		GetEvents            func(childComplexity int) int
		GetIrregularProfile  func(childComplexity int) int
		GetPeriodicalProfile func(childComplexity int) int
		GetRegister          func(childComplexity int) int
		GetTou               func(childComplexity int) int
		ResetBillingPeriod   func(childComplexity int) int
		SetDisconnectorState func(childComplexity int) int
		SetLimiter           func(childComplexity int) int
		SetRelayState        func(childComplexity int) int
		SetTou               func(childComplexity int) int
		SyncClock            func(childComplexity int) int
		Variables            func(childComplexity int) int
	}

	JobDevice struct {
		AppProtocol      func(childComplexity int) int
		ConnectionInfo   func(childComplexity int) int
		DeviceAttributes func(childComplexity int) int
		DeviceID         func(childComplexity int) int
		ExternalID       func(childComplexity int) int
		JobID            func(childComplexity int) int
		Timezone         func(childComplexity int) int
	}

	JobDeviceId struct {
		DeviceID func(childComplexity int) int
		JobID    func(childComplexity int) int
	}

	JobSettings struct {
		Attempts    func(childComplexity int) int
		DeferStart  func(childComplexity int) int
		ExpiresAt   func(childComplexity int) int
		MaxDuration func(childComplexity int) int
		Priority    func(childComplexity int) int
		RetryDelay  func(childComplexity int) int
	}

	JobStatus struct {
		AttemptsDone func(childComplexity int) int
		Code         func(childComplexity int) int
		DeviceInfo   func(childComplexity int) int
		FinishedAt   func(childComplexity int) int
		QueueID      func(childComplexity int) int
		Results      func(childComplexity int) int
		StartedAt    func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	ListBulkJobsRequest struct {
		BulkID   func(childComplexity int) int
		Selector func(childComplexity int) int
	}

	ListDeviceGroupDevicesRequest struct {
		GroupID  func(childComplexity int) int
		Selector func(childComplexity int) int
	}

	ListFieldDescriptorOptionsRequest struct {
		FilterContains func(childComplexity int) int
		OptionsSource  func(childComplexity int) int
	}

	ListOfBulk struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfBulkJob struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfCommunicationBus struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfCommunicationUnit struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfCronJob struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDevice struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDeviceCommunicationUnit struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDeviceCommunicationUnitChange struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDeviceConfigurationRegister struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDeviceConfigurationTemplate struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDeviceDataInfo struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDeviceGroup struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfDriver struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfFieldDescriptor struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfId struct {
		ID func(childComplexity int) int
	}

	ListOfJobDevice struct {
		List       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfJobDeviceId struct {
		List       func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfModemPool struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfString struct {
		Items func(childComplexity int) int
	}

	ListOfTimeOfUseTable struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListOfVariable struct {
		Items      func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ListSelector struct {
		Fields   func(childComplexity int) int
		FilterBy func(childComplexity int) int
		Offset   func(childComplexity int) int
		PageSize func(childComplexity int) int
		SortBy   func(childComplexity int) int
	}

	ListSelectorFilterBy struct {
		Boolean  func(childComplexity int) int
		DataType func(childComplexity int) int
		Date     func(childComplexity int) int
		Integer  func(childComplexity int) int
		Number   func(childComplexity int) int
		Operator func(childComplexity int) int
		Path     func(childComplexity int) int
		Text     func(childComplexity int) int
	}

	ListSelectorSortBy struct {
		Desc func(childComplexity int) int
		Path func(childComplexity int) int
	}

	ListValue struct {
		Values func(childComplexity int) int
	}

	MeasuredValue struct {
		BoolValue        func(childComplexity int) int
		DoubleValue      func(childComplexity int) int
		Exponent         func(childComplexity int) int
		IntegerValue     func(childComplexity int) int
		Nstatus          func(childComplexity int) int
		PeakTs           func(childComplexity int) int
		Status           func(childComplexity int) int
		StringValue      func(childComplexity int) int
		TimestampTzValue func(childComplexity int) int
		TimestampValue   func(childComplexity int) int
	}

	MetadataFields struct {
		Fields        func(childComplexity int) int
		Generation    func(childComplexity int) int
		ID            func(childComplexity int) int
		ManagedFields func(childComplexity int) int
		Name          func(childComplexity int) int
	}

	ModemInfo struct {
		AtDial         func(childComplexity int) int
		AtEscape       func(childComplexity int) int
		AtHangup       func(childComplexity int) int
		AtInit         func(childComplexity int) int
		CommandTimeout func(childComplexity int) int
		ConnectTimeout func(childComplexity int) int
		ModemID        func(childComplexity int) int
		Name           func(childComplexity int) int
		SerialBaudRate func(childComplexity int) int
		SerialOverIP   func(childComplexity int) int
		Tcpip          func(childComplexity int) int
	}

	ModemPool struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	ModemPoolSpec struct {
		Empty func(childComplexity int) int
	}

	ModemPoolStatus struct {
		Modems func(childComplexity int) int
	}

	NetworkMap struct {
		Edges func(childComplexity int) int
		Nodes func(childComplexity int) int
	}

	OpenIdConfiguration struct {
		Content func(childComplexity int) int
	}

	ProfileBlock struct {
		StartTimestamp func(childComplexity int) int
		Values         func(childComplexity int) int
	}

	ProfileValues struct {
		Blocks func(childComplexity int) int
		Period func(childComplexity int) int
		Unit   func(childComplexity int) int
	}

	ProxyBulk struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	ProxyBulkSpec struct {
		Actions       func(childComplexity int) int
		CorrelationID func(childComplexity int) int
		Devices       func(childComplexity int) int
		DriverType    func(childComplexity int) int
		Settings      func(childComplexity int) int
		WebhookURL    func(childComplexity int) int
	}

	Query struct {
		AddCommunicationUnitsToCommunicationBus                          func(childComplexity int) int
		AddDeviceConfigurationRegisterToDeviceConfigurationTemplate      func(childComplexity int) int
		AddDevicesToGroup                                                func(childComplexity int) int
		AddRegisterToVariable                                            func(childComplexity int) int
		CancelBulk                                                       func(childComplexity int) int
		CancelBulkJobs                                                   func(childComplexity int) int
		CreateBulk                                                       func(childComplexity int) int
		CreateCommunicationBus                                           func(childComplexity int) int
		CreateCommunicationUnit                                          func(childComplexity int) int
		CreateCronJob                                                    func(childComplexity int) int
		CreateDevice                                                     func(childComplexity int) int
		CreateDeviceConfigurationRegister                                func(childComplexity int) int
		CreateDeviceConfigurationTemplate                                func(childComplexity int) int
		CreateDeviceGroup                                                func(childComplexity int) int
		CreateFieldDescriptor                                            func(childComplexity int) int
		CreateModem                                                      func(childComplexity int) int
		CreateModemPool                                                  func(childComplexity int) int
		CreateProxyBulk                                                  func(childComplexity int) int
		CreateTimeOfUseTable                                             func(childComplexity int) int
		CreateVariable                                                   func(childComplexity int) int
		DeleteCommunicationBus                                           func(childComplexity int) int
		DeleteCommunicationUnit                                          func(childComplexity int) int
		DeleteCronJob                                                    func(childComplexity int) int
		DeleteDevice                                                     func(childComplexity int) int
		DeleteDeviceConfigurationRegister                                func(childComplexity int) int
		DeleteDeviceConfigurationTemplate                                func(childComplexity int) int
		DeleteDeviceGroup                                                func(childComplexity int) int
		DeleteFieldDescriptor                                            func(childComplexity int) int
		DeleteModem                                                      func(childComplexity int) int
		DeleteModemPool                                                  func(childComplexity int) int
		DeleteTimeOfUseTable                                             func(childComplexity int) int
		DeleteVariable                                                   func(childComplexity int) int
		GetApplicationConfig                                             func(childComplexity int) int
		GetBulk                                                          func(childComplexity int) int
		GetBulkJob                                                       func(childComplexity int) int
		GetCommunicationUnit                                             func(childComplexity int) int
		GetCommunicationUnitNetworkMap                                   func(childComplexity int) int
		GetCronJob                                                       func(childComplexity int) int
		GetCryptoSecret                                                  func(childComplexity int) int
		GetDevice                                                        func(childComplexity int) int
		GetDeviceBulks                                                   func(childComplexity int) int
		GetDeviceCommunicationUnits                                      func(childComplexity int) int
		GetDeviceConfigurationRegister                                   func(childComplexity int) int
		GetDeviceConfigurationTemplate                                   func(childComplexity int) int
		GetDeviceData                                                    func(childComplexity int) int
		GetDeviceDataIrregularProfiles                                   func(childComplexity int) int
		GetDeviceDataProfiles                                            func(childComplexity int) int
		GetDeviceDataRegisters                                           func(childComplexity int) int
		GetDeviceDeviceGroups                                            func(childComplexity int) int
		GetDeviceEvents                                                  func(childComplexity int) int
		GetDeviceGroup                                                   func(childComplexity int) int
		GetDeviceInfo                                                    func(childComplexity int) int
		GetDeviceNetworkMap                                              func(childComplexity int) int
		GetDriver                                                        func(childComplexity int) int
		GetModemPool                                                     func(childComplexity int) int
		GetOpenIDConfiguration                                           func(childComplexity int) int
		GetProxyBulk                                                     func(childComplexity int) int
		GetTimeOfUseTable                                                func(childComplexity int) int
		GetVariable                                                      func(childComplexity int) int
		ListBulkJobs                                                     func(childComplexity int) int
		ListBulks                                                        func(childComplexity int) int
		ListCommunicationBuses                                           func(childComplexity int) int
		ListCommunicationUnits                                           func(childComplexity int) int
		ListCronJobs                                                     func(childComplexity int) int
		ListDeviceCommunicationUnitChanges                               func(childComplexity int) int
		ListDeviceConfigurationRegisters                                 func(childComplexity int) int
		ListDeviceConfigurationTemplates                                 func(childComplexity int) int
		ListDeviceDataInfo                                               func(childComplexity int) int
		ListDeviceGroupDevices                                           func(childComplexity int) int
		ListDeviceGroups                                                 func(childComplexity int) int
		ListDevices                                                      func(childComplexity int) int
		ListDrivers                                                      func(childComplexity int) int
		ListFieldDescriptorOptions                                       func(childComplexity int) int
		ListFieldDescriptors                                             func(childComplexity int) int
		ListModemPools                                                   func(childComplexity int) int
		ListTimeOfUseTables                                              func(childComplexity int) int
		ListVariables                                                    func(childComplexity int) int
		PauseCronJob                                                     func(childComplexity int) int
		RemoveCommunicationUnitsFromCommunicationBus                     func(childComplexity int) int
		RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate func(childComplexity int) int
		RemoveDevicesFromGroup                                           func(childComplexity int) int
		RemoveRegisterFromVariable                                       func(childComplexity int) int
		ResumeCronJob                                                    func(childComplexity int) int
		RunCronJob                                                       func(childComplexity int) int
		SetCryptoSecret                                                  func(childComplexity int) int
		SetDeviceCommunicationUnits                                      func(childComplexity int) int
		SynchronizeComponentConfig                                       func(childComplexity int) int
		UpdateApplicationConfig                                          func(childComplexity int) int
		UpdateBulk                                                       func(childComplexity int) int
		UpdateBulkJob                                                    func(childComplexity int) int
		UpdateCommunicationUnit                                          func(childComplexity int) int
		UpdateCronJob                                                    func(childComplexity int) int
		UpdateDevice                                                     func(childComplexity int) int
		UpdateDeviceConfigurationRegister                                func(childComplexity int) int
		UpdateDeviceConfigurationTemplate                                func(childComplexity int) int
		UpdateFieldDescriptor                                            func(childComplexity int) int
		UpdateModem                                                      func(childComplexity int) int
		UpdateModemPool                                                  func(childComplexity int) int
		UpdateObjectFields                                               func(childComplexity int) int
		UpdateTimeOfUseTable                                             func(childComplexity int) int
		UpdateVariable                                                   func(childComplexity int) int
	}

	RegisterValue struct {
		Timestamp func(childComplexity int) int
		Unit      func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	RegisterValues struct {
		Values func(childComplexity int) int
	}

	RelayStateRecord struct {
		RelayID func(childComplexity int) int
		State   func(childComplexity int) int
	}

	RemoveCommunicationUnitsFromCommunicationBusRequest struct {
		CommunicationBusID  func(childComplexity int) int
		CommunicationUnitID func(childComplexity int) int
	}

	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest struct {
		DctID      func(childComplexity int) int
		RegisterID func(childComplexity int) int
	}

	RemoveDevicesFromGroupRequest struct {
		DeviceID func(childComplexity int) int
		GroupID  func(childComplexity int) int
	}

	RemoveRegisterFromVariableRequest struct {
		RegisterID func(childComplexity int) int
		VariableID func(childComplexity int) int
	}

	Season struct {
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		StartDay   func(childComplexity int) int
		StartMonth func(childComplexity int) int
		StartYear  func(childComplexity int) int
		WeekID     func(childComplexity int) int
	}

	SetCryptoSecretRequest struct {
		AccessLevel                func(childComplexity int) int
		CryptoID                   func(childComplexity int) int
		Data                       func(childComplexity int) int
		DataDecryptionIv           func(childComplexity int) int
		DataDecryptionMethod       func(childComplexity int) int
		DecryptionSecretID         func(childComplexity int) int
		DriverType                 func(childComplexity int) int
		KeyID                      func(childComplexity int) int
		ObjectType                 func(childComplexity int) int
		SessionKey                 func(childComplexity int) int
		SessionKeyDecryptionMethod func(childComplexity int) int
	}

	SetDeviceCommunicationUnitsRequest struct {
		CommunicationUnits func(childComplexity int) int
		DeviceID           func(childComplexity int) int
	}

	SetFieldsSpec struct {
		Fields     func(childComplexity int) int
		ObjectID   func(childComplexity int) int
		ObjectType func(childComplexity int) int
	}

	SetModemPoolRequest struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	SetModemRequest struct {
		Modem  func(childComplexity int) int
		PoolID func(childComplexity int) int
	}

	SpecialDay struct {
		Day   func(childComplexity int) int
		DayID func(childComplexity int) int
		Month func(childComplexity int) int
		Year  func(childComplexity int) int
	}

	StringValue struct {
		Value func(childComplexity int) int
	}

	Struct struct {
		Fields func(childComplexity int) int
	}

	Switching struct {
		Hour   func(childComplexity int) int
		Minute func(childComplexity int) int
		Relays func(childComplexity int) int
		Tariff func(childComplexity int) int
	}

	TimeOfUseTable struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	TimeOfUseTableSpec struct {
		ActivateAt  func(childComplexity int) int
		DayProfiles func(childComplexity int) int
		ExpiesAt    func(childComplexity int) int
		HdoGroupID  func(childComplexity int) int
		Seasons     func(childComplexity int) int
		SpecialDays func(childComplexity int) int
		Weeks       func(childComplexity int) int
	}

	TopologyEdge struct {
		Attributes func(childComplexity int) int
		FromXId    func(childComplexity int) int
		ToXId      func(childComplexity int) int
	}

	TopologyNode struct {
		Attributes func(childComplexity int) int
		Type       func(childComplexity int) int
		XID        func(childComplexity int) int
	}

	UpdateMetadata struct {
		Metadata func(childComplexity int) int
	}

	UpdateObjectFieldsRequest struct {
		Spec func(childComplexity int) int
	}

	Value struct {
		BoolValue   func(childComplexity int) int
		ListValue   func(childComplexity int) int
		NullValue   func(childComplexity int) int
		NumberValue func(childComplexity int) int
		StringValue func(childComplexity int) int
		StructValue func(childComplexity int) int
	}

	Variable struct {
		Metadata func(childComplexity int) int
		Spec     func(childComplexity int) int
	}

	VariableDeviceData struct {
		Timestamps func(childComplexity int) int
		Units      func(childComplexity int) int
		Values     func(childComplexity int) int
		VariableID func(childComplexity int) int
	}

	VariableSpec struct {
		DataType        func(childComplexity int) int
		ExcludeDataFrom func(childComplexity int) int
		RegisterID      func(childComplexity int) int
	}

	Week struct {
		DayIds   func(childComplexity int) int
		WeekID   func(childComplexity int) int
		WeekName func(childComplexity int) int
	}

	_mapFieldValue struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapListOfString struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapValue struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	_mapstring struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}
}

type QueryResolver interface {
	ListBulks(ctx context.Context) (*model.ListOfBulk, error)
	ListBulkJobs(ctx context.Context) (*model.ListOfBulkJob, error)
	GetBulkJob(ctx context.Context) (*model.BulkJob, error)
	UpdateBulkJob(ctx context.Context) (*model.Empty, error)
	CancelBulk(ctx context.Context) (*model.Empty, error)
	CancelBulkJobs(ctx context.Context) (*model.Empty, error)
	CreateProxyBulk(ctx context.Context) (*model.StringValue, error)
	GetProxyBulk(ctx context.Context) (*model.ProxyBulk, error)
	CreateBulk(ctx context.Context) (*model.StringValue, error)
	GetBulk(ctx context.Context) (*model.Bulk, error)
	UpdateBulk(ctx context.Context) (*model.Empty, error)
	GetDeviceBulks(ctx context.Context) (*model.DeviceBulks, error)
	GetApplicationConfig(ctx context.Context) (*model.ApplicationConfigDescriptor, error)
	UpdateApplicationConfig(ctx context.Context) (*model.Empty, error)
	SynchronizeComponentConfig(ctx context.Context) (*model.ComponentConfig, error)
	CreateCronJob(ctx context.Context) (*model.StringValue, error)
	ListCronJobs(ctx context.Context) (*model.ListOfCronJob, error)
	GetCronJob(ctx context.Context) (*model.CronJob, error)
	UpdateCronJob(ctx context.Context) (*model.Empty, error)
	DeleteCronJob(ctx context.Context) (*model.Empty, error)
	RunCronJob(ctx context.Context) (*model.Empty, error)
	PauseCronJob(ctx context.Context) (*model.Empty, error)
	ResumeCronJob(ctx context.Context) (*model.Empty, error)
	GetCryptoSecret(ctx context.Context) (*model.CryptoSecrets, error)
	SetCryptoSecret(ctx context.Context) (*model.Empty, error)
	CreateDeviceConfigurationRegister(ctx context.Context) (*model.StringValue, error)
	ListDeviceConfigurationRegisters(ctx context.Context) (*model.ListOfDeviceConfigurationRegister, error)
	GetDeviceConfigurationRegister(ctx context.Context) (*model.DeviceConfigurationRegister, error)
	UpdateDeviceConfigurationRegister(ctx context.Context) (*model.Empty, error)
	DeleteDeviceConfigurationRegister(ctx context.Context) (*model.Empty, error)
	CreateDeviceConfigurationTemplate(ctx context.Context) (*model.StringValue, error)
	ListDeviceConfigurationTemplates(ctx context.Context) (*model.ListOfDeviceConfigurationTemplate, error)
	GetDeviceConfigurationTemplate(ctx context.Context) (*model.DeviceConfigurationTemplate, error)
	UpdateDeviceConfigurationTemplate(ctx context.Context) (*model.Empty, error)
	DeleteDeviceConfigurationTemplate(ctx context.Context) (*model.Empty, error)
	AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context) (*model.Empty, error)
	RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context) (*model.Empty, error)
	GetDeviceData(ctx context.Context) (*model.DeviceData, error)
	ListDeviceDataInfo(ctx context.Context) (*model.ListOfDeviceDataInfo, error)
	GetDeviceDataRegisters(ctx context.Context) (*model.RegisterValues, error)
	GetDeviceDataProfiles(ctx context.Context) (*model.ProfileValues, error)
	GetDeviceDataIrregularProfiles(ctx context.Context) (*model.IrregularProfileValues, error)
	GetDeviceEvents(ctx context.Context) (*model.DeviceEvents, error)
	CreateCommunicationUnit(ctx context.Context) (*model.StringValue, error)
	UpdateCommunicationUnit(ctx context.Context) (*model.Empty, error)
	ListCommunicationUnits(ctx context.Context) (*model.ListOfCommunicationUnit, error)
	GetCommunicationUnit(ctx context.Context) (*model.CommunicationUnit, error)
	DeleteCommunicationUnit(ctx context.Context) (*model.Empty, error)
	GetCommunicationUnitNetworkMap(ctx context.Context) (*model.NetworkMap, error)
	CreateCommunicationBus(ctx context.Context) (*model.StringValue, error)
	ListCommunicationBuses(ctx context.Context) (*model.ListOfCommunicationBus, error)
	DeleteCommunicationBus(ctx context.Context) (*model.Empty, error)
	AddCommunicationUnitsToCommunicationBus(ctx context.Context) (*model.Empty, error)
	RemoveCommunicationUnitsFromCommunicationBus(ctx context.Context) (*model.Empty, error)
	CreateDevice(ctx context.Context) (*model.StringValue, error)
	UpdateDevice(ctx context.Context) (*model.Empty, error)
	ListDevices(ctx context.Context) (*model.ListOfDevice, error)
	GetDevice(ctx context.Context) (*model.Device, error)
	DeleteDevice(ctx context.Context) (*model.Empty, error)
	GetDeviceInfo(ctx context.Context) (*model.DeviceInfo, error)
	SetDeviceCommunicationUnits(ctx context.Context) (*model.Empty, error)
	GetDeviceCommunicationUnits(ctx context.Context) (*model.ListOfDeviceCommunicationUnit, error)
	ListDeviceCommunicationUnitChanges(ctx context.Context) (*model.ListOfDeviceCommunicationUnitChange, error)
	GetDeviceDeviceGroups(ctx context.Context) (*model.ListOfDeviceGroup, error)
	GetDeviceNetworkMap(ctx context.Context) (*model.NetworkMap, error)
	CreateDeviceGroup(ctx context.Context) (*model.StringValue, error)
	ListDeviceGroups(ctx context.Context) (*model.ListOfDeviceGroup, error)
	GetDeviceGroup(ctx context.Context) (*model.DeviceGroup, error)
	DeleteDeviceGroup(ctx context.Context) (*model.Empty, error)
	AddDevicesToGroup(ctx context.Context) (*model.Empty, error)
	RemoveDevicesFromGroup(ctx context.Context) (*model.Empty, error)
	ListDeviceGroupDevices(ctx context.Context) (*model.ListOfDevice, error)
	ListModemPools(ctx context.Context) (*model.ListOfModemPool, error)
	GetModemPool(ctx context.Context) (*model.ModemPool, error)
	CreateModemPool(ctx context.Context) (*model.StringValue, error)
	UpdateModemPool(ctx context.Context) (*model.Empty, error)
	DeleteModemPool(ctx context.Context) (*model.Empty, error)
	CreateModem(ctx context.Context) (*model.StringValue, error)
	UpdateModem(ctx context.Context) (*model.Empty, error)
	DeleteModem(ctx context.Context) (*model.Empty, error)
	ListDrivers(ctx context.Context) (*model.ListOfDriver, error)
	GetDriver(ctx context.Context) (*model.Driver, error)
	CreateFieldDescriptor(ctx context.Context) (*model.StringValue, error)
	UpdateFieldDescriptor(ctx context.Context) (*model.Empty, error)
	DeleteFieldDescriptor(ctx context.Context) (*model.Empty, error)
	ListFieldDescriptors(ctx context.Context) (*model.ListOfFieldDescriptor, error)
	ListFieldDescriptorOptions(ctx context.Context) (*model.FieldDescriptorOptions, error)
	UpdateObjectFields(ctx context.Context) (*model.Empty, error)
	GetOpenIDConfiguration(ctx context.Context) (*model.OpenIDConfiguration, error)
	CreateTimeOfUseTable(ctx context.Context) (*model.StringValue, error)
	ListTimeOfUseTables(ctx context.Context) (*model.ListOfTimeOfUseTable, error)
	GetTimeOfUseTable(ctx context.Context) (*model.TimeOfUseTable, error)
	UpdateTimeOfUseTable(ctx context.Context) (*model.Empty, error)
	DeleteTimeOfUseTable(ctx context.Context) (*model.Empty, error)
	CreateVariable(ctx context.Context) (*model.StringValue, error)
	ListVariables(ctx context.Context) (*model.ListOfVariable, error)
	GetVariable(ctx context.Context) (*model.Variable, error)
	UpdateVariable(ctx context.Context) (*model.Empty, error)
	DeleteVariable(ctx context.Context) (*model.Empty, error)
	AddRegisterToVariable(ctx context.Context) (*model.Empty, error)
	RemoveRegisterFromVariable(ctx context.Context) (*model.Empty, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccessLevelTemplate.id":
		if e.complexity.AccessLevelTemplate.ID == nil {
			break
		}

		return e.complexity.AccessLevelTemplate.ID(childComplexity), true

	case "AccessLevelTemplate.name":
		if e.complexity.AccessLevelTemplate.Name == nil {
			break
		}

		return e.complexity.AccessLevelTemplate.Name(childComplexity), true

	case "ActionData.deviceInfo":
		if e.complexity.ActionData.DeviceInfo == nil {
			break
		}

		return e.complexity.ActionData.DeviceInfo(childComplexity), true

	case "ActionData.events":
		if e.complexity.ActionData.Events == nil {
			break
		}

		return e.complexity.ActionData.Events(childComplexity), true

	case "ActionData.irregularProfile":
		if e.complexity.ActionData.IrregularProfile == nil {
			break
		}

		return e.complexity.ActionData.IrregularProfile(childComplexity), true

	case "ActionData.nodata":
		if e.complexity.ActionData.Nodata == nil {
			break
		}

		return e.complexity.ActionData.Nodata(childComplexity), true

	case "ActionData.profile":
		if e.complexity.ActionData.Profile == nil {
			break
		}

		return e.complexity.ActionData.Profile(childComplexity), true

	case "ActionData.registers":
		if e.complexity.ActionData.Registers == nil {
			break
		}

		return e.complexity.ActionData.Registers(childComplexity), true

	case "ActionData.touTable":
		if e.complexity.ActionData.TouTable == nil {
			break
		}

		return e.complexity.ActionData.TouTable(childComplexity), true

	case "ActionFwUpdate._empty":
		if e.complexity.ActionFwUpdate.Empty == nil {
			break
		}

		return e.complexity.ActionFwUpdate.Empty(childComplexity), true

	case "ActionGetDeviceInfo._empty":
		if e.complexity.ActionGetDeviceInfo.Empty == nil {
			break
		}

		return e.complexity.ActionGetDeviceInfo.Empty(childComplexity), true

	case "ActionGetEvents.from":
		if e.complexity.ActionGetEvents.From == nil {
			break
		}

		return e.complexity.ActionGetEvents.From(childComplexity), true

	case "ActionGetEvents.to":
		if e.complexity.ActionGetEvents.To == nil {
			break
		}

		return e.complexity.ActionGetEvents.To(childComplexity), true

	case "ActionGetIrregularProfile.dataType":
		if e.complexity.ActionGetIrregularProfile.DataType == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.DataType(childComplexity), true

	case "ActionGetIrregularProfile.from":
		if e.complexity.ActionGetIrregularProfile.From == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.From(childComplexity), true

	case "ActionGetIrregularProfile.to":
		if e.complexity.ActionGetIrregularProfile.To == nil {
			break
		}

		return e.complexity.ActionGetIrregularProfile.To(childComplexity), true

	case "ActionGetPeriodicalProfile.dataType":
		if e.complexity.ActionGetPeriodicalProfile.DataType == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.DataType(childComplexity), true

	case "ActionGetPeriodicalProfile.from":
		if e.complexity.ActionGetPeriodicalProfile.From == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.From(childComplexity), true

	case "ActionGetPeriodicalProfile.to":
		if e.complexity.ActionGetPeriodicalProfile.To == nil {
			break
		}

		return e.complexity.ActionGetPeriodicalProfile.To(childComplexity), true

	case "ActionGetRegister.dataType":
		if e.complexity.ActionGetRegister.DataType == nil {
			break
		}

		return e.complexity.ActionGetRegister.DataType(childComplexity), true

	case "ActionGetTou.passive":
		if e.complexity.ActionGetTou.Passive == nil {
			break
		}

		return e.complexity.ActionGetTou.Passive(childComplexity), true

	case "ActionResetBillingPeriod._empty":
		if e.complexity.ActionResetBillingPeriod.Empty == nil {
			break
		}

		return e.complexity.ActionResetBillingPeriod.Empty(childComplexity), true

	case "ActionResult.actionId":
		if e.complexity.ActionResult.ActionID == nil {
			break
		}

		return e.complexity.ActionResult.ActionID(childComplexity), true

	case "ActionResult.data":
		if e.complexity.ActionResult.Data == nil {
			break
		}

		return e.complexity.ActionResult.Data(childComplexity), true

	case "ActionResult.registerId":
		if e.complexity.ActionResult.RegisterID == nil {
			break
		}

		return e.complexity.ActionResult.RegisterID(childComplexity), true

	case "ActionResult.status":
		if e.complexity.ActionResult.Status == nil {
			break
		}

		return e.complexity.ActionResult.Status(childComplexity), true

	case "ActionResult.variableName":
		if e.complexity.ActionResult.VariableName == nil {
			break
		}

		return e.complexity.ActionResult.VariableName(childComplexity), true

	case "ActionSetDisconnectorState._empty":
		if e.complexity.ActionSetDisconnectorState.Empty == nil {
			break
		}

		return e.complexity.ActionSetDisconnectorState.Empty(childComplexity), true

	case "ActionSetLimiter._empty":
		if e.complexity.ActionSetLimiter.Empty == nil {
			break
		}

		return e.complexity.ActionSetLimiter.Empty(childComplexity), true

	case "ActionSetRelayState._empty":
		if e.complexity.ActionSetRelayState.Empty == nil {
			break
		}

		return e.complexity.ActionSetRelayState.Empty(childComplexity), true

	case "ActionSetTou.table":
		if e.complexity.ActionSetTou.Table == nil {
			break
		}

		return e.complexity.ActionSetTou.Table(childComplexity), true

	case "ActionSyncClock._empty":
		if e.complexity.ActionSyncClock.Empty == nil {
			break
		}

		return e.complexity.ActionSyncClock.Empty(childComplexity), true

	case "AddCommunicationUnitsToCommunicationBusRequest.communicationBusId":
		if e.complexity.AddCommunicationUnitsToCommunicationBusRequest.CommunicationBusID == nil {
			break
		}

		return e.complexity.AddCommunicationUnitsToCommunicationBusRequest.CommunicationBusID(childComplexity), true

	case "AddCommunicationUnitsToCommunicationBusRequest.communicationUnitId":
		if e.complexity.AddCommunicationUnitsToCommunicationBusRequest.CommunicationUnitID == nil {
			break
		}

		return e.complexity.AddCommunicationUnitsToCommunicationBusRequest.CommunicationUnitID(childComplexity), true

	case "AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.dctId":
		if e.complexity.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.DctID == nil {
			break
		}

		return e.complexity.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.DctID(childComplexity), true

	case "AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.registerId":
		if e.complexity.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.RegisterID == nil {
			break
		}

		return e.complexity.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest.RegisterID(childComplexity), true

	case "AddDevicesToGroupRequest.deviceId":
		if e.complexity.AddDevicesToGroupRequest.DeviceID == nil {
			break
		}

		return e.complexity.AddDevicesToGroupRequest.DeviceID(childComplexity), true

	case "AddDevicesToGroupRequest.groupId":
		if e.complexity.AddDevicesToGroupRequest.GroupID == nil {
			break
		}

		return e.complexity.AddDevicesToGroupRequest.GroupID(childComplexity), true

	case "AddRegisterToVariableRequest.registerId":
		if e.complexity.AddRegisterToVariableRequest.RegisterID == nil {
			break
		}

		return e.complexity.AddRegisterToVariableRequest.RegisterID(childComplexity), true

	case "AddRegisterToVariableRequest.variableId":
		if e.complexity.AddRegisterToVariableRequest.VariableID == nil {
			break
		}

		return e.complexity.AddRegisterToVariableRequest.VariableID(childComplexity), true

	case "ApplicationConfig.items":
		if e.complexity.ApplicationConfig.Items == nil {
			break
		}

		return e.complexity.ApplicationConfig.Items(childComplexity), true

	case "ApplicationConfigDescriptor.descriptors":
		if e.complexity.ApplicationConfigDescriptor.Descriptors == nil {
			break
		}

		return e.complexity.ApplicationConfigDescriptor.Descriptors(childComplexity), true

	case "ApplicationConfigDescriptor.items":
		if e.complexity.ApplicationConfigDescriptor.Items == nil {
			break
		}

		return e.complexity.ApplicationConfigDescriptor.Items(childComplexity), true

	case "ApplicationProtocolTemplate.attributes":
		if e.complexity.ApplicationProtocolTemplate.Attributes == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.Attributes(childComplexity), true

	case "ApplicationProtocolTemplate.protocol":
		if e.complexity.ApplicationProtocolTemplate.Protocol == nil {
			break
		}

		return e.complexity.ApplicationProtocolTemplate.Protocol(childComplexity), true

	case "Bulk.metadata":
		if e.complexity.Bulk.Metadata == nil {
			break
		}

		return e.complexity.Bulk.Metadata(childComplexity), true

	case "Bulk.spec":
		if e.complexity.Bulk.Spec == nil {
			break
		}

		return e.complexity.Bulk.Spec(childComplexity), true

	case "Bulk.status":
		if e.complexity.Bulk.Status == nil {
			break
		}

		return e.complexity.Bulk.Status(childComplexity), true

	case "BulkJob.metadata":
		if e.complexity.BulkJob.Metadata == nil {
			break
		}

		return e.complexity.BulkJob.Metadata(childComplexity), true

	case "BulkJob.spec":
		if e.complexity.BulkJob.Spec == nil {
			break
		}

		return e.complexity.BulkJob.Spec(childComplexity), true

	case "BulkJob.status":
		if e.complexity.BulkJob.Status == nil {
			break
		}

		return e.complexity.BulkJob.Status(childComplexity), true

	case "BulkJobSpec.device":
		if e.complexity.BulkJobSpec.Device == nil {
			break
		}

		return e.complexity.BulkJobSpec.Device(childComplexity), true

	case "BulkSpec.actions":
		if e.complexity.BulkSpec.Actions == nil {
			break
		}

		return e.complexity.BulkSpec.Actions(childComplexity), true

	case "BulkSpec.correlationId":
		if e.complexity.BulkSpec.CorrelationID == nil {
			break
		}

		return e.complexity.BulkSpec.CorrelationID(childComplexity), true

	case "BulkSpec.deviceGroupId":
		if e.complexity.BulkSpec.DeviceGroupID == nil {
			break
		}

		return e.complexity.BulkSpec.DeviceGroupID(childComplexity), true

	case "BulkSpec.devices":
		if e.complexity.BulkSpec.Devices == nil {
			break
		}

		return e.complexity.BulkSpec.Devices(childComplexity), true

	case "BulkSpec.settings":
		if e.complexity.BulkSpec.Settings == nil {
			break
		}

		return e.complexity.BulkSpec.Settings(childComplexity), true

	case "BulkSpec.webhookUrl":
		if e.complexity.BulkSpec.WebhookURL == nil {
			break
		}

		return e.complexity.BulkSpec.WebhookURL(childComplexity), true

	case "BulkStatus.createdAt":
		if e.complexity.BulkStatus.CreatedAt == nil {
			break
		}

		return e.complexity.BulkStatus.CreatedAt(childComplexity), true

	case "BulkStatus.finishedAt":
		if e.complexity.BulkStatus.FinishedAt == nil {
			break
		}

		return e.complexity.BulkStatus.FinishedAt(childComplexity), true

	case "BulkStatus.jobsCount":
		if e.complexity.BulkStatus.JobsCount == nil {
			break
		}

		return e.complexity.BulkStatus.JobsCount(childComplexity), true

	case "BulkStatus.jobsFinished":
		if e.complexity.BulkStatus.JobsFinished == nil {
			break
		}

		return e.complexity.BulkStatus.JobsFinished(childComplexity), true

	case "BulkStatus.jobsSuccessful":
		if e.complexity.BulkStatus.JobsSuccessful == nil {
			break
		}

		return e.complexity.BulkStatus.JobsSuccessful(childComplexity), true

	case "BulkStatus.startedAt":
		if e.complexity.BulkStatus.StartedAt == nil {
			break
		}

		return e.complexity.BulkStatus.StartedAt(childComplexity), true

	case "BulkStatus.status":
		if e.complexity.BulkStatus.Status == nil {
			break
		}

		return e.complexity.BulkStatus.Status(childComplexity), true

	case "CommunicationBus.metadata":
		if e.complexity.CommunicationBus.Metadata == nil {
			break
		}

		return e.complexity.CommunicationBus.Metadata(childComplexity), true

	case "CommunicationBus.status":
		if e.complexity.CommunicationBus.Status == nil {
			break
		}

		return e.complexity.CommunicationBus.Status(childComplexity), true

	case "CommunicationBusStatus.communicationUnitId":
		if e.complexity.CommunicationBusStatus.CommunicationUnitID == nil {
			break
		}

		return e.complexity.CommunicationBusStatus.CommunicationUnitID(childComplexity), true

	case "CommunicationTemplate.datalinks":
		if e.complexity.CommunicationTemplate.Datalinks == nil {
			break
		}

		return e.complexity.CommunicationTemplate.Datalinks(childComplexity), true

	case "CommunicationTemplate.type":
		if e.complexity.CommunicationTemplate.Type == nil {
			break
		}

		return e.complexity.CommunicationTemplate.Type(childComplexity), true

	case "CommunicationUnit.metadata":
		if e.complexity.CommunicationUnit.Metadata == nil {
			break
		}

		return e.complexity.CommunicationUnit.Metadata(childComplexity), true

	case "CommunicationUnit.spec":
		if e.complexity.CommunicationUnit.Spec == nil {
			break
		}

		return e.complexity.CommunicationUnit.Spec(childComplexity), true

	case "CommunicationUnitSpec.connectionInfo":
		if e.complexity.CommunicationUnitSpec.ConnectionInfo == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ConnectionInfo(childComplexity), true

	case "CommunicationUnitSpec.externalId":
		if e.complexity.CommunicationUnitSpec.ExternalID == nil {
			break
		}

		return e.complexity.CommunicationUnitSpec.ExternalID(childComplexity), true

	case "ComponentConfig.items":
		if e.complexity.ComponentConfig.Items == nil {
			break
		}

		return e.complexity.ComponentConfig.Items(childComplexity), true

	case "ComponentConfig.name":
		if e.complexity.ComponentConfig.Name == nil {
			break
		}

		return e.complexity.ComponentConfig.Name(childComplexity), true

	case "ComponentConfigDescriptor.items":
		if e.complexity.ComponentConfigDescriptor.Items == nil {
			break
		}

		return e.complexity.ComponentConfigDescriptor.Items(childComplexity), true

	case "ComponentConfigDescriptor.name":
		if e.complexity.ComponentConfigDescriptor.Name == nil {
			break
		}

		return e.complexity.ComponentConfigDescriptor.Name(childComplexity), true

	case "ConnectionInfo.attributes":
		if e.complexity.ConnectionInfo.Attributes == nil {
			break
		}

		return e.complexity.ConnectionInfo.Attributes(childComplexity), true

	case "ConnectionInfo.communicationBusId":
		if e.complexity.ConnectionInfo.CommunicationBusID == nil {
			break
		}

		return e.complexity.ConnectionInfo.CommunicationBusID(childComplexity), true

	case "ConnectionInfo.linkProtocol":
		if e.complexity.ConnectionInfo.LinkProtocol == nil {
			break
		}

		return e.complexity.ConnectionInfo.LinkProtocol(childComplexity), true

	case "ConnectionInfo.modemPool":
		if e.complexity.ConnectionInfo.ModemPool == nil {
			break
		}

		return e.complexity.ConnectionInfo.ModemPool(childComplexity), true

	case "ConnectionInfo.serialOverIp":
		if e.complexity.ConnectionInfo.SerialOverIP == nil {
			break
		}

		return e.complexity.ConnectionInfo.SerialOverIP(childComplexity), true

	case "ConnectionInfo.tcpip":
		if e.complexity.ConnectionInfo.Tcpip == nil {
			break
		}

		return e.complexity.ConnectionInfo.Tcpip(childComplexity), true

	case "ConnectionTypeControlledSerial.direct":
		if e.complexity.ConnectionTypeControlledSerial.Direct == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Direct(childComplexity), true

	case "ConnectionTypeControlledSerial.moxa":
		if e.complexity.ConnectionTypeControlledSerial.Moxa == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Moxa(childComplexity), true

	case "ConnectionTypeControlledSerial.rfc2217":
		if e.complexity.ConnectionTypeControlledSerial.Rfc2217 == nil {
			break
		}

		return e.complexity.ConnectionTypeControlledSerial.Rfc2217(childComplexity), true

	case "ConnectionTypeDirectTcpIp.host":
		if e.complexity.ConnectionTypeDirectTcpIp.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Host(childComplexity), true

	case "ConnectionTypeDirectTcpIp.port":
		if e.complexity.ConnectionTypeDirectTcpIp.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Port(childComplexity), true

	case "ConnectionTypeDirectTcpIp.timeout":
		if e.complexity.ConnectionTypeDirectTcpIp.Timeout == nil {
			break
		}

		return e.complexity.ConnectionTypeDirectTcpIp.Timeout(childComplexity), true

	case "ConnectionTypeModemPool.modem":
		if e.complexity.ConnectionTypeModemPool.Modem == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.Modem(childComplexity), true

	case "ConnectionTypeModemPool.number":
		if e.complexity.ConnectionTypeModemPool.Number == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.Number(childComplexity), true

	case "ConnectionTypeModemPool.poolId":
		if e.complexity.ConnectionTypeModemPool.PoolID == nil {
			break
		}

		return e.complexity.ConnectionTypeModemPool.PoolID(childComplexity), true

	case "ConnectionTypeSerialDirect.host":
		if e.complexity.ConnectionTypeSerialDirect.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Host(childComplexity), true

	case "ConnectionTypeSerialDirect.port":
		if e.complexity.ConnectionTypeSerialDirect.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Port(childComplexity), true

	case "ConnectionTypeSerialDirect.timeout":
		if e.complexity.ConnectionTypeSerialDirect.Timeout == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialDirect.Timeout(childComplexity), true

	case "ConnectionTypeSerialMoxa.commandPort":
		if e.complexity.ConnectionTypeSerialMoxa.CommandPort == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.CommandPort(childComplexity), true

	case "ConnectionTypeSerialMoxa.dataPort":
		if e.complexity.ConnectionTypeSerialMoxa.DataPort == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.DataPort(childComplexity), true

	case "ConnectionTypeSerialMoxa.host":
		if e.complexity.ConnectionTypeSerialMoxa.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.Host(childComplexity), true

	case "ConnectionTypeSerialMoxa.timeout":
		if e.complexity.ConnectionTypeSerialMoxa.Timeout == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialMoxa.Timeout(childComplexity), true

	case "ConnectionTypeSerialRfc2217.host":
		if e.complexity.ConnectionTypeSerialRfc2217.Host == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialRfc2217.Host(childComplexity), true

	case "ConnectionTypeSerialRfc2217.port":
		if e.complexity.ConnectionTypeSerialRfc2217.Port == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialRfc2217.Port(childComplexity), true

	case "ConnectionTypeSerialRfc2217.timeout":
		if e.complexity.ConnectionTypeSerialRfc2217.Timeout == nil {
			break
		}

		return e.complexity.ConnectionTypeSerialRfc2217.Timeout(childComplexity), true

	case "CreateBulkRequest.metadata":
		if e.complexity.CreateBulkRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateBulkRequest.Metadata(childComplexity), true

	case "CreateBulkRequest.spec":
		if e.complexity.CreateBulkRequest.Spec == nil {
			break
		}

		return e.complexity.CreateBulkRequest.Spec(childComplexity), true

	case "CreateCommunicationBusRequest.metadata":
		if e.complexity.CreateCommunicationBusRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateCommunicationBusRequest.Metadata(childComplexity), true

	case "CreateCommunicationUnitRequest.metadata":
		if e.complexity.CreateCommunicationUnitRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateCommunicationUnitRequest.Metadata(childComplexity), true

	case "CreateCommunicationUnitRequest.spec":
		if e.complexity.CreateCommunicationUnitRequest.Spec == nil {
			break
		}

		return e.complexity.CreateCommunicationUnitRequest.Spec(childComplexity), true

	case "CreateCronJobRequest.metadata":
		if e.complexity.CreateCronJobRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateCronJobRequest.Metadata(childComplexity), true

	case "CreateCronJobRequest.spec":
		if e.complexity.CreateCronJobRequest.Spec == nil {
			break
		}

		return e.complexity.CreateCronJobRequest.Spec(childComplexity), true

	case "CreateDeviceConfigurationRegisterRequest.metadata":
		if e.complexity.CreateDeviceConfigurationRegisterRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateDeviceConfigurationRegisterRequest.Metadata(childComplexity), true

	case "CreateDeviceConfigurationRegisterRequest.spec":
		if e.complexity.CreateDeviceConfigurationRegisterRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceConfigurationRegisterRequest.Spec(childComplexity), true

	case "CreateDeviceConfigurationTemplateRequest.metadata":
		if e.complexity.CreateDeviceConfigurationTemplateRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateDeviceConfigurationTemplateRequest.Metadata(childComplexity), true

	case "CreateDeviceConfigurationTemplateRequest.spec":
		if e.complexity.CreateDeviceConfigurationTemplateRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceConfigurationTemplateRequest.Spec(childComplexity), true

	case "CreateDeviceGroupRequest.metadata":
		if e.complexity.CreateDeviceGroupRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateDeviceGroupRequest.Metadata(childComplexity), true

	case "CreateDeviceGroupRequest.spec":
		if e.complexity.CreateDeviceGroupRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceGroupRequest.Spec(childComplexity), true

	case "CreateDeviceRequest.metadata":
		if e.complexity.CreateDeviceRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateDeviceRequest.Metadata(childComplexity), true

	case "CreateDeviceRequest.spec":
		if e.complexity.CreateDeviceRequest.Spec == nil {
			break
		}

		return e.complexity.CreateDeviceRequest.Spec(childComplexity), true

	case "CreateFieldDescriptorRequest.spec":
		if e.complexity.CreateFieldDescriptorRequest.Spec == nil {
			break
		}

		return e.complexity.CreateFieldDescriptorRequest.Spec(childComplexity), true

	case "CreateProxyBulkRequest.metadata":
		if e.complexity.CreateProxyBulkRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateProxyBulkRequest.Metadata(childComplexity), true

	case "CreateProxyBulkRequest.spec":
		if e.complexity.CreateProxyBulkRequest.Spec == nil {
			break
		}

		return e.complexity.CreateProxyBulkRequest.Spec(childComplexity), true

	case "CreateTimeOfUseTableRequest.metadata":
		if e.complexity.CreateTimeOfUseTableRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateTimeOfUseTableRequest.Metadata(childComplexity), true

	case "CreateTimeOfUseTableRequest.spec":
		if e.complexity.CreateTimeOfUseTableRequest.Spec == nil {
			break
		}

		return e.complexity.CreateTimeOfUseTableRequest.Spec(childComplexity), true

	case "CreateVariableRequest.metadata":
		if e.complexity.CreateVariableRequest.Metadata == nil {
			break
		}

		return e.complexity.CreateVariableRequest.Metadata(childComplexity), true

	case "CreateVariableRequest.spec":
		if e.complexity.CreateVariableRequest.Spec == nil {
			break
		}

		return e.complexity.CreateVariableRequest.Spec(childComplexity), true

	case "CronJob.metadata":
		if e.complexity.CronJob.Metadata == nil {
			break
		}

		return e.complexity.CronJob.Metadata(childComplexity), true

	case "CronJob.spec":
		if e.complexity.CronJob.Spec == nil {
			break
		}

		return e.complexity.CronJob.Spec(childComplexity), true

	case "CronJob.status":
		if e.complexity.CronJob.Status == nil {
			break
		}

		return e.complexity.CronJob.Status(childComplexity), true

	case "CronJobSpec.data":
		if e.complexity.CronJobSpec.Data == nil {
			break
		}

		return e.complexity.CronJobSpec.Data(childComplexity), true

	case "CronJobSpec.schedule":
		if e.complexity.CronJobSpec.Schedule == nil {
			break
		}

		return e.complexity.CronJobSpec.Schedule(childComplexity), true

	case "CronJobSpec.suspend":
		if e.complexity.CronJobSpec.Suspend == nil {
			break
		}

		return e.complexity.CronJobSpec.Suspend(childComplexity), true

	case "CronJobSpec.timezone":
		if e.complexity.CronJobSpec.Timezone == nil {
			break
		}

		return e.complexity.CronJobSpec.Timezone(childComplexity), true

	case "CronJobSpec.type":
		if e.complexity.CronJobSpec.Type == nil {
			break
		}

		return e.complexity.CronJobSpec.Type(childComplexity), true

	case "CronJobStatus.error":
		if e.complexity.CronJobStatus.Error == nil {
			break
		}

		return e.complexity.CronJobStatus.Error(childComplexity), true

	case "CronJobStatus.lastRunAt":
		if e.complexity.CronJobStatus.LastRunAt == nil {
			break
		}

		return e.complexity.CronJobStatus.LastRunAt(childComplexity), true

	case "CronJobStatus.nextRunAt":
		if e.complexity.CronJobStatus.NextRunAt == nil {
			break
		}

		return e.complexity.CronJobStatus.NextRunAt(childComplexity), true

	case "CryptoSecret.accessLevel":
		if e.complexity.CryptoSecret.AccessLevel == nil {
			break
		}

		return e.complexity.CryptoSecret.AccessLevel(childComplexity), true

	case "CryptoSecret.createdAt":
		if e.complexity.CryptoSecret.CreatedAt == nil {
			break
		}

		return e.complexity.CryptoSecret.CreatedAt(childComplexity), true

	case "CryptoSecret.data":
		if e.complexity.CryptoSecret.Data == nil {
			break
		}

		return e.complexity.CryptoSecret.Data(childComplexity), true

	case "CryptoSecret.keyId":
		if e.complexity.CryptoSecret.KeyID == nil {
			break
		}

		return e.complexity.CryptoSecret.KeyID(childComplexity), true

	case "CryptoSecret.updatedAt":
		if e.complexity.CryptoSecret.UpdatedAt == nil {
			break
		}

		return e.complexity.CryptoSecret.UpdatedAt(childComplexity), true

	case "CryptoSecrets.secrets":
		if e.complexity.CryptoSecrets.Secrets == nil {
			break
		}

		return e.complexity.CryptoSecrets.Secrets(childComplexity), true

	case "DataLinkTemplate.appProtocolRefs":
		if e.complexity.DataLinkTemplate.AppProtocolRefs == nil {
			break
		}

		return e.complexity.DataLinkTemplate.AppProtocolRefs(childComplexity), true

	case "DataLinkTemplate.attributes":
		if e.complexity.DataLinkTemplate.Attributes == nil {
			break
		}

		return e.complexity.DataLinkTemplate.Attributes(childComplexity), true

	case "DataLinkTemplate.linkProtocol":
		if e.complexity.DataLinkTemplate.LinkProtocol == nil {
			break
		}

		return e.complexity.DataLinkTemplate.LinkProtocol(childComplexity), true

	case "Date.day":
		if e.complexity.Date.Day == nil {
			break
		}

		return e.complexity.Date.Day(childComplexity), true

	case "Date.month":
		if e.complexity.Date.Month == nil {
			break
		}

		return e.complexity.Date.Month(childComplexity), true

	case "Date.year":
		if e.complexity.Date.Year == nil {
			break
		}

		return e.complexity.Date.Year(childComplexity), true

	case "DayProfile.dayId":
		if e.complexity.DayProfile.DayID == nil {
			break
		}

		return e.complexity.DayProfile.DayID(childComplexity), true

	case "DayProfile.switching":
		if e.complexity.DayProfile.Switching == nil {
			break
		}

		return e.complexity.DayProfile.Switching(childComplexity), true

	case "Device.metadata":
		if e.complexity.Device.Metadata == nil {
			break
		}

		return e.complexity.Device.Metadata(childComplexity), true

	case "Device.spec":
		if e.complexity.Device.Spec == nil {
			break
		}

		return e.complexity.Device.Spec(childComplexity), true

	case "Device.status":
		if e.complexity.Device.Status == nil {
			break
		}

		return e.complexity.Device.Status(childComplexity), true

	case "DeviceBulks.bulks":
		if e.complexity.DeviceBulks.Bulks == nil {
			break
		}

		return e.complexity.DeviceBulks.Bulks(childComplexity), true

	case "DeviceCommunicationUnit.appProtocol":
		if e.complexity.DeviceCommunicationUnit.AppProtocol == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.AppProtocol(childComplexity), true

	case "DeviceCommunicationUnit.attributes":
		if e.complexity.DeviceCommunicationUnit.Attributes == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.Attributes(childComplexity), true

	case "DeviceCommunicationUnit.communicationUnitId":
		if e.complexity.DeviceCommunicationUnit.CommunicationUnitID == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnit.CommunicationUnitID(childComplexity), true

	case "DeviceCommunicationUnitChange.status":
		if e.complexity.DeviceCommunicationUnitChange.Status == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnitChange.Status(childComplexity), true

	case "DeviceCommunicationUnitChangeStatus.changeAt":
		if e.complexity.DeviceCommunicationUnitChangeStatus.ChangeAt == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnitChangeStatus.ChangeAt(childComplexity), true

	case "DeviceCommunicationUnitChangeStatus.communicationUnitId":
		if e.complexity.DeviceCommunicationUnitChangeStatus.CommunicationUnitID == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnitChangeStatus.CommunicationUnitID(childComplexity), true

	case "DeviceCommunicationUnitChangeStatus.communicationUnitName":
		if e.complexity.DeviceCommunicationUnitChangeStatus.CommunicationUnitName == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnitChangeStatus.CommunicationUnitName(childComplexity), true

	case "DeviceCommunicationUnitChangeStatus.deviceId":
		if e.complexity.DeviceCommunicationUnitChangeStatus.DeviceID == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnitChangeStatus.DeviceID(childComplexity), true

	case "DeviceCommunicationUnitChangeStatus.deviceName":
		if e.complexity.DeviceCommunicationUnitChangeStatus.DeviceName == nil {
			break
		}

		return e.complexity.DeviceCommunicationUnitChangeStatus.DeviceName(childComplexity), true

	case "DeviceConfigurationRegister.metadata":
		if e.complexity.DeviceConfigurationRegister.Metadata == nil {
			break
		}

		return e.complexity.DeviceConfigurationRegister.Metadata(childComplexity), true

	case "DeviceConfigurationRegister.spec":
		if e.complexity.DeviceConfigurationRegister.Spec == nil {
			break
		}

		return e.complexity.DeviceConfigurationRegister.Spec(childComplexity), true

	case "DeviceConfigurationRegisterSpec.attributes":
		if e.complexity.DeviceConfigurationRegisterSpec.Attributes == nil {
			break
		}

		return e.complexity.DeviceConfigurationRegisterSpec.Attributes(childComplexity), true

	case "DeviceConfigurationRegisterSpec.dataType":
		if e.complexity.DeviceConfigurationRegisterSpec.DataType == nil {
			break
		}

		return e.complexity.DeviceConfigurationRegisterSpec.DataType(childComplexity), true

	case "DeviceConfigurationRegisterSpec.driverType":
		if e.complexity.DeviceConfigurationRegisterSpec.DriverType == nil {
			break
		}

		return e.complexity.DeviceConfigurationRegisterSpec.DriverType(childComplexity), true

	case "DeviceConfigurationRegisterSpec.registerType":
		if e.complexity.DeviceConfigurationRegisterSpec.RegisterType == nil {
			break
		}

		return e.complexity.DeviceConfigurationRegisterSpec.RegisterType(childComplexity), true

	case "DeviceConfigurationTemplate.metadata":
		if e.complexity.DeviceConfigurationTemplate.Metadata == nil {
			break
		}

		return e.complexity.DeviceConfigurationTemplate.Metadata(childComplexity), true

	case "DeviceConfigurationTemplate.spec":
		if e.complexity.DeviceConfigurationTemplate.Spec == nil {
			break
		}

		return e.complexity.DeviceConfigurationTemplate.Spec(childComplexity), true

	case "DeviceConfigurationTemplateSpec.driverType":
		if e.complexity.DeviceConfigurationTemplateSpec.DriverType == nil {
			break
		}

		return e.complexity.DeviceConfigurationTemplateSpec.DriverType(childComplexity), true

	case "DeviceConfigurationTemplateSpec.registerId":
		if e.complexity.DeviceConfigurationTemplateSpec.RegisterID == nil {
			break
		}

		return e.complexity.DeviceConfigurationTemplateSpec.RegisterID(childComplexity), true

	case "DeviceData.devices":
		if e.complexity.DeviceData.Devices == nil {
			break
		}

		return e.complexity.DeviceData.Devices(childComplexity), true

	case "DeviceDataInfo.spec":
		if e.complexity.DeviceDataInfo.Spec == nil {
			break
		}

		return e.complexity.DeviceDataInfo.Spec(childComplexity), true

	case "DeviceDataInfo.status":
		if e.complexity.DeviceDataInfo.Status == nil {
			break
		}

		return e.complexity.DeviceDataInfo.Status(childComplexity), true

	case "DeviceDataInfoSpec.deviceId":
		if e.complexity.DeviceDataInfoSpec.DeviceID == nil {
			break
		}

		return e.complexity.DeviceDataInfoSpec.DeviceID(childComplexity), true

	case "DeviceDataInfoSpec.registerId":
		if e.complexity.DeviceDataInfoSpec.RegisterID == nil {
			break
		}

		return e.complexity.DeviceDataInfoSpec.RegisterID(childComplexity), true

	case "DeviceDataInfoStatus.lastValueAt":
		if e.complexity.DeviceDataInfoStatus.LastValueAt == nil {
			break
		}

		return e.complexity.DeviceDataInfoStatus.LastValueAt(childComplexity), true

	case "DeviceDataInfoStatus.period":
		if e.complexity.DeviceDataInfoStatus.Period == nil {
			break
		}

		return e.complexity.DeviceDataInfoStatus.Period(childComplexity), true

	case "DeviceDataInfoStatus.registerName":
		if e.complexity.DeviceDataInfoStatus.RegisterName == nil {
			break
		}

		return e.complexity.DeviceDataInfoStatus.RegisterName(childComplexity), true

	case "DeviceDeviceData.data":
		if e.complexity.DeviceDeviceData.Data == nil {
			break
		}

		return e.complexity.DeviceDeviceData.Data(childComplexity), true

	case "DeviceDeviceData.deviceId":
		if e.complexity.DeviceDeviceData.DeviceID == nil {
			break
		}

		return e.complexity.DeviceDeviceData.DeviceID(childComplexity), true

	case "DeviceEventRecord.deviceId":
		if e.complexity.DeviceEventRecord.DeviceID == nil {
			break
		}

		return e.complexity.DeviceEventRecord.DeviceID(childComplexity), true

	case "DeviceEventRecord.eventCode":
		if e.complexity.DeviceEventRecord.EventCode == nil {
			break
		}

		return e.complexity.DeviceEventRecord.EventCode(childComplexity), true

	case "DeviceEventRecord.eventId":
		if e.complexity.DeviceEventRecord.EventID == nil {
			break
		}

		return e.complexity.DeviceEventRecord.EventID(childComplexity), true

	case "DeviceEventRecord.eventSource":
		if e.complexity.DeviceEventRecord.EventSource == nil {
			break
		}

		return e.complexity.DeviceEventRecord.EventSource(childComplexity), true

	case "DeviceEventRecord.eventText":
		if e.complexity.DeviceEventRecord.EventText == nil {
			break
		}

		return e.complexity.DeviceEventRecord.EventText(childComplexity), true

	case "DeviceEventRecord.timestamp":
		if e.complexity.DeviceEventRecord.Timestamp == nil {
			break
		}

		return e.complexity.DeviceEventRecord.Timestamp(childComplexity), true

	case "DeviceEvents.events":
		if e.complexity.DeviceEvents.Events == nil {
			break
		}

		return e.complexity.DeviceEvents.Events(childComplexity), true

	case "DeviceGroup.metadata":
		if e.complexity.DeviceGroup.Metadata == nil {
			break
		}

		return e.complexity.DeviceGroup.Metadata(childComplexity), true

	case "DeviceGroup.spec":
		if e.complexity.DeviceGroup.Spec == nil {
			break
		}

		return e.complexity.DeviceGroup.Spec(childComplexity), true

	case "DeviceGroupSpec.externalId":
		if e.complexity.DeviceGroupSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceGroupSpec.ExternalID(childComplexity), true

	case "DeviceInfo.clockDelta":
		if e.complexity.DeviceInfo.ClockDelta == nil {
			break
		}

		return e.complexity.DeviceInfo.ClockDelta(childComplexity), true

	case "DeviceInfo.connectionState":
		if e.complexity.DeviceInfo.ConnectionState == nil {
			break
		}

		return e.complexity.DeviceInfo.ConnectionState(childComplexity), true

	case "DeviceInfo.deviceModel":
		if e.complexity.DeviceInfo.DeviceModel == nil {
			break
		}

		return e.complexity.DeviceInfo.DeviceModel(childComplexity), true

	case "DeviceInfo.deviceSerialNumber":
		if e.complexity.DeviceInfo.DeviceSerialNumber == nil {
			break
		}

		return e.complexity.DeviceInfo.DeviceSerialNumber(childComplexity), true

	case "DeviceInfo.errorRegister":
		if e.complexity.DeviceInfo.ErrorRegister == nil {
			break
		}

		return e.complexity.DeviceInfo.ErrorRegister(childComplexity), true

	case "DeviceInfo.firmwareVersion":
		if e.complexity.DeviceInfo.FirmwareVersion == nil {
			break
		}

		return e.complexity.DeviceInfo.FirmwareVersion(childComplexity), true

	case "DeviceInfo.infoTimestamp":
		if e.complexity.DeviceInfo.InfoTimestamp == nil {
			break
		}

		return e.complexity.DeviceInfo.InfoTimestamp(childComplexity), true

	case "DeviceInfo.manufacturerSerialNumber":
		if e.complexity.DeviceInfo.ManufacturerSerialNumber == nil {
			break
		}

		return e.complexity.DeviceInfo.ManufacturerSerialNumber(childComplexity), true

	case "DeviceInfo.relayStates":
		if e.complexity.DeviceInfo.RelayStates == nil {
			break
		}

		return e.complexity.DeviceInfo.RelayStates(childComplexity), true

	case "DeviceSpec.communicationUnitLink":
		if e.complexity.DeviceSpec.CommunicationUnitLink == nil {
			break
		}

		return e.complexity.DeviceSpec.CommunicationUnitLink(childComplexity), true

	case "DeviceSpec.dctId":
		if e.complexity.DeviceSpec.DctID == nil {
			break
		}

		return e.complexity.DeviceSpec.DctID(childComplexity), true

	case "DeviceSpec.externalId":
		if e.complexity.DeviceSpec.ExternalID == nil {
			break
		}

		return e.complexity.DeviceSpec.ExternalID(childComplexity), true

	case "DeviceSpec.timezone":
		if e.complexity.DeviceSpec.Timezone == nil {
			break
		}

		return e.complexity.DeviceSpec.Timezone(childComplexity), true

	case "DeviceStatus.driverType":
		if e.complexity.DeviceStatus.DriverType == nil {
			break
		}

		return e.complexity.DeviceStatus.DriverType(childComplexity), true

	case "DeviceStatus.info":
		if e.complexity.DeviceStatus.Info == nil {
			break
		}

		return e.complexity.DeviceStatus.Info(childComplexity), true

	case "Driver.spec":
		if e.complexity.Driver.Spec == nil {
			break
		}

		return e.complexity.Driver.Spec(childComplexity), true

	case "Driver.status":
		if e.complexity.Driver.Status == nil {
			break
		}

		return e.complexity.Driver.Status(childComplexity), true

	case "DriverSpec.displayName":
		if e.complexity.DriverSpec.DisplayName == nil {
			break
		}

		return e.complexity.DriverSpec.DisplayName(childComplexity), true

	case "DriverSpec.driverType":
		if e.complexity.DriverSpec.DriverType == nil {
			break
		}

		return e.complexity.DriverSpec.DriverType(childComplexity), true

	case "DriverSpec.listeningPort":
		if e.complexity.DriverSpec.ListeningPort == nil {
			break
		}

		return e.complexity.DriverSpec.ListeningPort(childComplexity), true

	case "DriverSpec.maxCascadeDepth":
		if e.complexity.DriverSpec.MaxCascadeDepth == nil {
			break
		}

		return e.complexity.DriverSpec.MaxCascadeDepth(childComplexity), true

	case "DriverSpec.maxConcurrentJobs":
		if e.complexity.DriverSpec.MaxConcurrentJobs == nil {
			break
		}

		return e.complexity.DriverSpec.MaxConcurrentJobs(childComplexity), true

	case "DriverSpec.templates":
		if e.complexity.DriverSpec.Templates == nil {
			break
		}

		return e.complexity.DriverSpec.Templates(childComplexity), true

	case "DriverSpec.typicalMemUsage":
		if e.complexity.DriverSpec.TypicalMemUsage == nil {
			break
		}

		return e.complexity.DriverSpec.TypicalMemUsage(childComplexity), true

	case "DriverSpec.version":
		if e.complexity.DriverSpec.Version == nil {
			break
		}

		return e.complexity.DriverSpec.Version(childComplexity), true

	case "DriverStatus.isLatest":
		if e.complexity.DriverStatus.IsLatest == nil {
			break
		}

		return e.complexity.DriverStatus.IsLatest(childComplexity), true

	case "DriverStatus.updateFinished":
		if e.complexity.DriverStatus.UpdateFinished == nil {
			break
		}

		return e.complexity.DriverStatus.UpdateFinished(childComplexity), true

	case "DriverTemplates.accessTemplates":
		if e.complexity.DriverTemplates.AccessTemplates == nil {
			break
		}

		return e.complexity.DriverTemplates.AccessTemplates(childComplexity), true

	case "DriverTemplates.actionAttributes":
		if e.complexity.DriverTemplates.ActionAttributes == nil {
			break
		}

		return e.complexity.DriverTemplates.ActionAttributes(childComplexity), true

	case "DriverTemplates.actionConstraints":
		if e.complexity.DriverTemplates.ActionConstraints == nil {
			break
		}

		return e.complexity.DriverTemplates.ActionConstraints(childComplexity), true

	case "DriverTemplates.appProtocols":
		if e.complexity.DriverTemplates.AppProtocols == nil {
			break
		}

		return e.complexity.DriverTemplates.AppProtocols(childComplexity), true

	case "DriverTemplates.communicationTemplates":
		if e.complexity.DriverTemplates.CommunicationTemplates == nil {
			break
		}

		return e.complexity.DriverTemplates.CommunicationTemplates(childComplexity), true

	case "DriverTemplates.uknownDeviceDescriptors":
		if e.complexity.DriverTemplates.UknownDeviceDescriptors == nil {
			break
		}

		return e.complexity.DriverTemplates.UknownDeviceDescriptors(childComplexity), true

	case "Duration.nanos":
		if e.complexity.Duration.Nanos == nil {
			break
		}

		return e.complexity.Duration.Nanos(childComplexity), true

	case "Duration.seconds":
		if e.complexity.Duration.Seconds == nil {
			break
		}

		return e.complexity.Duration.Seconds(childComplexity), true

	case "Empty._empty":
		if e.complexity.Empty.Empty == nil {
			break
		}

		return e.complexity.Empty.Empty(childComplexity), true

	case "EventRecord.eventCode":
		if e.complexity.EventRecord.EventCode == nil {
			break
		}

		return e.complexity.EventRecord.EventCode(childComplexity), true

	case "EventRecord.eventId":
		if e.complexity.EventRecord.EventID == nil {
			break
		}

		return e.complexity.EventRecord.EventID(childComplexity), true

	case "EventRecord.eventSource":
		if e.complexity.EventRecord.EventSource == nil {
			break
		}

		return e.complexity.EventRecord.EventSource(childComplexity), true

	case "EventRecord.eventText":
		if e.complexity.EventRecord.EventText == nil {
			break
		}

		return e.complexity.EventRecord.EventText(childComplexity), true

	case "EventRecord.timestamp":
		if e.complexity.EventRecord.Timestamp == nil {
			break
		}

		return e.complexity.EventRecord.Timestamp(childComplexity), true

	case "EventRecords.values":
		if e.complexity.EventRecords.Values == nil {
			break
		}

		return e.complexity.EventRecords.Values(childComplexity), true

	case "FieldDescriptor.dataType":
		if e.complexity.FieldDescriptor.DataType == nil {
			break
		}

		return e.complexity.FieldDescriptor.DataType(childComplexity), true

	case "FieldDescriptor.defaultValue":
		if e.complexity.FieldDescriptor.DefaultValue == nil {
			break
		}

		return e.complexity.FieldDescriptor.DefaultValue(childComplexity), true

	case "FieldDescriptor.editable":
		if e.complexity.FieldDescriptor.Editable == nil {
			break
		}

		return e.complexity.FieldDescriptor.Editable(childComplexity), true

	case "FieldDescriptor.fieldId":
		if e.complexity.FieldDescriptor.FieldID == nil {
			break
		}

		return e.complexity.FieldDescriptor.FieldID(childComplexity), true

	case "FieldDescriptor.filterable":
		if e.complexity.FieldDescriptor.Filterable == nil {
			break
		}

		return e.complexity.FieldDescriptor.Filterable(childComplexity), true

	case "FieldDescriptor.format":
		if e.complexity.FieldDescriptor.Format == nil {
			break
		}

		return e.complexity.FieldDescriptor.Format(childComplexity), true

	case "FieldDescriptor.gid":
		if e.complexity.FieldDescriptor.Gid == nil {
			break
		}

		return e.complexity.FieldDescriptor.Gid(childComplexity), true

	case "FieldDescriptor.groupId":
		if e.complexity.FieldDescriptor.GroupID == nil {
			break
		}

		return e.complexity.FieldDescriptor.GroupID(childComplexity), true

	case "FieldDescriptor.isUserDefined":
		if e.complexity.FieldDescriptor.IsUserDefined == nil {
			break
		}

		return e.complexity.FieldDescriptor.IsUserDefined(childComplexity), true

	case "FieldDescriptor.jsPath":
		if e.complexity.FieldDescriptor.JsPath == nil {
			break
		}

		return e.complexity.FieldDescriptor.JsPath(childComplexity), true

	case "FieldDescriptor.label":
		if e.complexity.FieldDescriptor.Label == nil {
			break
		}

		return e.complexity.FieldDescriptor.Label(childComplexity), true

	case "FieldDescriptor.multiValue":
		if e.complexity.FieldDescriptor.MultiValue == nil {
			break
		}

		return e.complexity.FieldDescriptor.MultiValue(childComplexity), true

	case "FieldDescriptor.objectType":
		if e.complexity.FieldDescriptor.ObjectType == nil {
			break
		}

		return e.complexity.FieldDescriptor.ObjectType(childComplexity), true

	case "FieldDescriptor.path":
		if e.complexity.FieldDescriptor.Path == nil {
			break
		}

		return e.complexity.FieldDescriptor.Path(childComplexity), true

	case "FieldDescriptor.precision":
		if e.complexity.FieldDescriptor.Precision == nil {
			break
		}

		return e.complexity.FieldDescriptor.Precision(childComplexity), true

	case "FieldDescriptor.required":
		if e.complexity.FieldDescriptor.Required == nil {
			break
		}

		return e.complexity.FieldDescriptor.Required(childComplexity), true

	case "FieldDescriptor.secured":
		if e.complexity.FieldDescriptor.Secured == nil {
			break
		}

		return e.complexity.FieldDescriptor.Secured(childComplexity), true

	case "FieldDescriptor.sortable":
		if e.complexity.FieldDescriptor.Sortable == nil {
			break
		}

		return e.complexity.FieldDescriptor.Sortable(childComplexity), true

	case "FieldDescriptor.tooltip":
		if e.complexity.FieldDescriptor.Tooltip == nil {
			break
		}

		return e.complexity.FieldDescriptor.Tooltip(childComplexity), true

	case "FieldDescriptor.unit":
		if e.complexity.FieldDescriptor.Unit == nil {
			break
		}

		return e.complexity.FieldDescriptor.Unit(childComplexity), true

	case "FieldDescriptor.validation":
		if e.complexity.FieldDescriptor.Validation == nil {
			break
		}

		return e.complexity.FieldDescriptor.Validation(childComplexity), true

	case "FieldDescriptor.visible":
		if e.complexity.FieldDescriptor.Visible == nil {
			break
		}

		return e.complexity.FieldDescriptor.Visible(childComplexity), true

	case "FieldDescriptorOptions.complete":
		if e.complexity.FieldDescriptorOptions.Complete == nil {
			break
		}

		return e.complexity.FieldDescriptorOptions.Complete(childComplexity), true

	case "FieldDescriptorOptions.options":
		if e.complexity.FieldDescriptorOptions.Options == nil {
			break
		}

		return e.complexity.FieldDescriptorOptions.Options(childComplexity), true

	case "FieldDescriptorSelector.gid":
		if e.complexity.FieldDescriptorSelector.Gid == nil {
			break
		}

		return e.complexity.FieldDescriptorSelector.Gid(childComplexity), true

	case "FieldDescriptorSelector.objectType":
		if e.complexity.FieldDescriptorSelector.ObjectType == nil {
			break
		}

		return e.complexity.FieldDescriptorSelector.ObjectType(childComplexity), true

	case "FieldValidation.maxInteger":
		if e.complexity.FieldValidation.MaxInteger == nil {
			break
		}

		return e.complexity.FieldValidation.MaxInteger(childComplexity), true

	case "FieldValidation.maxLength":
		if e.complexity.FieldValidation.MaxLength == nil {
			break
		}

		return e.complexity.FieldValidation.MaxLength(childComplexity), true

	case "FieldValidation.maxNumber":
		if e.complexity.FieldValidation.MaxNumber == nil {
			break
		}

		return e.complexity.FieldValidation.MaxNumber(childComplexity), true

	case "FieldValidation.minInteger":
		if e.complexity.FieldValidation.MinInteger == nil {
			break
		}

		return e.complexity.FieldValidation.MinInteger(childComplexity), true

	case "FieldValidation.minLength":
		if e.complexity.FieldValidation.MinLength == nil {
			break
		}

		return e.complexity.FieldValidation.MinLength(childComplexity), true

	case "FieldValidation.minNumber":
		if e.complexity.FieldValidation.MinNumber == nil {
			break
		}

		return e.complexity.FieldValidation.MinNumber(childComplexity), true

	case "FieldValidation.options":
		if e.complexity.FieldValidation.Options == nil {
			break
		}

		return e.complexity.FieldValidation.Options(childComplexity), true

	case "FieldValidation.optionsSource":
		if e.complexity.FieldValidation.OptionsSource == nil {
			break
		}

		return e.complexity.FieldValidation.OptionsSource(childComplexity), true

	case "FieldValidation.re":
		if e.complexity.FieldValidation.Re == nil {
			break
		}

		return e.complexity.FieldValidation.Re(childComplexity), true

	case "FieldValue.binaryValue":
		if e.complexity.FieldValue.BinaryValue == nil {
			break
		}

		return e.complexity.FieldValue.BinaryValue(childComplexity), true

	case "FieldValue.boolValue":
		if e.complexity.FieldValue.BoolValue == nil {
			break
		}

		return e.complexity.FieldValue.BoolValue(childComplexity), true

	case "FieldValue.dateValue":
		if e.complexity.FieldValue.DateValue == nil {
			break
		}

		return e.complexity.FieldValue.DateValue(childComplexity), true

	case "FieldValue.doubleValue":
		if e.complexity.FieldValue.DoubleValue == nil {
			break
		}

		return e.complexity.FieldValue.DoubleValue(childComplexity), true

	case "FieldValue.durationValue":
		if e.complexity.FieldValue.DurationValue == nil {
			break
		}

		return e.complexity.FieldValue.DurationValue(childComplexity), true

	case "FieldValue.integerValue":
		if e.complexity.FieldValue.IntegerValue == nil {
			break
		}

		return e.complexity.FieldValue.IntegerValue(childComplexity), true

	case "FieldValue.stringValue":
		if e.complexity.FieldValue.StringValue == nil {
			break
		}

		return e.complexity.FieldValue.StringValue(childComplexity), true

	case "FieldValues.attributes":
		if e.complexity.FieldValues.Attributes == nil {
			break
		}

		return e.complexity.FieldValues.Attributes(childComplexity), true

	case "GetCryptoSecretRequest.cryptoId":
		if e.complexity.GetCryptoSecretRequest.CryptoID == nil {
			break
		}

		return e.complexity.GetCryptoSecretRequest.CryptoID(childComplexity), true

	case "GetCryptoSecretRequest.driverType":
		if e.complexity.GetCryptoSecretRequest.DriverType == nil {
			break
		}

		return e.complexity.GetCryptoSecretRequest.DriverType(childComplexity), true

	case "GetCryptoSecretRequest.objectType":
		if e.complexity.GetCryptoSecretRequest.ObjectType == nil {
			break
		}

		return e.complexity.GetCryptoSecretRequest.ObjectType(childComplexity), true

	case "GetDeviceBulksRequest.deviceId":
		if e.complexity.GetDeviceBulksRequest.DeviceID == nil {
			break
		}

		return e.complexity.GetDeviceBulksRequest.DeviceID(childComplexity), true

	case "GetDeviceBulksRequest.from":
		if e.complexity.GetDeviceBulksRequest.From == nil {
			break
		}

		return e.complexity.GetDeviceBulksRequest.From(childComplexity), true

	case "GetDeviceBulksRequest.to":
		if e.complexity.GetDeviceBulksRequest.To == nil {
			break
		}

		return e.complexity.GetDeviceBulksRequest.To(childComplexity), true

	case "GetDeviceDataRequest.filterExcludeStatus":
		if e.complexity.GetDeviceDataRequest.FilterExcludeStatus == nil {
			break
		}

		return e.complexity.GetDeviceDataRequest.FilterExcludeStatus(childComplexity), true

	case "GetDeviceDataRequest.filterIncludeStatus":
		if e.complexity.GetDeviceDataRequest.FilterIncludeStatus == nil {
			break
		}

		return e.complexity.GetDeviceDataRequest.FilterIncludeStatus(childComplexity), true

	case "GetDeviceDataRequest.from":
		if e.complexity.GetDeviceDataRequest.From == nil {
			break
		}

		return e.complexity.GetDeviceDataRequest.From(childComplexity), true

	case "GetDeviceDataRequest.series":
		if e.complexity.GetDeviceDataRequest.Series == nil {
			break
		}

		return e.complexity.GetDeviceDataRequest.Series(childComplexity), true

	case "GetDeviceDataRequest.snapshot":
		if e.complexity.GetDeviceDataRequest.Snapshot == nil {
			break
		}

		return e.complexity.GetDeviceDataRequest.Snapshot(childComplexity), true

	case "GetDeviceDataRequest.to":
		if e.complexity.GetDeviceDataRequest.To == nil {
			break
		}

		return e.complexity.GetDeviceDataRequest.To(childComplexity), true

	case "GetDeviceDataSeriesSelector.deviceId":
		if e.complexity.GetDeviceDataSeriesSelector.DeviceID == nil {
			break
		}

		return e.complexity.GetDeviceDataSeriesSelector.DeviceID(childComplexity), true

	case "GetDeviceDataSeriesSelector.variableId":
		if e.complexity.GetDeviceDataSeriesSelector.VariableID == nil {
			break
		}

		return e.complexity.GetDeviceDataSeriesSelector.VariableID(childComplexity), true

	case "GetDeviceEventsRequest.deviceId":
		if e.complexity.GetDeviceEventsRequest.DeviceID == nil {
			break
		}

		return e.complexity.GetDeviceEventsRequest.DeviceID(childComplexity), true

	case "GetDeviceEventsRequest.from":
		if e.complexity.GetDeviceEventsRequest.From == nil {
			break
		}

		return e.complexity.GetDeviceEventsRequest.From(childComplexity), true

	case "GetDeviceEventsRequest.to":
		if e.complexity.GetDeviceEventsRequest.To == nil {
			break
		}

		return e.complexity.GetDeviceEventsRequest.To(childComplexity), true

	case "IrregularProfileValues.unit":
		if e.complexity.IrregularProfileValues.Unit == nil {
			break
		}

		return e.complexity.IrregularProfileValues.Unit(childComplexity), true

	case "IrregularProfileValues.values":
		if e.complexity.IrregularProfileValues.Values == nil {
			break
		}

		return e.complexity.IrregularProfileValues.Values(childComplexity), true

	case "IrregularValue.timestamp":
		if e.complexity.IrregularValue.Timestamp == nil {
			break
		}

		return e.complexity.IrregularValue.Timestamp(childComplexity), true

	case "IrregularValue.value":
		if e.complexity.IrregularValue.Value == nil {
			break
		}

		return e.complexity.IrregularValue.Value(childComplexity), true

	case "JobAction.actionId":
		if e.complexity.JobAction.ActionID == nil {
			break
		}

		return e.complexity.JobAction.ActionID(childComplexity), true

	case "JobAction.attributes":
		if e.complexity.JobAction.Attributes == nil {
			break
		}

		return e.complexity.JobAction.Attributes(childComplexity), true

	case "JobAction.fwUpdate":
		if e.complexity.JobAction.FwUpdate == nil {
			break
		}

		return e.complexity.JobAction.FwUpdate(childComplexity), true

	case "JobAction.getDeviceInfo":
		if e.complexity.JobAction.GetDeviceInfo == nil {
			break
		}

		return e.complexity.JobAction.GetDeviceInfo(childComplexity), true

	case "JobAction.getEvents":
		if e.complexity.JobAction.GetEvents == nil {
			break
		}

		return e.complexity.JobAction.GetEvents(childComplexity), true

	case "JobAction.getIrregularProfile":
		if e.complexity.JobAction.GetIrregularProfile == nil {
			break
		}

		return e.complexity.JobAction.GetIrregularProfile(childComplexity), true

	case "JobAction.getPeriodicalProfile":
		if e.complexity.JobAction.GetPeriodicalProfile == nil {
			break
		}

		return e.complexity.JobAction.GetPeriodicalProfile(childComplexity), true

	case "JobAction.getRegister":
		if e.complexity.JobAction.GetRegister == nil {
			break
		}

		return e.complexity.JobAction.GetRegister(childComplexity), true

	case "JobAction.getTou":
		if e.complexity.JobAction.GetTou == nil {
			break
		}

		return e.complexity.JobAction.GetTou(childComplexity), true

	case "JobAction.resetBillingPeriod":
		if e.complexity.JobAction.ResetBillingPeriod == nil {
			break
		}

		return e.complexity.JobAction.ResetBillingPeriod(childComplexity), true

	case "JobAction.setDisconnectorState":
		if e.complexity.JobAction.SetDisconnectorState == nil {
			break
		}

		return e.complexity.JobAction.SetDisconnectorState(childComplexity), true

	case "JobAction.setLimiter":
		if e.complexity.JobAction.SetLimiter == nil {
			break
		}

		return e.complexity.JobAction.SetLimiter(childComplexity), true

	case "JobAction.setRelayState":
		if e.complexity.JobAction.SetRelayState == nil {
			break
		}

		return e.complexity.JobAction.SetRelayState(childComplexity), true

	case "JobAction.setTou":
		if e.complexity.JobAction.SetTou == nil {
			break
		}

		return e.complexity.JobAction.SetTou(childComplexity), true

	case "JobAction.syncClock":
		if e.complexity.JobAction.SyncClock == nil {
			break
		}

		return e.complexity.JobAction.SyncClock(childComplexity), true

	case "JobActionAttributes.attributes":
		if e.complexity.JobActionAttributes.Attributes == nil {
			break
		}

		return e.complexity.JobActionAttributes.Attributes(childComplexity), true

	case "JobActionAttributes.type":
		if e.complexity.JobActionAttributes.Type == nil {
			break
		}

		return e.complexity.JobActionAttributes.Type(childComplexity), true

	case "JobActionContraints.getRegisterTypeAttributes":
		if e.complexity.JobActionContraints.GetRegisterTypeAttributes == nil {
			break
		}

		return e.complexity.JobActionContraints.GetRegisterTypeAttributes(childComplexity), true

	case "JobActionContraints.getRegisterTypeName":
		if e.complexity.JobActionContraints.GetRegisterTypeName == nil {
			break
		}

		return e.complexity.JobActionContraints.GetRegisterTypeName(childComplexity), true

	case "JobActionSet.fwUpdate":
		if e.complexity.JobActionSet.FwUpdate == nil {
			break
		}

		return e.complexity.JobActionSet.FwUpdate(childComplexity), true

	case "JobActionSet.getDeviceInfo":
		if e.complexity.JobActionSet.GetDeviceInfo == nil {
			break
		}

		return e.complexity.JobActionSet.GetDeviceInfo(childComplexity), true

	case "JobActionSet.getEvents":
		if e.complexity.JobActionSet.GetEvents == nil {
			break
		}

		return e.complexity.JobActionSet.GetEvents(childComplexity), true

	case "JobActionSet.getIrregularProfile":
		if e.complexity.JobActionSet.GetIrregularProfile == nil {
			break
		}

		return e.complexity.JobActionSet.GetIrregularProfile(childComplexity), true

	case "JobActionSet.getPeriodicalProfile":
		if e.complexity.JobActionSet.GetPeriodicalProfile == nil {
			break
		}

		return e.complexity.JobActionSet.GetPeriodicalProfile(childComplexity), true

	case "JobActionSet.getRegister":
		if e.complexity.JobActionSet.GetRegister == nil {
			break
		}

		return e.complexity.JobActionSet.GetRegister(childComplexity), true

	case "JobActionSet.getTou":
		if e.complexity.JobActionSet.GetTou == nil {
			break
		}

		return e.complexity.JobActionSet.GetTou(childComplexity), true

	case "JobActionSet.resetBillingPeriod":
		if e.complexity.JobActionSet.ResetBillingPeriod == nil {
			break
		}

		return e.complexity.JobActionSet.ResetBillingPeriod(childComplexity), true

	case "JobActionSet.setDisconnectorState":
		if e.complexity.JobActionSet.SetDisconnectorState == nil {
			break
		}

		return e.complexity.JobActionSet.SetDisconnectorState(childComplexity), true

	case "JobActionSet.setLimiter":
		if e.complexity.JobActionSet.SetLimiter == nil {
			break
		}

		return e.complexity.JobActionSet.SetLimiter(childComplexity), true

	case "JobActionSet.setRelayState":
		if e.complexity.JobActionSet.SetRelayState == nil {
			break
		}

		return e.complexity.JobActionSet.SetRelayState(childComplexity), true

	case "JobActionSet.setTou":
		if e.complexity.JobActionSet.SetTou == nil {
			break
		}

		return e.complexity.JobActionSet.SetTou(childComplexity), true

	case "JobActionSet.syncClock":
		if e.complexity.JobActionSet.SyncClock == nil {
			break
		}

		return e.complexity.JobActionSet.SyncClock(childComplexity), true

	case "JobActionSet.variables":
		if e.complexity.JobActionSet.Variables == nil {
			break
		}

		return e.complexity.JobActionSet.Variables(childComplexity), true

	case "JobDevice.appProtocol":
		if e.complexity.JobDevice.AppProtocol == nil {
			break
		}

		return e.complexity.JobDevice.AppProtocol(childComplexity), true

	case "JobDevice.connectionInfo":
		if e.complexity.JobDevice.ConnectionInfo == nil {
			break
		}

		return e.complexity.JobDevice.ConnectionInfo(childComplexity), true

	case "JobDevice.deviceAttributes":
		if e.complexity.JobDevice.DeviceAttributes == nil {
			break
		}

		return e.complexity.JobDevice.DeviceAttributes(childComplexity), true

	case "JobDevice.deviceId":
		if e.complexity.JobDevice.DeviceID == nil {
			break
		}

		return e.complexity.JobDevice.DeviceID(childComplexity), true

	case "JobDevice.externalId":
		if e.complexity.JobDevice.ExternalID == nil {
			break
		}

		return e.complexity.JobDevice.ExternalID(childComplexity), true

	case "JobDevice.jobId":
		if e.complexity.JobDevice.JobID == nil {
			break
		}

		return e.complexity.JobDevice.JobID(childComplexity), true

	case "JobDevice.timezone":
		if e.complexity.JobDevice.Timezone == nil {
			break
		}

		return e.complexity.JobDevice.Timezone(childComplexity), true

	case "JobDeviceId.deviceId":
		if e.complexity.JobDeviceId.DeviceID == nil {
			break
		}

		return e.complexity.JobDeviceId.DeviceID(childComplexity), true

	case "JobDeviceId.jobId":
		if e.complexity.JobDeviceId.JobID == nil {
			break
		}

		return e.complexity.JobDeviceId.JobID(childComplexity), true

	case "JobSettings.attempts":
		if e.complexity.JobSettings.Attempts == nil {
			break
		}

		return e.complexity.JobSettings.Attempts(childComplexity), true

	case "JobSettings.deferStart":
		if e.complexity.JobSettings.DeferStart == nil {
			break
		}

		return e.complexity.JobSettings.DeferStart(childComplexity), true

	case "JobSettings.expiresAt":
		if e.complexity.JobSettings.ExpiresAt == nil {
			break
		}

		return e.complexity.JobSettings.ExpiresAt(childComplexity), true

	case "JobSettings.maxDuration":
		if e.complexity.JobSettings.MaxDuration == nil {
			break
		}

		return e.complexity.JobSettings.MaxDuration(childComplexity), true

	case "JobSettings.priority":
		if e.complexity.JobSettings.Priority == nil {
			break
		}

		return e.complexity.JobSettings.Priority(childComplexity), true

	case "JobSettings.retryDelay":
		if e.complexity.JobSettings.RetryDelay == nil {
			break
		}

		return e.complexity.JobSettings.RetryDelay(childComplexity), true

	case "JobStatus.attemptsDone":
		if e.complexity.JobStatus.AttemptsDone == nil {
			break
		}

		return e.complexity.JobStatus.AttemptsDone(childComplexity), true

	case "JobStatus.code":
		if e.complexity.JobStatus.Code == nil {
			break
		}

		return e.complexity.JobStatus.Code(childComplexity), true

	case "JobStatus.deviceInfo":
		if e.complexity.JobStatus.DeviceInfo == nil {
			break
		}

		return e.complexity.JobStatus.DeviceInfo(childComplexity), true

	case "JobStatus.finishedAt":
		if e.complexity.JobStatus.FinishedAt == nil {
			break
		}

		return e.complexity.JobStatus.FinishedAt(childComplexity), true

	case "JobStatus.queueId":
		if e.complexity.JobStatus.QueueID == nil {
			break
		}

		return e.complexity.JobStatus.QueueID(childComplexity), true

	case "JobStatus.results":
		if e.complexity.JobStatus.Results == nil {
			break
		}

		return e.complexity.JobStatus.Results(childComplexity), true

	case "JobStatus.startedAt":
		if e.complexity.JobStatus.StartedAt == nil {
			break
		}

		return e.complexity.JobStatus.StartedAt(childComplexity), true

	case "JobStatus.status":
		if e.complexity.JobStatus.Status == nil {
			break
		}

		return e.complexity.JobStatus.Status(childComplexity), true

	case "ListBulkJobsRequest.bulkId":
		if e.complexity.ListBulkJobsRequest.BulkID == nil {
			break
		}

		return e.complexity.ListBulkJobsRequest.BulkID(childComplexity), true

	case "ListBulkJobsRequest.selector":
		if e.complexity.ListBulkJobsRequest.Selector == nil {
			break
		}

		return e.complexity.ListBulkJobsRequest.Selector(childComplexity), true

	case "ListDeviceGroupDevicesRequest.groupId":
		if e.complexity.ListDeviceGroupDevicesRequest.GroupID == nil {
			break
		}

		return e.complexity.ListDeviceGroupDevicesRequest.GroupID(childComplexity), true

	case "ListDeviceGroupDevicesRequest.selector":
		if e.complexity.ListDeviceGroupDevicesRequest.Selector == nil {
			break
		}

		return e.complexity.ListDeviceGroupDevicesRequest.Selector(childComplexity), true

	case "ListFieldDescriptorOptionsRequest.filterContains":
		if e.complexity.ListFieldDescriptorOptionsRequest.FilterContains == nil {
			break
		}

		return e.complexity.ListFieldDescriptorOptionsRequest.FilterContains(childComplexity), true

	case "ListFieldDescriptorOptionsRequest.optionsSource":
		if e.complexity.ListFieldDescriptorOptionsRequest.OptionsSource == nil {
			break
		}

		return e.complexity.ListFieldDescriptorOptionsRequest.OptionsSource(childComplexity), true

	case "ListOfBulk.items":
		if e.complexity.ListOfBulk.Items == nil {
			break
		}

		return e.complexity.ListOfBulk.Items(childComplexity), true

	case "ListOfBulk.totalCount":
		if e.complexity.ListOfBulk.TotalCount == nil {
			break
		}

		return e.complexity.ListOfBulk.TotalCount(childComplexity), true

	case "ListOfBulkJob.items":
		if e.complexity.ListOfBulkJob.Items == nil {
			break
		}

		return e.complexity.ListOfBulkJob.Items(childComplexity), true

	case "ListOfBulkJob.totalCount":
		if e.complexity.ListOfBulkJob.TotalCount == nil {
			break
		}

		return e.complexity.ListOfBulkJob.TotalCount(childComplexity), true

	case "ListOfCommunicationBus.items":
		if e.complexity.ListOfCommunicationBus.Items == nil {
			break
		}

		return e.complexity.ListOfCommunicationBus.Items(childComplexity), true

	case "ListOfCommunicationBus.totalCount":
		if e.complexity.ListOfCommunicationBus.TotalCount == nil {
			break
		}

		return e.complexity.ListOfCommunicationBus.TotalCount(childComplexity), true

	case "ListOfCommunicationUnit.items":
		if e.complexity.ListOfCommunicationUnit.Items == nil {
			break
		}

		return e.complexity.ListOfCommunicationUnit.Items(childComplexity), true

	case "ListOfCommunicationUnit.totalCount":
		if e.complexity.ListOfCommunicationUnit.TotalCount == nil {
			break
		}

		return e.complexity.ListOfCommunicationUnit.TotalCount(childComplexity), true

	case "ListOfCronJob.items":
		if e.complexity.ListOfCronJob.Items == nil {
			break
		}

		return e.complexity.ListOfCronJob.Items(childComplexity), true

	case "ListOfCronJob.totalCount":
		if e.complexity.ListOfCronJob.TotalCount == nil {
			break
		}

		return e.complexity.ListOfCronJob.TotalCount(childComplexity), true

	case "ListOfDevice.items":
		if e.complexity.ListOfDevice.Items == nil {
			break
		}

		return e.complexity.ListOfDevice.Items(childComplexity), true

	case "ListOfDevice.totalCount":
		if e.complexity.ListOfDevice.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDevice.TotalCount(childComplexity), true

	case "ListOfDeviceCommunicationUnit.items":
		if e.complexity.ListOfDeviceCommunicationUnit.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceCommunicationUnit.Items(childComplexity), true

	case "ListOfDeviceCommunicationUnit.totalCount":
		if e.complexity.ListOfDeviceCommunicationUnit.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDeviceCommunicationUnit.TotalCount(childComplexity), true

	case "ListOfDeviceCommunicationUnitChange.items":
		if e.complexity.ListOfDeviceCommunicationUnitChange.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceCommunicationUnitChange.Items(childComplexity), true

	case "ListOfDeviceCommunicationUnitChange.totalCount":
		if e.complexity.ListOfDeviceCommunicationUnitChange.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDeviceCommunicationUnitChange.TotalCount(childComplexity), true

	case "ListOfDeviceConfigurationRegister.items":
		if e.complexity.ListOfDeviceConfigurationRegister.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceConfigurationRegister.Items(childComplexity), true

	case "ListOfDeviceConfigurationRegister.totalCount":
		if e.complexity.ListOfDeviceConfigurationRegister.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDeviceConfigurationRegister.TotalCount(childComplexity), true

	case "ListOfDeviceConfigurationTemplate.items":
		if e.complexity.ListOfDeviceConfigurationTemplate.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceConfigurationTemplate.Items(childComplexity), true

	case "ListOfDeviceConfigurationTemplate.totalCount":
		if e.complexity.ListOfDeviceConfigurationTemplate.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDeviceConfigurationTemplate.TotalCount(childComplexity), true

	case "ListOfDeviceDataInfo.items":
		if e.complexity.ListOfDeviceDataInfo.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceDataInfo.Items(childComplexity), true

	case "ListOfDeviceDataInfo.totalCount":
		if e.complexity.ListOfDeviceDataInfo.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDeviceDataInfo.TotalCount(childComplexity), true

	case "ListOfDeviceGroup.items":
		if e.complexity.ListOfDeviceGroup.Items == nil {
			break
		}

		return e.complexity.ListOfDeviceGroup.Items(childComplexity), true

	case "ListOfDeviceGroup.totalCount":
		if e.complexity.ListOfDeviceGroup.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDeviceGroup.TotalCount(childComplexity), true

	case "ListOfDriver.items":
		if e.complexity.ListOfDriver.Items == nil {
			break
		}

		return e.complexity.ListOfDriver.Items(childComplexity), true

	case "ListOfDriver.totalCount":
		if e.complexity.ListOfDriver.TotalCount == nil {
			break
		}

		return e.complexity.ListOfDriver.TotalCount(childComplexity), true

	case "ListOfFieldDescriptor.items":
		if e.complexity.ListOfFieldDescriptor.Items == nil {
			break
		}

		return e.complexity.ListOfFieldDescriptor.Items(childComplexity), true

	case "ListOfFieldDescriptor.totalCount":
		if e.complexity.ListOfFieldDescriptor.TotalCount == nil {
			break
		}

		return e.complexity.ListOfFieldDescriptor.TotalCount(childComplexity), true

	case "ListOfId.id":
		if e.complexity.ListOfId.ID == nil {
			break
		}

		return e.complexity.ListOfId.ID(childComplexity), true

	case "ListOfJobDevice.list":
		if e.complexity.ListOfJobDevice.List == nil {
			break
		}

		return e.complexity.ListOfJobDevice.List(childComplexity), true

	case "ListOfJobDevice.totalCount":
		if e.complexity.ListOfJobDevice.TotalCount == nil {
			break
		}

		return e.complexity.ListOfJobDevice.TotalCount(childComplexity), true

	case "ListOfJobDeviceId.list":
		if e.complexity.ListOfJobDeviceId.List == nil {
			break
		}

		return e.complexity.ListOfJobDeviceId.List(childComplexity), true

	case "ListOfJobDeviceId.totalCount":
		if e.complexity.ListOfJobDeviceId.TotalCount == nil {
			break
		}

		return e.complexity.ListOfJobDeviceId.TotalCount(childComplexity), true

	case "ListOfModemPool.items":
		if e.complexity.ListOfModemPool.Items == nil {
			break
		}

		return e.complexity.ListOfModemPool.Items(childComplexity), true

	case "ListOfModemPool.totalCount":
		if e.complexity.ListOfModemPool.TotalCount == nil {
			break
		}

		return e.complexity.ListOfModemPool.TotalCount(childComplexity), true

	case "ListOfString.items":
		if e.complexity.ListOfString.Items == nil {
			break
		}

		return e.complexity.ListOfString.Items(childComplexity), true

	case "ListOfTimeOfUseTable.items":
		if e.complexity.ListOfTimeOfUseTable.Items == nil {
			break
		}

		return e.complexity.ListOfTimeOfUseTable.Items(childComplexity), true

	case "ListOfTimeOfUseTable.totalCount":
		if e.complexity.ListOfTimeOfUseTable.TotalCount == nil {
			break
		}

		return e.complexity.ListOfTimeOfUseTable.TotalCount(childComplexity), true

	case "ListOfVariable.items":
		if e.complexity.ListOfVariable.Items == nil {
			break
		}

		return e.complexity.ListOfVariable.Items(childComplexity), true

	case "ListOfVariable.totalCount":
		if e.complexity.ListOfVariable.TotalCount == nil {
			break
		}

		return e.complexity.ListOfVariable.TotalCount(childComplexity), true

	case "ListSelector.fields":
		if e.complexity.ListSelector.Fields == nil {
			break
		}

		return e.complexity.ListSelector.Fields(childComplexity), true

	case "ListSelector.filterBy":
		if e.complexity.ListSelector.FilterBy == nil {
			break
		}

		return e.complexity.ListSelector.FilterBy(childComplexity), true

	case "ListSelector.offset":
		if e.complexity.ListSelector.Offset == nil {
			break
		}

		return e.complexity.ListSelector.Offset(childComplexity), true

	case "ListSelector.pageSize":
		if e.complexity.ListSelector.PageSize == nil {
			break
		}

		return e.complexity.ListSelector.PageSize(childComplexity), true

	case "ListSelector.sortBy":
		if e.complexity.ListSelector.SortBy == nil {
			break
		}

		return e.complexity.ListSelector.SortBy(childComplexity), true

	case "ListSelectorFilterBy.boolean":
		if e.complexity.ListSelectorFilterBy.Boolean == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Boolean(childComplexity), true

	case "ListSelectorFilterBy.dataType":
		if e.complexity.ListSelectorFilterBy.DataType == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.DataType(childComplexity), true

	case "ListSelectorFilterBy.date":
		if e.complexity.ListSelectorFilterBy.Date == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Date(childComplexity), true

	case "ListSelectorFilterBy.integer":
		if e.complexity.ListSelectorFilterBy.Integer == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Integer(childComplexity), true

	case "ListSelectorFilterBy.number":
		if e.complexity.ListSelectorFilterBy.Number == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Number(childComplexity), true

	case "ListSelectorFilterBy.operator":
		if e.complexity.ListSelectorFilterBy.Operator == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Operator(childComplexity), true

	case "ListSelectorFilterBy.path":
		if e.complexity.ListSelectorFilterBy.Path == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Path(childComplexity), true

	case "ListSelectorFilterBy.text":
		if e.complexity.ListSelectorFilterBy.Text == nil {
			break
		}

		return e.complexity.ListSelectorFilterBy.Text(childComplexity), true

	case "ListSelectorSortBy.desc":
		if e.complexity.ListSelectorSortBy.Desc == nil {
			break
		}

		return e.complexity.ListSelectorSortBy.Desc(childComplexity), true

	case "ListSelectorSortBy.path":
		if e.complexity.ListSelectorSortBy.Path == nil {
			break
		}

		return e.complexity.ListSelectorSortBy.Path(childComplexity), true

	case "ListValue.values":
		if e.complexity.ListValue.Values == nil {
			break
		}

		return e.complexity.ListValue.Values(childComplexity), true

	case "MeasuredValue.boolValue":
		if e.complexity.MeasuredValue.BoolValue == nil {
			break
		}

		return e.complexity.MeasuredValue.BoolValue(childComplexity), true

	case "MeasuredValue.doubleValue":
		if e.complexity.MeasuredValue.DoubleValue == nil {
			break
		}

		return e.complexity.MeasuredValue.DoubleValue(childComplexity), true

	case "MeasuredValue.exponent":
		if e.complexity.MeasuredValue.Exponent == nil {
			break
		}

		return e.complexity.MeasuredValue.Exponent(childComplexity), true

	case "MeasuredValue.integerValue":
		if e.complexity.MeasuredValue.IntegerValue == nil {
			break
		}

		return e.complexity.MeasuredValue.IntegerValue(childComplexity), true

	case "MeasuredValue.nstatus":
		if e.complexity.MeasuredValue.Nstatus == nil {
			break
		}

		return e.complexity.MeasuredValue.Nstatus(childComplexity), true

	case "MeasuredValue.peakTs":
		if e.complexity.MeasuredValue.PeakTs == nil {
			break
		}

		return e.complexity.MeasuredValue.PeakTs(childComplexity), true

	case "MeasuredValue.status":
		if e.complexity.MeasuredValue.Status == nil {
			break
		}

		return e.complexity.MeasuredValue.Status(childComplexity), true

	case "MeasuredValue.stringValue":
		if e.complexity.MeasuredValue.StringValue == nil {
			break
		}

		return e.complexity.MeasuredValue.StringValue(childComplexity), true

	case "MeasuredValue.timestampTzValue":
		if e.complexity.MeasuredValue.TimestampTzValue == nil {
			break
		}

		return e.complexity.MeasuredValue.TimestampTzValue(childComplexity), true

	case "MeasuredValue.timestampValue":
		if e.complexity.MeasuredValue.TimestampValue == nil {
			break
		}

		return e.complexity.MeasuredValue.TimestampValue(childComplexity), true

	case "MetadataFields.fields":
		if e.complexity.MetadataFields.Fields == nil {
			break
		}

		return e.complexity.MetadataFields.Fields(childComplexity), true

	case "MetadataFields.generation":
		if e.complexity.MetadataFields.Generation == nil {
			break
		}

		return e.complexity.MetadataFields.Generation(childComplexity), true

	case "MetadataFields.id":
		if e.complexity.MetadataFields.ID == nil {
			break
		}

		return e.complexity.MetadataFields.ID(childComplexity), true

	case "MetadataFields.managedFields":
		if e.complexity.MetadataFields.ManagedFields == nil {
			break
		}

		return e.complexity.MetadataFields.ManagedFields(childComplexity), true

	case "MetadataFields.name":
		if e.complexity.MetadataFields.Name == nil {
			break
		}

		return e.complexity.MetadataFields.Name(childComplexity), true

	case "ModemInfo.atDial":
		if e.complexity.ModemInfo.AtDial == nil {
			break
		}

		return e.complexity.ModemInfo.AtDial(childComplexity), true

	case "ModemInfo.atEscape":
		if e.complexity.ModemInfo.AtEscape == nil {
			break
		}

		return e.complexity.ModemInfo.AtEscape(childComplexity), true

	case "ModemInfo.atHangup":
		if e.complexity.ModemInfo.AtHangup == nil {
			break
		}

		return e.complexity.ModemInfo.AtHangup(childComplexity), true

	case "ModemInfo.atInit":
		if e.complexity.ModemInfo.AtInit == nil {
			break
		}

		return e.complexity.ModemInfo.AtInit(childComplexity), true

	case "ModemInfo.commandTimeout":
		if e.complexity.ModemInfo.CommandTimeout == nil {
			break
		}

		return e.complexity.ModemInfo.CommandTimeout(childComplexity), true

	case "ModemInfo.connectTimeout":
		if e.complexity.ModemInfo.ConnectTimeout == nil {
			break
		}

		return e.complexity.ModemInfo.ConnectTimeout(childComplexity), true

	case "ModemInfo.modemId":
		if e.complexity.ModemInfo.ModemID == nil {
			break
		}

		return e.complexity.ModemInfo.ModemID(childComplexity), true

	case "ModemInfo.name":
		if e.complexity.ModemInfo.Name == nil {
			break
		}

		return e.complexity.ModemInfo.Name(childComplexity), true

	case "ModemInfo.serialBaudRate":
		if e.complexity.ModemInfo.SerialBaudRate == nil {
			break
		}

		return e.complexity.ModemInfo.SerialBaudRate(childComplexity), true

	case "ModemInfo.serialOverIp":
		if e.complexity.ModemInfo.SerialOverIP == nil {
			break
		}

		return e.complexity.ModemInfo.SerialOverIP(childComplexity), true

	case "ModemInfo.tcpip":
		if e.complexity.ModemInfo.Tcpip == nil {
			break
		}

		return e.complexity.ModemInfo.Tcpip(childComplexity), true

	case "ModemPool.metadata":
		if e.complexity.ModemPool.Metadata == nil {
			break
		}

		return e.complexity.ModemPool.Metadata(childComplexity), true

	case "ModemPool.spec":
		if e.complexity.ModemPool.Spec == nil {
			break
		}

		return e.complexity.ModemPool.Spec(childComplexity), true

	case "ModemPool.status":
		if e.complexity.ModemPool.Status == nil {
			break
		}

		return e.complexity.ModemPool.Status(childComplexity), true

	case "ModemPoolSpec._empty":
		if e.complexity.ModemPoolSpec.Empty == nil {
			break
		}

		return e.complexity.ModemPoolSpec.Empty(childComplexity), true

	case "ModemPoolStatus.modems":
		if e.complexity.ModemPoolStatus.Modems == nil {
			break
		}

		return e.complexity.ModemPoolStatus.Modems(childComplexity), true

	case "NetworkMap.edges":
		if e.complexity.NetworkMap.Edges == nil {
			break
		}

		return e.complexity.NetworkMap.Edges(childComplexity), true

	case "NetworkMap.nodes":
		if e.complexity.NetworkMap.Nodes == nil {
			break
		}

		return e.complexity.NetworkMap.Nodes(childComplexity), true

	case "OpenIdConfiguration.content":
		if e.complexity.OpenIdConfiguration.Content == nil {
			break
		}

		return e.complexity.OpenIdConfiguration.Content(childComplexity), true

	case "ProfileBlock.startTimestamp":
		if e.complexity.ProfileBlock.StartTimestamp == nil {
			break
		}

		return e.complexity.ProfileBlock.StartTimestamp(childComplexity), true

	case "ProfileBlock.values":
		if e.complexity.ProfileBlock.Values == nil {
			break
		}

		return e.complexity.ProfileBlock.Values(childComplexity), true

	case "ProfileValues.blocks":
		if e.complexity.ProfileValues.Blocks == nil {
			break
		}

		return e.complexity.ProfileValues.Blocks(childComplexity), true

	case "ProfileValues.period":
		if e.complexity.ProfileValues.Period == nil {
			break
		}

		return e.complexity.ProfileValues.Period(childComplexity), true

	case "ProfileValues.unit":
		if e.complexity.ProfileValues.Unit == nil {
			break
		}

		return e.complexity.ProfileValues.Unit(childComplexity), true

	case "ProxyBulk.metadata":
		if e.complexity.ProxyBulk.Metadata == nil {
			break
		}

		return e.complexity.ProxyBulk.Metadata(childComplexity), true

	case "ProxyBulk.spec":
		if e.complexity.ProxyBulk.Spec == nil {
			break
		}

		return e.complexity.ProxyBulk.Spec(childComplexity), true

	case "ProxyBulk.status":
		if e.complexity.ProxyBulk.Status == nil {
			break
		}

		return e.complexity.ProxyBulk.Status(childComplexity), true

	case "ProxyBulkSpec.actions":
		if e.complexity.ProxyBulkSpec.Actions == nil {
			break
		}

		return e.complexity.ProxyBulkSpec.Actions(childComplexity), true

	case "ProxyBulkSpec.correlationId":
		if e.complexity.ProxyBulkSpec.CorrelationID == nil {
			break
		}

		return e.complexity.ProxyBulkSpec.CorrelationID(childComplexity), true

	case "ProxyBulkSpec.devices":
		if e.complexity.ProxyBulkSpec.Devices == nil {
			break
		}

		return e.complexity.ProxyBulkSpec.Devices(childComplexity), true

	case "ProxyBulkSpec.driverType":
		if e.complexity.ProxyBulkSpec.DriverType == nil {
			break
		}

		return e.complexity.ProxyBulkSpec.DriverType(childComplexity), true

	case "ProxyBulkSpec.settings":
		if e.complexity.ProxyBulkSpec.Settings == nil {
			break
		}

		return e.complexity.ProxyBulkSpec.Settings(childComplexity), true

	case "ProxyBulkSpec.webhookUrl":
		if e.complexity.ProxyBulkSpec.WebhookURL == nil {
			break
		}

		return e.complexity.ProxyBulkSpec.WebhookURL(childComplexity), true

	case "Query.addCommunicationUnitsToCommunicationBus":
		if e.complexity.Query.AddCommunicationUnitsToCommunicationBus == nil {
			break
		}

		return e.complexity.Query.AddCommunicationUnitsToCommunicationBus(childComplexity), true

	case "Query.addDeviceConfigurationRegisterToDeviceConfigurationTemplate":
		if e.complexity.Query.AddDeviceConfigurationRegisterToDeviceConfigurationTemplate == nil {
			break
		}

		return e.complexity.Query.AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(childComplexity), true

	case "Query.addDevicesToGroup":
		if e.complexity.Query.AddDevicesToGroup == nil {
			break
		}

		return e.complexity.Query.AddDevicesToGroup(childComplexity), true

	case "Query.addRegisterToVariable":
		if e.complexity.Query.AddRegisterToVariable == nil {
			break
		}

		return e.complexity.Query.AddRegisterToVariable(childComplexity), true

	case "Query.cancelBulk":
		if e.complexity.Query.CancelBulk == nil {
			break
		}

		return e.complexity.Query.CancelBulk(childComplexity), true

	case "Query.cancelBulkJobs":
		if e.complexity.Query.CancelBulkJobs == nil {
			break
		}

		return e.complexity.Query.CancelBulkJobs(childComplexity), true

	case "Query.createBulk":
		if e.complexity.Query.CreateBulk == nil {
			break
		}

		return e.complexity.Query.CreateBulk(childComplexity), true

	case "Query.createCommunicationBus":
		if e.complexity.Query.CreateCommunicationBus == nil {
			break
		}

		return e.complexity.Query.CreateCommunicationBus(childComplexity), true

	case "Query.createCommunicationUnit":
		if e.complexity.Query.CreateCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.CreateCommunicationUnit(childComplexity), true

	case "Query.createCronJob":
		if e.complexity.Query.CreateCronJob == nil {
			break
		}

		return e.complexity.Query.CreateCronJob(childComplexity), true

	case "Query.createDevice":
		if e.complexity.Query.CreateDevice == nil {
			break
		}

		return e.complexity.Query.CreateDevice(childComplexity), true

	case "Query.createDeviceConfigurationRegister":
		if e.complexity.Query.CreateDeviceConfigurationRegister == nil {
			break
		}

		return e.complexity.Query.CreateDeviceConfigurationRegister(childComplexity), true

	case "Query.createDeviceConfigurationTemplate":
		if e.complexity.Query.CreateDeviceConfigurationTemplate == nil {
			break
		}

		return e.complexity.Query.CreateDeviceConfigurationTemplate(childComplexity), true

	case "Query.createDeviceGroup":
		if e.complexity.Query.CreateDeviceGroup == nil {
			break
		}

		return e.complexity.Query.CreateDeviceGroup(childComplexity), true

	case "Query.createFieldDescriptor":
		if e.complexity.Query.CreateFieldDescriptor == nil {
			break
		}

		return e.complexity.Query.CreateFieldDescriptor(childComplexity), true

	case "Query.createModem":
		if e.complexity.Query.CreateModem == nil {
			break
		}

		return e.complexity.Query.CreateModem(childComplexity), true

	case "Query.createModemPool":
		if e.complexity.Query.CreateModemPool == nil {
			break
		}

		return e.complexity.Query.CreateModemPool(childComplexity), true

	case "Query.createProxyBulk":
		if e.complexity.Query.CreateProxyBulk == nil {
			break
		}

		return e.complexity.Query.CreateProxyBulk(childComplexity), true

	case "Query.createTimeOfUseTable":
		if e.complexity.Query.CreateTimeOfUseTable == nil {
			break
		}

		return e.complexity.Query.CreateTimeOfUseTable(childComplexity), true

	case "Query.createVariable":
		if e.complexity.Query.CreateVariable == nil {
			break
		}

		return e.complexity.Query.CreateVariable(childComplexity), true

	case "Query.deleteCommunicationBus":
		if e.complexity.Query.DeleteCommunicationBus == nil {
			break
		}

		return e.complexity.Query.DeleteCommunicationBus(childComplexity), true

	case "Query.deleteCommunicationUnit":
		if e.complexity.Query.DeleteCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.DeleteCommunicationUnit(childComplexity), true

	case "Query.deleteCronJob":
		if e.complexity.Query.DeleteCronJob == nil {
			break
		}

		return e.complexity.Query.DeleteCronJob(childComplexity), true

	case "Query.deleteDevice":
		if e.complexity.Query.DeleteDevice == nil {
			break
		}

		return e.complexity.Query.DeleteDevice(childComplexity), true

	case "Query.deleteDeviceConfigurationRegister":
		if e.complexity.Query.DeleteDeviceConfigurationRegister == nil {
			break
		}

		return e.complexity.Query.DeleteDeviceConfigurationRegister(childComplexity), true

	case "Query.deleteDeviceConfigurationTemplate":
		if e.complexity.Query.DeleteDeviceConfigurationTemplate == nil {
			break
		}

		return e.complexity.Query.DeleteDeviceConfigurationTemplate(childComplexity), true

	case "Query.deleteDeviceGroup":
		if e.complexity.Query.DeleteDeviceGroup == nil {
			break
		}

		return e.complexity.Query.DeleteDeviceGroup(childComplexity), true

	case "Query.deleteFieldDescriptor":
		if e.complexity.Query.DeleteFieldDescriptor == nil {
			break
		}

		return e.complexity.Query.DeleteFieldDescriptor(childComplexity), true

	case "Query.deleteModem":
		if e.complexity.Query.DeleteModem == nil {
			break
		}

		return e.complexity.Query.DeleteModem(childComplexity), true

	case "Query.deleteModemPool":
		if e.complexity.Query.DeleteModemPool == nil {
			break
		}

		return e.complexity.Query.DeleteModemPool(childComplexity), true

	case "Query.deleteTimeOfUseTable":
		if e.complexity.Query.DeleteTimeOfUseTable == nil {
			break
		}

		return e.complexity.Query.DeleteTimeOfUseTable(childComplexity), true

	case "Query.deleteVariable":
		if e.complexity.Query.DeleteVariable == nil {
			break
		}

		return e.complexity.Query.DeleteVariable(childComplexity), true

	case "Query.getApplicationConfig":
		if e.complexity.Query.GetApplicationConfig == nil {
			break
		}

		return e.complexity.Query.GetApplicationConfig(childComplexity), true

	case "Query.getBulk":
		if e.complexity.Query.GetBulk == nil {
			break
		}

		return e.complexity.Query.GetBulk(childComplexity), true

	case "Query.getBulkJob":
		if e.complexity.Query.GetBulkJob == nil {
			break
		}

		return e.complexity.Query.GetBulkJob(childComplexity), true

	case "Query.getCommunicationUnit":
		if e.complexity.Query.GetCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.GetCommunicationUnit(childComplexity), true

	case "Query.getCommunicationUnitNetworkMap":
		if e.complexity.Query.GetCommunicationUnitNetworkMap == nil {
			break
		}

		return e.complexity.Query.GetCommunicationUnitNetworkMap(childComplexity), true

	case "Query.getCronJob":
		if e.complexity.Query.GetCronJob == nil {
			break
		}

		return e.complexity.Query.GetCronJob(childComplexity), true

	case "Query.getCryptoSecret":
		if e.complexity.Query.GetCryptoSecret == nil {
			break
		}

		return e.complexity.Query.GetCryptoSecret(childComplexity), true

	case "Query.getDevice":
		if e.complexity.Query.GetDevice == nil {
			break
		}

		return e.complexity.Query.GetDevice(childComplexity), true

	case "Query.getDeviceBulks":
		if e.complexity.Query.GetDeviceBulks == nil {
			break
		}

		return e.complexity.Query.GetDeviceBulks(childComplexity), true

	case "Query.getDeviceCommunicationUnits":
		if e.complexity.Query.GetDeviceCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.GetDeviceCommunicationUnits(childComplexity), true

	case "Query.getDeviceConfigurationRegister":
		if e.complexity.Query.GetDeviceConfigurationRegister == nil {
			break
		}

		return e.complexity.Query.GetDeviceConfigurationRegister(childComplexity), true

	case "Query.getDeviceConfigurationTemplate":
		if e.complexity.Query.GetDeviceConfigurationTemplate == nil {
			break
		}

		return e.complexity.Query.GetDeviceConfigurationTemplate(childComplexity), true

	case "Query.getDeviceData":
		if e.complexity.Query.GetDeviceData == nil {
			break
		}

		return e.complexity.Query.GetDeviceData(childComplexity), true

	case "Query.getDeviceDataIrregularProfiles":
		if e.complexity.Query.GetDeviceDataIrregularProfiles == nil {
			break
		}

		return e.complexity.Query.GetDeviceDataIrregularProfiles(childComplexity), true

	case "Query.getDeviceDataProfiles":
		if e.complexity.Query.GetDeviceDataProfiles == nil {
			break
		}

		return e.complexity.Query.GetDeviceDataProfiles(childComplexity), true

	case "Query.getDeviceDataRegisters":
		if e.complexity.Query.GetDeviceDataRegisters == nil {
			break
		}

		return e.complexity.Query.GetDeviceDataRegisters(childComplexity), true

	case "Query.getDeviceDeviceGroups":
		if e.complexity.Query.GetDeviceDeviceGroups == nil {
			break
		}

		return e.complexity.Query.GetDeviceDeviceGroups(childComplexity), true

	case "Query.getDeviceEvents":
		if e.complexity.Query.GetDeviceEvents == nil {
			break
		}

		return e.complexity.Query.GetDeviceEvents(childComplexity), true

	case "Query.getDeviceGroup":
		if e.complexity.Query.GetDeviceGroup == nil {
			break
		}

		return e.complexity.Query.GetDeviceGroup(childComplexity), true

	case "Query.getDeviceInfo":
		if e.complexity.Query.GetDeviceInfo == nil {
			break
		}

		return e.complexity.Query.GetDeviceInfo(childComplexity), true

	case "Query.getDeviceNetworkMap":
		if e.complexity.Query.GetDeviceNetworkMap == nil {
			break
		}

		return e.complexity.Query.GetDeviceNetworkMap(childComplexity), true

	case "Query.getDriver":
		if e.complexity.Query.GetDriver == nil {
			break
		}

		return e.complexity.Query.GetDriver(childComplexity), true

	case "Query.getModemPool":
		if e.complexity.Query.GetModemPool == nil {
			break
		}

		return e.complexity.Query.GetModemPool(childComplexity), true

	case "Query.getOpenIdConfiguration":
		if e.complexity.Query.GetOpenIDConfiguration == nil {
			break
		}

		return e.complexity.Query.GetOpenIDConfiguration(childComplexity), true

	case "Query.getProxyBulk":
		if e.complexity.Query.GetProxyBulk == nil {
			break
		}

		return e.complexity.Query.GetProxyBulk(childComplexity), true

	case "Query.getTimeOfUseTable":
		if e.complexity.Query.GetTimeOfUseTable == nil {
			break
		}

		return e.complexity.Query.GetTimeOfUseTable(childComplexity), true

	case "Query.getVariable":
		if e.complexity.Query.GetVariable == nil {
			break
		}

		return e.complexity.Query.GetVariable(childComplexity), true

	case "Query.listBulkJobs":
		if e.complexity.Query.ListBulkJobs == nil {
			break
		}

		return e.complexity.Query.ListBulkJobs(childComplexity), true

	case "Query.listBulks":
		if e.complexity.Query.ListBulks == nil {
			break
		}

		return e.complexity.Query.ListBulks(childComplexity), true

	case "Query.listCommunicationBuses":
		if e.complexity.Query.ListCommunicationBuses == nil {
			break
		}

		return e.complexity.Query.ListCommunicationBuses(childComplexity), true

	case "Query.listCommunicationUnits":
		if e.complexity.Query.ListCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.ListCommunicationUnits(childComplexity), true

	case "Query.listCronJobs":
		if e.complexity.Query.ListCronJobs == nil {
			break
		}

		return e.complexity.Query.ListCronJobs(childComplexity), true

	case "Query.listDeviceCommunicationUnitChanges":
		if e.complexity.Query.ListDeviceCommunicationUnitChanges == nil {
			break
		}

		return e.complexity.Query.ListDeviceCommunicationUnitChanges(childComplexity), true

	case "Query.listDeviceConfigurationRegisters":
		if e.complexity.Query.ListDeviceConfigurationRegisters == nil {
			break
		}

		return e.complexity.Query.ListDeviceConfigurationRegisters(childComplexity), true

	case "Query.listDeviceConfigurationTemplates":
		if e.complexity.Query.ListDeviceConfigurationTemplates == nil {
			break
		}

		return e.complexity.Query.ListDeviceConfigurationTemplates(childComplexity), true

	case "Query.listDeviceDataInfo":
		if e.complexity.Query.ListDeviceDataInfo == nil {
			break
		}

		return e.complexity.Query.ListDeviceDataInfo(childComplexity), true

	case "Query.listDeviceGroupDevices":
		if e.complexity.Query.ListDeviceGroupDevices == nil {
			break
		}

		return e.complexity.Query.ListDeviceGroupDevices(childComplexity), true

	case "Query.listDeviceGroups":
		if e.complexity.Query.ListDeviceGroups == nil {
			break
		}

		return e.complexity.Query.ListDeviceGroups(childComplexity), true

	case "Query.listDevices":
		if e.complexity.Query.ListDevices == nil {
			break
		}

		return e.complexity.Query.ListDevices(childComplexity), true

	case "Query.listDrivers":
		if e.complexity.Query.ListDrivers == nil {
			break
		}

		return e.complexity.Query.ListDrivers(childComplexity), true

	case "Query.listFieldDescriptorOptions":
		if e.complexity.Query.ListFieldDescriptorOptions == nil {
			break
		}

		return e.complexity.Query.ListFieldDescriptorOptions(childComplexity), true

	case "Query.listFieldDescriptors":
		if e.complexity.Query.ListFieldDescriptors == nil {
			break
		}

		return e.complexity.Query.ListFieldDescriptors(childComplexity), true

	case "Query.listModemPools":
		if e.complexity.Query.ListModemPools == nil {
			break
		}

		return e.complexity.Query.ListModemPools(childComplexity), true

	case "Query.listTimeOfUseTables":
		if e.complexity.Query.ListTimeOfUseTables == nil {
			break
		}

		return e.complexity.Query.ListTimeOfUseTables(childComplexity), true

	case "Query.listVariables":
		if e.complexity.Query.ListVariables == nil {
			break
		}

		return e.complexity.Query.ListVariables(childComplexity), true

	case "Query.pauseCronJob":
		if e.complexity.Query.PauseCronJob == nil {
			break
		}

		return e.complexity.Query.PauseCronJob(childComplexity), true

	case "Query.removeCommunicationUnitsFromCommunicationBus":
		if e.complexity.Query.RemoveCommunicationUnitsFromCommunicationBus == nil {
			break
		}

		return e.complexity.Query.RemoveCommunicationUnitsFromCommunicationBus(childComplexity), true

	case "Query.removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate":
		if e.complexity.Query.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate == nil {
			break
		}

		return e.complexity.Query.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(childComplexity), true

	case "Query.removeDevicesFromGroup":
		if e.complexity.Query.RemoveDevicesFromGroup == nil {
			break
		}

		return e.complexity.Query.RemoveDevicesFromGroup(childComplexity), true

	case "Query.removeRegisterFromVariable":
		if e.complexity.Query.RemoveRegisterFromVariable == nil {
			break
		}

		return e.complexity.Query.RemoveRegisterFromVariable(childComplexity), true

	case "Query.resumeCronJob":
		if e.complexity.Query.ResumeCronJob == nil {
			break
		}

		return e.complexity.Query.ResumeCronJob(childComplexity), true

	case "Query.runCronJob":
		if e.complexity.Query.RunCronJob == nil {
			break
		}

		return e.complexity.Query.RunCronJob(childComplexity), true

	case "Query.setCryptoSecret":
		if e.complexity.Query.SetCryptoSecret == nil {
			break
		}

		return e.complexity.Query.SetCryptoSecret(childComplexity), true

	case "Query.setDeviceCommunicationUnits":
		if e.complexity.Query.SetDeviceCommunicationUnits == nil {
			break
		}

		return e.complexity.Query.SetDeviceCommunicationUnits(childComplexity), true

	case "Query.synchronizeComponentConfig":
		if e.complexity.Query.SynchronizeComponentConfig == nil {
			break
		}

		return e.complexity.Query.SynchronizeComponentConfig(childComplexity), true

	case "Query.updateApplicationConfig":
		if e.complexity.Query.UpdateApplicationConfig == nil {
			break
		}

		return e.complexity.Query.UpdateApplicationConfig(childComplexity), true

	case "Query.updateBulk":
		if e.complexity.Query.UpdateBulk == nil {
			break
		}

		return e.complexity.Query.UpdateBulk(childComplexity), true

	case "Query.updateBulkJob":
		if e.complexity.Query.UpdateBulkJob == nil {
			break
		}

		return e.complexity.Query.UpdateBulkJob(childComplexity), true

	case "Query.updateCommunicationUnit":
		if e.complexity.Query.UpdateCommunicationUnit == nil {
			break
		}

		return e.complexity.Query.UpdateCommunicationUnit(childComplexity), true

	case "Query.updateCronJob":
		if e.complexity.Query.UpdateCronJob == nil {
			break
		}

		return e.complexity.Query.UpdateCronJob(childComplexity), true

	case "Query.updateDevice":
		if e.complexity.Query.UpdateDevice == nil {
			break
		}

		return e.complexity.Query.UpdateDevice(childComplexity), true

	case "Query.updateDeviceConfigurationRegister":
		if e.complexity.Query.UpdateDeviceConfigurationRegister == nil {
			break
		}

		return e.complexity.Query.UpdateDeviceConfigurationRegister(childComplexity), true

	case "Query.updateDeviceConfigurationTemplate":
		if e.complexity.Query.UpdateDeviceConfigurationTemplate == nil {
			break
		}

		return e.complexity.Query.UpdateDeviceConfigurationTemplate(childComplexity), true

	case "Query.updateFieldDescriptor":
		if e.complexity.Query.UpdateFieldDescriptor == nil {
			break
		}

		return e.complexity.Query.UpdateFieldDescriptor(childComplexity), true

	case "Query.updateModem":
		if e.complexity.Query.UpdateModem == nil {
			break
		}

		return e.complexity.Query.UpdateModem(childComplexity), true

	case "Query.updateModemPool":
		if e.complexity.Query.UpdateModemPool == nil {
			break
		}

		return e.complexity.Query.UpdateModemPool(childComplexity), true

	case "Query.updateObjectFields":
		if e.complexity.Query.UpdateObjectFields == nil {
			break
		}

		return e.complexity.Query.UpdateObjectFields(childComplexity), true

	case "Query.updateTimeOfUseTable":
		if e.complexity.Query.UpdateTimeOfUseTable == nil {
			break
		}

		return e.complexity.Query.UpdateTimeOfUseTable(childComplexity), true

	case "Query.updateVariable":
		if e.complexity.Query.UpdateVariable == nil {
			break
		}

		return e.complexity.Query.UpdateVariable(childComplexity), true

	case "RegisterValue.timestamp":
		if e.complexity.RegisterValue.Timestamp == nil {
			break
		}

		return e.complexity.RegisterValue.Timestamp(childComplexity), true

	case "RegisterValue.unit":
		if e.complexity.RegisterValue.Unit == nil {
			break
		}

		return e.complexity.RegisterValue.Unit(childComplexity), true

	case "RegisterValue.value":
		if e.complexity.RegisterValue.Value == nil {
			break
		}

		return e.complexity.RegisterValue.Value(childComplexity), true

	case "RegisterValues.values":
		if e.complexity.RegisterValues.Values == nil {
			break
		}

		return e.complexity.RegisterValues.Values(childComplexity), true

	case "RelayStateRecord.relayId":
		if e.complexity.RelayStateRecord.RelayID == nil {
			break
		}

		return e.complexity.RelayStateRecord.RelayID(childComplexity), true

	case "RelayStateRecord.state":
		if e.complexity.RelayStateRecord.State == nil {
			break
		}

		return e.complexity.RelayStateRecord.State(childComplexity), true

	case "RemoveCommunicationUnitsFromCommunicationBusRequest.communicationBusId":
		if e.complexity.RemoveCommunicationUnitsFromCommunicationBusRequest.CommunicationBusID == nil {
			break
		}

		return e.complexity.RemoveCommunicationUnitsFromCommunicationBusRequest.CommunicationBusID(childComplexity), true

	case "RemoveCommunicationUnitsFromCommunicationBusRequest.communicationUnitId":
		if e.complexity.RemoveCommunicationUnitsFromCommunicationBusRequest.CommunicationUnitID == nil {
			break
		}

		return e.complexity.RemoveCommunicationUnitsFromCommunicationBusRequest.CommunicationUnitID(childComplexity), true

	case "RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.dctId":
		if e.complexity.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.DctID == nil {
			break
		}

		return e.complexity.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.DctID(childComplexity), true

	case "RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.registerId":
		if e.complexity.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.RegisterID == nil {
			break
		}

		return e.complexity.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest.RegisterID(childComplexity), true

	case "RemoveDevicesFromGroupRequest.deviceId":
		if e.complexity.RemoveDevicesFromGroupRequest.DeviceID == nil {
			break
		}

		return e.complexity.RemoveDevicesFromGroupRequest.DeviceID(childComplexity), true

	case "RemoveDevicesFromGroupRequest.groupId":
		if e.complexity.RemoveDevicesFromGroupRequest.GroupID == nil {
			break
		}

		return e.complexity.RemoveDevicesFromGroupRequest.GroupID(childComplexity), true

	case "RemoveRegisterFromVariableRequest.registerId":
		if e.complexity.RemoveRegisterFromVariableRequest.RegisterID == nil {
			break
		}

		return e.complexity.RemoveRegisterFromVariableRequest.RegisterID(childComplexity), true

	case "RemoveRegisterFromVariableRequest.variableId":
		if e.complexity.RemoveRegisterFromVariableRequest.VariableID == nil {
			break
		}

		return e.complexity.RemoveRegisterFromVariableRequest.VariableID(childComplexity), true

	case "Season.id":
		if e.complexity.Season.ID == nil {
			break
		}

		return e.complexity.Season.ID(childComplexity), true

	case "Season.name":
		if e.complexity.Season.Name == nil {
			break
		}

		return e.complexity.Season.Name(childComplexity), true

	case "Season.startDay":
		if e.complexity.Season.StartDay == nil {
			break
		}

		return e.complexity.Season.StartDay(childComplexity), true

	case "Season.startMonth":
		if e.complexity.Season.StartMonth == nil {
			break
		}

		return e.complexity.Season.StartMonth(childComplexity), true

	case "Season.startYear":
		if e.complexity.Season.StartYear == nil {
			break
		}

		return e.complexity.Season.StartYear(childComplexity), true

	case "Season.weekId":
		if e.complexity.Season.WeekID == nil {
			break
		}

		return e.complexity.Season.WeekID(childComplexity), true

	case "SetCryptoSecretRequest.accessLevel":
		if e.complexity.SetCryptoSecretRequest.AccessLevel == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.AccessLevel(childComplexity), true

	case "SetCryptoSecretRequest.cryptoId":
		if e.complexity.SetCryptoSecretRequest.CryptoID == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.CryptoID(childComplexity), true

	case "SetCryptoSecretRequest.data":
		if e.complexity.SetCryptoSecretRequest.Data == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.Data(childComplexity), true

	case "SetCryptoSecretRequest.dataDecryptionIv":
		if e.complexity.SetCryptoSecretRequest.DataDecryptionIv == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.DataDecryptionIv(childComplexity), true

	case "SetCryptoSecretRequest.dataDecryptionMethod":
		if e.complexity.SetCryptoSecretRequest.DataDecryptionMethod == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.DataDecryptionMethod(childComplexity), true

	case "SetCryptoSecretRequest.decryptionSecretId":
		if e.complexity.SetCryptoSecretRequest.DecryptionSecretID == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.DecryptionSecretID(childComplexity), true

	case "SetCryptoSecretRequest.driverType":
		if e.complexity.SetCryptoSecretRequest.DriverType == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.DriverType(childComplexity), true

	case "SetCryptoSecretRequest.keyId":
		if e.complexity.SetCryptoSecretRequest.KeyID == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.KeyID(childComplexity), true

	case "SetCryptoSecretRequest.objectType":
		if e.complexity.SetCryptoSecretRequest.ObjectType == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.ObjectType(childComplexity), true

	case "SetCryptoSecretRequest.sessionKey":
		if e.complexity.SetCryptoSecretRequest.SessionKey == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.SessionKey(childComplexity), true

	case "SetCryptoSecretRequest.sessionKeyDecryptionMethod":
		if e.complexity.SetCryptoSecretRequest.SessionKeyDecryptionMethod == nil {
			break
		}

		return e.complexity.SetCryptoSecretRequest.SessionKeyDecryptionMethod(childComplexity), true

	case "SetDeviceCommunicationUnitsRequest.communicationUnits":
		if e.complexity.SetDeviceCommunicationUnitsRequest.CommunicationUnits == nil {
			break
		}

		return e.complexity.SetDeviceCommunicationUnitsRequest.CommunicationUnits(childComplexity), true

	case "SetDeviceCommunicationUnitsRequest.deviceId":
		if e.complexity.SetDeviceCommunicationUnitsRequest.DeviceID == nil {
			break
		}

		return e.complexity.SetDeviceCommunicationUnitsRequest.DeviceID(childComplexity), true

	case "SetFieldsSpec.fields":
		if e.complexity.SetFieldsSpec.Fields == nil {
			break
		}

		return e.complexity.SetFieldsSpec.Fields(childComplexity), true

	case "SetFieldsSpec.objectId":
		if e.complexity.SetFieldsSpec.ObjectID == nil {
			break
		}

		return e.complexity.SetFieldsSpec.ObjectID(childComplexity), true

	case "SetFieldsSpec.objectType":
		if e.complexity.SetFieldsSpec.ObjectType == nil {
			break
		}

		return e.complexity.SetFieldsSpec.ObjectType(childComplexity), true

	case "SetModemPoolRequest.metadata":
		if e.complexity.SetModemPoolRequest.Metadata == nil {
			break
		}

		return e.complexity.SetModemPoolRequest.Metadata(childComplexity), true

	case "SetModemPoolRequest.spec":
		if e.complexity.SetModemPoolRequest.Spec == nil {
			break
		}

		return e.complexity.SetModemPoolRequest.Spec(childComplexity), true

	case "SetModemRequest.modem":
		if e.complexity.SetModemRequest.Modem == nil {
			break
		}

		return e.complexity.SetModemRequest.Modem(childComplexity), true

	case "SetModemRequest.poolId":
		if e.complexity.SetModemRequest.PoolID == nil {
			break
		}

		return e.complexity.SetModemRequest.PoolID(childComplexity), true

	case "SpecialDay.day":
		if e.complexity.SpecialDay.Day == nil {
			break
		}

		return e.complexity.SpecialDay.Day(childComplexity), true

	case "SpecialDay.dayId":
		if e.complexity.SpecialDay.DayID == nil {
			break
		}

		return e.complexity.SpecialDay.DayID(childComplexity), true

	case "SpecialDay.month":
		if e.complexity.SpecialDay.Month == nil {
			break
		}

		return e.complexity.SpecialDay.Month(childComplexity), true

	case "SpecialDay.year":
		if e.complexity.SpecialDay.Year == nil {
			break
		}

		return e.complexity.SpecialDay.Year(childComplexity), true

	case "StringValue.value":
		if e.complexity.StringValue.Value == nil {
			break
		}

		return e.complexity.StringValue.Value(childComplexity), true

	case "Struct.fields":
		if e.complexity.Struct.Fields == nil {
			break
		}

		return e.complexity.Struct.Fields(childComplexity), true

	case "Switching.hour":
		if e.complexity.Switching.Hour == nil {
			break
		}

		return e.complexity.Switching.Hour(childComplexity), true

	case "Switching.minute":
		if e.complexity.Switching.Minute == nil {
			break
		}

		return e.complexity.Switching.Minute(childComplexity), true

	case "Switching.relays":
		if e.complexity.Switching.Relays == nil {
			break
		}

		return e.complexity.Switching.Relays(childComplexity), true

	case "Switching.tariff":
		if e.complexity.Switching.Tariff == nil {
			break
		}

		return e.complexity.Switching.Tariff(childComplexity), true

	case "TimeOfUseTable.metadata":
		if e.complexity.TimeOfUseTable.Metadata == nil {
			break
		}

		return e.complexity.TimeOfUseTable.Metadata(childComplexity), true

	case "TimeOfUseTable.spec":
		if e.complexity.TimeOfUseTable.Spec == nil {
			break
		}

		return e.complexity.TimeOfUseTable.Spec(childComplexity), true

	case "TimeOfUseTableSpec.activateAt":
		if e.complexity.TimeOfUseTableSpec.ActivateAt == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.ActivateAt(childComplexity), true

	case "TimeOfUseTableSpec.dayProfiles":
		if e.complexity.TimeOfUseTableSpec.DayProfiles == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.DayProfiles(childComplexity), true

	case "TimeOfUseTableSpec.expiesAt":
		if e.complexity.TimeOfUseTableSpec.ExpiesAt == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.ExpiesAt(childComplexity), true

	case "TimeOfUseTableSpec.hdoGroupId":
		if e.complexity.TimeOfUseTableSpec.HdoGroupID == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.HdoGroupID(childComplexity), true

	case "TimeOfUseTableSpec.seasons":
		if e.complexity.TimeOfUseTableSpec.Seasons == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.Seasons(childComplexity), true

	case "TimeOfUseTableSpec.specialDays":
		if e.complexity.TimeOfUseTableSpec.SpecialDays == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.SpecialDays(childComplexity), true

	case "TimeOfUseTableSpec.weeks":
		if e.complexity.TimeOfUseTableSpec.Weeks == nil {
			break
		}

		return e.complexity.TimeOfUseTableSpec.Weeks(childComplexity), true

	case "TopologyEdge.attributes":
		if e.complexity.TopologyEdge.Attributes == nil {
			break
		}

		return e.complexity.TopologyEdge.Attributes(childComplexity), true

	case "TopologyEdge.fromXId":
		if e.complexity.TopologyEdge.FromXId == nil {
			break
		}

		return e.complexity.TopologyEdge.FromXId(childComplexity), true

	case "TopologyEdge.toXId":
		if e.complexity.TopologyEdge.ToXId == nil {
			break
		}

		return e.complexity.TopologyEdge.ToXId(childComplexity), true

	case "TopologyNode.attributes":
		if e.complexity.TopologyNode.Attributes == nil {
			break
		}

		return e.complexity.TopologyNode.Attributes(childComplexity), true

	case "TopologyNode.type":
		if e.complexity.TopologyNode.Type == nil {
			break
		}

		return e.complexity.TopologyNode.Type(childComplexity), true

	case "TopologyNode.xId":
		if e.complexity.TopologyNode.XID == nil {
			break
		}

		return e.complexity.TopologyNode.XID(childComplexity), true

	case "UpdateMetadata.metadata":
		if e.complexity.UpdateMetadata.Metadata == nil {
			break
		}

		return e.complexity.UpdateMetadata.Metadata(childComplexity), true

	case "UpdateObjectFieldsRequest.spec":
		if e.complexity.UpdateObjectFieldsRequest.Spec == nil {
			break
		}

		return e.complexity.UpdateObjectFieldsRequest.Spec(childComplexity), true

	case "Value.boolValue":
		if e.complexity.Value.BoolValue == nil {
			break
		}

		return e.complexity.Value.BoolValue(childComplexity), true

	case "Value.listValue":
		if e.complexity.Value.ListValue == nil {
			break
		}

		return e.complexity.Value.ListValue(childComplexity), true

	case "Value.nullValue":
		if e.complexity.Value.NullValue == nil {
			break
		}

		return e.complexity.Value.NullValue(childComplexity), true

	case "Value.numberValue":
		if e.complexity.Value.NumberValue == nil {
			break
		}

		return e.complexity.Value.NumberValue(childComplexity), true

	case "Value.stringValue":
		if e.complexity.Value.StringValue == nil {
			break
		}

		return e.complexity.Value.StringValue(childComplexity), true

	case "Value.structValue":
		if e.complexity.Value.StructValue == nil {
			break
		}

		return e.complexity.Value.StructValue(childComplexity), true

	case "Variable.metadata":
		if e.complexity.Variable.Metadata == nil {
			break
		}

		return e.complexity.Variable.Metadata(childComplexity), true

	case "Variable.spec":
		if e.complexity.Variable.Spec == nil {
			break
		}

		return e.complexity.Variable.Spec(childComplexity), true

	case "VariableDeviceData.timestamps":
		if e.complexity.VariableDeviceData.Timestamps == nil {
			break
		}

		return e.complexity.VariableDeviceData.Timestamps(childComplexity), true

	case "VariableDeviceData.units":
		if e.complexity.VariableDeviceData.Units == nil {
			break
		}

		return e.complexity.VariableDeviceData.Units(childComplexity), true

	case "VariableDeviceData.values":
		if e.complexity.VariableDeviceData.Values == nil {
			break
		}

		return e.complexity.VariableDeviceData.Values(childComplexity), true

	case "VariableDeviceData.variableId":
		if e.complexity.VariableDeviceData.VariableID == nil {
			break
		}

		return e.complexity.VariableDeviceData.VariableID(childComplexity), true

	case "VariableSpec.dataType":
		if e.complexity.VariableSpec.DataType == nil {
			break
		}

		return e.complexity.VariableSpec.DataType(childComplexity), true

	case "VariableSpec.excludeDataFrom":
		if e.complexity.VariableSpec.ExcludeDataFrom == nil {
			break
		}

		return e.complexity.VariableSpec.ExcludeDataFrom(childComplexity), true

	case "VariableSpec.registerId":
		if e.complexity.VariableSpec.RegisterID == nil {
			break
		}

		return e.complexity.VariableSpec.RegisterID(childComplexity), true

	case "Week.dayIds":
		if e.complexity.Week.DayIds == nil {
			break
		}

		return e.complexity.Week.DayIds(childComplexity), true

	case "Week.weekId":
		if e.complexity.Week.WeekID == nil {
			break
		}

		return e.complexity.Week.WeekID(childComplexity), true

	case "Week.weekName":
		if e.complexity.Week.WeekName == nil {
			break
		}

		return e.complexity.Week.WeekName(childComplexity), true

	case "_mapFieldValue.key":
		if e.complexity._mapFieldValue.Key == nil {
			break
		}

		return e.complexity._mapFieldValue.Key(childComplexity), true

	case "_mapFieldValue.value":
		if e.complexity._mapFieldValue.Value == nil {
			break
		}

		return e.complexity._mapFieldValue.Value(childComplexity), true

	case "_mapListOfString.key":
		if e.complexity._mapListOfString.Key == nil {
			break
		}

		return e.complexity._mapListOfString.Key(childComplexity), true

	case "_mapListOfString.value":
		if e.complexity._mapListOfString.Value == nil {
			break
		}

		return e.complexity._mapListOfString.Value(childComplexity), true

	case "_mapValue.key":
		if e.complexity._mapValue.Key == nil {
			break
		}

		return e.complexity._mapValue.Key(childComplexity), true

	case "_mapValue.value":
		if e.complexity._mapValue.Value == nil {
			break
		}

		return e.complexity._mapValue.Value(childComplexity), true

	case "_mapstring.key":
		if e.complexity._mapstring.Key == nil {
			break
		}

		return e.complexity._mapstring.Key(childComplexity), true

	case "_mapstring.value":
		if e.complexity._mapstring.Value == nil {
			break
		}

		return e.complexity._mapstring.Value(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap()
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "api.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "api.graphqls", Input: sourceData("api.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccessLevelTemplate_id(ctx context.Context, field graphql.CollectedField, obj *model.AccessLevelTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessLevelTemplate_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessLevelTemplate_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessLevelTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AccessLevelTemplate_name(ctx context.Context, field graphql.CollectedField, obj *model.AccessLevelTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AccessLevelTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AccessLevelTemplate_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AccessLevelTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_nodata(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_nodata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_nodata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_registers(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_registers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegisterValues)
	fc.Result = res
	return ec.marshalORegisterValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_registers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "values":
				return ec.fieldContext_RegisterValues_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_profile(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_profile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Profile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProfileValues)
	fc.Result = res
	return ec.marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_profile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "period":
				return ec.fieldContext_ProfileValues_period(ctx, field)
			case "unit":
				return ec.fieldContext_ProfileValues_unit(ctx, field)
			case "blocks":
				return ec.fieldContext_ProfileValues_blocks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_irregularProfile(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_irregularProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IrregularProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IrregularProfileValues)
	fc.Result = res
	return ec.marshalOIrregularProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularProfileValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_irregularProfile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unit":
				return ec.fieldContext_IrregularProfileValues_unit(ctx, field)
			case "values":
				return ec.fieldContext_IrregularProfileValues_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IrregularProfileValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_deviceInfo(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_deviceInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceInfo)
	fc.Result = res
	return ec.marshalODeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_deviceInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "infoTimestamp":
				return ec.fieldContext_DeviceInfo_infoTimestamp(ctx, field)
			case "manufacturerSerialNumber":
				return ec.fieldContext_DeviceInfo_manufacturerSerialNumber(ctx, field)
			case "deviceSerialNumber":
				return ec.fieldContext_DeviceInfo_deviceSerialNumber(ctx, field)
			case "firmwareVersion":
				return ec.fieldContext_DeviceInfo_firmwareVersion(ctx, field)
			case "clockDelta":
				return ec.fieldContext_DeviceInfo_clockDelta(ctx, field)
			case "deviceModel":
				return ec.fieldContext_DeviceInfo_deviceModel(ctx, field)
			case "errorRegister":
				return ec.fieldContext_DeviceInfo_errorRegister(ctx, field)
			case "relayStates":
				return ec.fieldContext_DeviceInfo_relayStates(ctx, field)
			case "connectionState":
				return ec.fieldContext_DeviceInfo_connectionState(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_events(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EventRecords)
	fc.Result = res
	return ec.marshalOEventRecords2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEventRecords(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "values":
				return ec.fieldContext_EventRecords_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventRecords", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionData_touTable(ctx context.Context, field graphql.CollectedField, obj *model.ActionData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionData_touTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TouTable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeOfUseTableSpec)
	fc.Result = res
	return ec.marshalOTimeOfUseTableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTableSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionData_touTable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expiesAt":
				return ec.fieldContext_TimeOfUseTableSpec_expiesAt(ctx, field)
			case "hdoGroupId":
				return ec.fieldContext_TimeOfUseTableSpec_hdoGroupId(ctx, field)
			case "activateAt":
				return ec.fieldContext_TimeOfUseTableSpec_activateAt(ctx, field)
			case "seasons":
				return ec.fieldContext_TimeOfUseTableSpec_seasons(ctx, field)
			case "weeks":
				return ec.fieldContext_TimeOfUseTableSpec_weeks(ctx, field)
			case "dayProfiles":
				return ec.fieldContext_TimeOfUseTableSpec_dayProfiles(ctx, field)
			case "specialDays":
				return ec.fieldContext_TimeOfUseTableSpec_specialDays(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeOfUseTableSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionFwUpdate__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionFwUpdate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionFwUpdate__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionFwUpdate__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionFwUpdate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetDeviceInfo__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetDeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetDeviceInfo__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetDeviceInfo__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetDeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetEvents_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetEvents_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetEvents_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetEvents_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetEvents_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetEvents_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetIrregularProfile_dataType(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetIrregularProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetIrregularProfile_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetIrregularProfile_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetIrregularProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_from(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_to(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetPeriodicalProfile_dataType(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetPeriodicalProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetPeriodicalProfile_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetPeriodicalProfile_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetPeriodicalProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetRegister_dataType(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetRegister_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetRegister_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionGetTou_passive(ctx context.Context, field graphql.CollectedField, obj *model.ActionGetTou) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionGetTou_passive(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionGetTou_passive(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionGetTou",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResetBillingPeriod__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionResetBillingPeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResetBillingPeriod__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResetBillingPeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_actionId(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_actionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_actionId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_status(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResultCode)
	fc.Result = res
	return ec.marshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResultCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionResultCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_data(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionData)
	fc.Result = res
	return ec.marshalOActionData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodata":
				return ec.fieldContext_ActionData_nodata(ctx, field)
			case "registers":
				return ec.fieldContext_ActionData_registers(ctx, field)
			case "profile":
				return ec.fieldContext_ActionData_profile(ctx, field)
			case "irregularProfile":
				return ec.fieldContext_ActionData_irregularProfile(ctx, field)
			case "deviceInfo":
				return ec.fieldContext_ActionData_deviceInfo(ctx, field)
			case "events":
				return ec.fieldContext_ActionData_events(ctx, field)
			case "touTable":
				return ec.fieldContext_ActionData_touTable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_registerId(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionResult_variableName(ctx context.Context, field graphql.CollectedField, obj *model.ActionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionResult_variableName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariableName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionResult_variableName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetDisconnectorState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetDisconnectorState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetDisconnectorState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetDisconnectorState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetLimiter__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetLimiter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetLimiter__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetLimiter__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetLimiter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetRelayState__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetRelayState) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetRelayState__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetRelayState__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetRelayState",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSetTou_table(ctx context.Context, field graphql.CollectedField, obj *model.ActionSetTou) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSetTou_table(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Table, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeOfUseTableSpec)
	fc.Result = res
	return ec.marshalOTimeOfUseTableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTableSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSetTou_table(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSetTou",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expiesAt":
				return ec.fieldContext_TimeOfUseTableSpec_expiesAt(ctx, field)
			case "hdoGroupId":
				return ec.fieldContext_TimeOfUseTableSpec_hdoGroupId(ctx, field)
			case "activateAt":
				return ec.fieldContext_TimeOfUseTableSpec_activateAt(ctx, field)
			case "seasons":
				return ec.fieldContext_TimeOfUseTableSpec_seasons(ctx, field)
			case "weeks":
				return ec.fieldContext_TimeOfUseTableSpec_weeks(ctx, field)
			case "dayProfiles":
				return ec.fieldContext_TimeOfUseTableSpec_dayProfiles(ctx, field)
			case "specialDays":
				return ec.fieldContext_TimeOfUseTableSpec_specialDays(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeOfUseTableSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionSyncClock__empty(ctx context.Context, field graphql.CollectedField, obj *model.ActionSyncClock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionSyncClock__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionSyncClock__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionSyncClock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddCommunicationUnitsToCommunicationBusRequest_communicationBusId(ctx context.Context, field graphql.CollectedField, obj *model.AddCommunicationUnitsToCommunicationBusRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddCommunicationUnitsToCommunicationBusRequest_communicationBusId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationBusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddCommunicationUnitsToCommunicationBusRequest_communicationBusId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddCommunicationUnitsToCommunicationBusRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddCommunicationUnitsToCommunicationBusRequest_communicationUnitId(ctx context.Context, field graphql.CollectedField, obj *model.AddCommunicationUnitsToCommunicationBusRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddCommunicationUnitsToCommunicationBusRequest_communicationUnitId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddCommunicationUnitsToCommunicationBusRequest_communicationUnitId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddCommunicationUnitsToCommunicationBusRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_dctId(ctx context.Context, field graphql.CollectedField, obj *model.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_dctId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DctID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_dctId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_registerId(ctx context.Context, field graphql.CollectedField, obj *model.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDevicesToGroupRequest_groupId(ctx context.Context, field graphql.CollectedField, obj *model.AddDevicesToGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDevicesToGroupRequest_groupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDevicesToGroupRequest_groupId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDevicesToGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddDevicesToGroupRequest_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.AddDevicesToGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddDevicesToGroupRequest_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddDevicesToGroupRequest_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddDevicesToGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddRegisterToVariableRequest_variableId(ctx context.Context, field graphql.CollectedField, obj *model.AddRegisterToVariableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddRegisterToVariableRequest_variableId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddRegisterToVariableRequest_variableId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddRegisterToVariableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AddRegisterToVariableRequest_registerId(ctx context.Context, field graphql.CollectedField, obj *model.AddRegisterToVariableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AddRegisterToVariableRequest_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AddRegisterToVariableRequest_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AddRegisterToVariableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConfig_items(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConfig_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ComponentConfig)
	fc.Result = res
	return ec.marshalOComponentConfig2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConfig_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ComponentConfig_name(ctx, field)
			case "items":
				return ec.fieldContext_ComponentConfig_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComponentConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConfigDescriptor_descriptors(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationConfigDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConfigDescriptor_descriptors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Descriptors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ComponentConfigDescriptor)
	fc.Result = res
	return ec.marshalOComponentConfigDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfigDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConfigDescriptor_descriptors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConfigDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ComponentConfigDescriptor_name(ctx, field)
			case "items":
				return ec.fieldContext_ComponentConfigDescriptor_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComponentConfigDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationConfigDescriptor_items(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationConfigDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationConfigDescriptor_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ComponentConfig)
	fc.Result = res
	return ec.marshalOComponentConfig2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationConfigDescriptor_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationConfigDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ComponentConfig_name(ctx, field)
			case "items":
				return ec.fieldContext_ComponentConfig_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComponentConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_protocol(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_protocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_protocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApplicationProtocolTemplate_attributes(ctx context.Context, field graphql.CollectedField, obj *model.ApplicationProtocolTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApplicationProtocolTemplate_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApplicationProtocolTemplate_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApplicationProtocolTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bulk_spec(ctx context.Context, field graphql.CollectedField, obj *model.Bulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bulk_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkSpec)
	fc.Result = res
	return ec.marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bulk_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correlationId":
				return ec.fieldContext_BulkSpec_correlationId(ctx, field)
			case "devices":
				return ec.fieldContext_BulkSpec_devices(ctx, field)
			case "deviceGroupId":
				return ec.fieldContext_BulkSpec_deviceGroupId(ctx, field)
			case "settings":
				return ec.fieldContext_BulkSpec_settings(ctx, field)
			case "actions":
				return ec.fieldContext_BulkSpec_actions(ctx, field)
			case "webhookUrl":
				return ec.fieldContext_BulkSpec_webhookUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bulk_status(ctx context.Context, field graphql.CollectedField, obj *model.Bulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bulk_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatus)
	fc.Result = res
	return ec.marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bulk_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_BulkStatus_status(ctx, field)
			case "jobsCount":
				return ec.fieldContext_BulkStatus_jobsCount(ctx, field)
			case "jobsFinished":
				return ec.fieldContext_BulkStatus_jobsFinished(ctx, field)
			case "jobsSuccessful":
				return ec.fieldContext_BulkStatus_jobsSuccessful(ctx, field)
			case "createdAt":
				return ec.fieldContext_BulkStatus_createdAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_BulkStatus_startedAt(ctx, field)
			case "finishedAt":
				return ec.fieldContext_BulkStatus_finishedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Bulk_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Bulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Bulk_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Bulk_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Bulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJob_spec(ctx context.Context, field graphql.CollectedField, obj *model.BulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJob_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkJobSpec)
	fc.Result = res
	return ec.marshalOBulkJobSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJobSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJob_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "device":
				return ec.fieldContext_BulkJobSpec_device(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkJobSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJob_status(ctx context.Context, field graphql.CollectedField, obj *model.BulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJob_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatus)
	fc.Result = res
	return ec.marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJob_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_JobStatus_status(ctx, field)
			case "code":
				return ec.fieldContext_JobStatus_code(ctx, field)
			case "results":
				return ec.fieldContext_JobStatus_results(ctx, field)
			case "startedAt":
				return ec.fieldContext_JobStatus_startedAt(ctx, field)
			case "finishedAt":
				return ec.fieldContext_JobStatus_finishedAt(ctx, field)
			case "attemptsDone":
				return ec.fieldContext_JobStatus_attemptsDone(ctx, field)
			case "deviceInfo":
				return ec.fieldContext_JobStatus_deviceInfo(ctx, field)
			case "queueId":
				return ec.fieldContext_JobStatus_queueId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJob_metadata(ctx context.Context, field graphql.CollectedField, obj *model.BulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJob_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJob_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkJobSpec_device(ctx context.Context, field graphql.CollectedField, obj *model.BulkJobSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkJobSpec_device(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobDevice)
	fc.Result = res
	return ec.marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkJobSpec_device(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkJobSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "jobId":
				return ec.fieldContext_JobDevice_jobId(ctx, field)
			case "deviceId":
				return ec.fieldContext_JobDevice_deviceId(ctx, field)
			case "externalId":
				return ec.fieldContext_JobDevice_externalId(ctx, field)
			case "deviceAttributes":
				return ec.fieldContext_JobDevice_deviceAttributes(ctx, field)
			case "connectionInfo":
				return ec.fieldContext_JobDevice_connectionInfo(ctx, field)
			case "appProtocol":
				return ec.fieldContext_JobDevice_appProtocol(ctx, field)
			case "timezone":
				return ec.fieldContext_JobDevice_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_correlationId(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_correlationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_correlationId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_devices(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfJobDeviceID)
	fc.Result = res
	return ec.marshalOListOfJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfJobDeviceID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListOfJobDeviceId_list(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfJobDeviceId_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfJobDeviceId", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_deviceGroupId(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_deviceGroupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_deviceGroupId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_settings(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobSettings)
	fc.Result = res
	return ec.marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxDuration":
				return ec.fieldContext_JobSettings_maxDuration(ctx, field)
			case "priority":
				return ec.fieldContext_JobSettings_priority(ctx, field)
			case "attempts":
				return ec.fieldContext_JobSettings_attempts(ctx, field)
			case "retryDelay":
				return ec.fieldContext_JobSettings_retryDelay(ctx, field)
			case "deferStart":
				return ec.fieldContext_JobSettings_deferStart(ctx, field)
			case "expiresAt":
				return ec.fieldContext_JobSettings_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_actions(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobActionSet)
	fc.Result = res
	return ec.marshalOJobActionSet2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionSet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_actions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "variables":
				return ec.fieldContext_JobActionSet_variables(ctx, field)
			case "getRegister":
				return ec.fieldContext_JobActionSet_getRegister(ctx, field)
			case "getPeriodicalProfile":
				return ec.fieldContext_JobActionSet_getPeriodicalProfile(ctx, field)
			case "getIrregularProfile":
				return ec.fieldContext_JobActionSet_getIrregularProfile(ctx, field)
			case "getEvents":
				return ec.fieldContext_JobActionSet_getEvents(ctx, field)
			case "getDeviceInfo":
				return ec.fieldContext_JobActionSet_getDeviceInfo(ctx, field)
			case "syncClock":
				return ec.fieldContext_JobActionSet_syncClock(ctx, field)
			case "setRelayState":
				return ec.fieldContext_JobActionSet_setRelayState(ctx, field)
			case "setDisconnectorState":
				return ec.fieldContext_JobActionSet_setDisconnectorState(ctx, field)
			case "getTou":
				return ec.fieldContext_JobActionSet_getTou(ctx, field)
			case "setTou":
				return ec.fieldContext_JobActionSet_setTou(ctx, field)
			case "setLimiter":
				return ec.fieldContext_JobActionSet_setLimiter(ctx, field)
			case "resetBillingPeriod":
				return ec.fieldContext_JobActionSet_resetBillingPeriod(ctx, field)
			case "fwUpdate":
				return ec.fieldContext_JobActionSet_fwUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionSet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkSpec_webhookUrl(ctx context.Context, field graphql.CollectedField, obj *model.BulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkSpec_webhookUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkSpec_webhookUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatusCode)
	fc.Result = res
	return ec.marshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkStatusCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BulkStatusCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_jobsCount(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_jobsCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_jobsCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_jobsFinished(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_jobsFinished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobsFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_jobsFinished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_jobsSuccessful(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_jobsSuccessful(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobsSuccessful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_jobsSuccessful(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_startedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BulkStatus_finishedAt(ctx context.Context, field graphql.CollectedField, obj *model.BulkStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BulkStatus_finishedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BulkStatus_finishedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BulkStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationBus_status(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationBus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationBus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationBusStatus)
	fc.Result = res
	return ec.marshalOCommunicationBusStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationBusStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationBus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationBus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communicationUnitId":
				return ec.fieldContext_CommunicationBusStatus_communicationUnitId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationBusStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationBus_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationBus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationBus_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationBus_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationBus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationBusStatus_communicationUnitId(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationBusStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationBusStatus_communicationUnitId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationBusStatus_communicationUnitId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationBusStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationTemplate_type(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationTemplate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationType)
	fc.Result = res
	return ec.marshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationTemplate_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CommunicationType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationTemplate_datalinks(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationTemplate_datalinks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Datalinks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DataLinkTemplate)
	fc.Result = res
	return ec.marshalODataLinkTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationTemplate_datalinks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "linkProtocol":
				return ec.fieldContext_DataLinkTemplate_linkProtocol(ctx, field)
			case "appProtocolRefs":
				return ec.fieldContext_DataLinkTemplate_appProtocolRefs(ctx, field)
			case "attributes":
				return ec.fieldContext_DataLinkTemplate_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataLinkTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnit_spec(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnit_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnitSpec)
	fc.Result = res
	return ec.marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnit_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "externalId":
				return ec.fieldContext_CommunicationUnitSpec_externalId(ctx, field)
			case "connectionInfo":
				return ec.fieldContext_CommunicationUnitSpec_connectionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnitSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnit_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnit_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnit_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_externalId(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_externalId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommunicationUnitSpec_connectionInfo(ctx context.Context, field graphql.CollectedField, obj *model.CommunicationUnitSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommunicationUnitSpec_connectionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommunicationUnitSpec_connectionInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommunicationUnitSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modemPool":
				return ec.fieldContext_ConnectionInfo_modemPool(ctx, field)
			case "serialOverIp":
				return ec.fieldContext_ConnectionInfo_serialOverIp(ctx, field)
			case "linkProtocol":
				return ec.fieldContext_ConnectionInfo_linkProtocol(ctx, field)
			case "communicationBusId":
				return ec.fieldContext_ConnectionInfo_communicationBusId(ctx, field)
			case "attributes":
				return ec.fieldContext_ConnectionInfo_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentConfig_name(ctx context.Context, field graphql.CollectedField, obj *model.ComponentConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentConfig_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentConfig_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentConfig_items(ctx context.Context, field graphql.CollectedField, obj *model.ComponentConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentConfig_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldValues)
	fc.Result = res
	return ec.marshalOFieldValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentConfig_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributes":
				return ec.fieldContext_FieldValues_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentConfigDescriptor_name(ctx context.Context, field graphql.CollectedField, obj *model.ComponentConfigDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentConfigDescriptor_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentConfigDescriptor_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentConfigDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ComponentConfigDescriptor_items(ctx context.Context, field graphql.CollectedField, obj *model.ComponentConfigDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ComponentConfigDescriptor_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ComponentConfigDescriptor_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ComponentConfigDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_tcpip(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tcpip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeDirectTCPIP)
	fc.Result = res
	return ec.marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_tcpip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeDirectTcpIp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_modemPool(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_modemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModemPool, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeModemPool)
	fc.Result = res
	return ec.marshalOConnectionTypeModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_modemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "number":
				return ec.fieldContext_ConnectionTypeModemPool_number(ctx, field)
			case "poolId":
				return ec.fieldContext_ConnectionTypeModemPool_poolId(ctx, field)
			case "modem":
				return ec.fieldContext_ConnectionTypeModemPool_modem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_serialOverIp(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_serialOverIp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialOverIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeControlledSerial)
	fc.Result = res
	return ec.marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_serialOverIp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "direct":
				return ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
			case "moxa":
				return ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
			case "rfc2217":
				return ec.fieldContext_ConnectionTypeControlledSerial_rfc2217(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeControlledSerial", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_linkProtocol(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_linkProtocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataLinkProtocol)
	fc.Result = res
	return ec.marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_linkProtocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataLinkProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_communicationBusId(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_communicationBusId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationBusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_communicationBusId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_attributes(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_direct(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Direct, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialDirect)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialDirect2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeSerialDirect(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_direct(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialDirect_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeSerialDirect_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeSerialDirect_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialDirect", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_moxa(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Moxa, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialMoxa)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialMoxa2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeSerialMoxa(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_moxa(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialMoxa_host(ctx, field)
			case "dataPort":
				return ec.fieldContext_ConnectionTypeSerialMoxa_dataPort(ctx, field)
			case "commandPort":
				return ec.fieldContext_ConnectionTypeSerialMoxa_commandPort(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeSerialMoxa_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialMoxa", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeControlledSerial_rfc2217(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeControlledSerial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeControlledSerial_rfc2217(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rfc2217, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeSerialRfc2217)
	fc.Result = res
	return ec.marshalOConnectionTypeSerialRfc22172ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeSerialRfc2217(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeControlledSerial_rfc2217(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeControlledSerial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeSerialRfc2217_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeSerialRfc2217_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeSerialRfc2217_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeSerialRfc2217", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeDirectTcpIp_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeDirectTCPIP) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeDirectTcpIp_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeDirectTcpIp",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_number(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_poolId(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_poolId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_poolId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeModemPool_modem(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeModemPool_modem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeModemPool_modem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modemId":
				return ec.fieldContext_ModemInfo_modemId(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "atInit":
				return ec.fieldContext_ModemInfo_atInit(ctx, field)
			case "atDial":
				return ec.fieldContext_ModemInfo_atDial(ctx, field)
			case "atHangup":
				return ec.fieldContext_ModemInfo_atHangup(ctx, field)
			case "atEscape":
				return ec.fieldContext_ModemInfo_atEscape(ctx, field)
			case "connectTimeout":
				return ec.fieldContext_ModemInfo_connectTimeout(ctx, field)
			case "commandTimeout":
				return ec.fieldContext_ModemInfo_commandTimeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			case "serialOverIp":
				return ec.fieldContext_ModemInfo_serialOverIp(ctx, field)
			case "serialBaudRate":
				return ec.fieldContext_ModemInfo_serialBaudRate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialDirect_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialDirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialDirect_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialDirect_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialDirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_dataPort(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_dataPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_dataPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_commandPort(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_commandPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommandPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_commandPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialMoxa_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialMoxa) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialMoxa_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialMoxa_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialMoxa",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialRfc2217_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialRfc2217) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialRfc2217_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialRfc2217_host(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialRfc2217",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialRfc2217_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialRfc2217) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialRfc2217_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialRfc2217_port(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialRfc2217",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionTypeSerialRfc2217_timeout(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionTypeSerialRfc2217) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionTypeSerialRfc2217_timeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionTypeSerialRfc2217_timeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionTypeSerialRfc2217",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBulkRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBulkRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkSpec)
	fc.Result = res
	return ec.marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBulkRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correlationId":
				return ec.fieldContext_BulkSpec_correlationId(ctx, field)
			case "devices":
				return ec.fieldContext_BulkSpec_devices(ctx, field)
			case "deviceGroupId":
				return ec.fieldContext_BulkSpec_deviceGroupId(ctx, field)
			case "settings":
				return ec.fieldContext_BulkSpec_settings(ctx, field)
			case "actions":
				return ec.fieldContext_BulkSpec_actions(ctx, field)
			case "webhookUrl":
				return ec.fieldContext_BulkSpec_webhookUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateBulkRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateBulkRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateBulkRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommunicationBusRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateCommunicationBusRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommunicationBusRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommunicationBusRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommunicationBusRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommunicationUnitRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateCommunicationUnitRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommunicationUnitRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnitSpec)
	fc.Result = res
	return ec.marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommunicationUnitRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommunicationUnitRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "externalId":
				return ec.fieldContext_CommunicationUnitSpec_externalId(ctx, field)
			case "connectionInfo":
				return ec.fieldContext_CommunicationUnitSpec_connectionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnitSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCommunicationUnitRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateCommunicationUnitRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCommunicationUnitRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCommunicationUnitRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCommunicationUnitRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCronJobRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateCronJobRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCronJobRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CronJobSpec)
	fc.Result = res
	return ec.marshalOCronJobSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCronJobRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCronJobRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_CronJobSpec_type(ctx, field)
			case "schedule":
				return ec.fieldContext_CronJobSpec_schedule(ctx, field)
			case "timezone":
				return ec.fieldContext_CronJobSpec_timezone(ctx, field)
			case "suspend":
				return ec.fieldContext_CronJobSpec_suspend(ctx, field)
			case "data":
				return ec.fieldContext_CronJobSpec_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CronJobSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateCronJobRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateCronJobRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateCronJobRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateCronJobRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateCronJobRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceConfigurationRegisterRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceConfigurationRegisterRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceConfigurationRegisterRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceConfigurationRegisterSpec)
	fc.Result = res
	return ec.marshalODeviceConfigurationRegisterSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegisterSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceConfigurationRegisterRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceConfigurationRegisterRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driverType":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_driverType(ctx, field)
			case "registerType":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_registerType(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_attributes(ctx, field)
			case "dataType":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationRegisterSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceConfigurationRegisterRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceConfigurationRegisterRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceConfigurationRegisterRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceConfigurationRegisterRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceConfigurationRegisterRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceConfigurationTemplateRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceConfigurationTemplateRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceConfigurationTemplateRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceConfigurationTemplateSpec)
	fc.Result = res
	return ec.marshalODeviceConfigurationTemplateSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplateSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceConfigurationTemplateRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceConfigurationTemplateRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driverType":
				return ec.fieldContext_DeviceConfigurationTemplateSpec_driverType(ctx, field)
			case "registerId":
				return ec.fieldContext_DeviceConfigurationTemplateSpec_registerId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationTemplateSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceConfigurationTemplateRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceConfigurationTemplateRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceConfigurationTemplateRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceConfigurationTemplateRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceConfigurationTemplateRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceGroupRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceGroupRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupSpec)
	fc.Result = res
	return ec.marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroupSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceGroupRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "externalId":
				return ec.fieldContext_DeviceGroupSpec_externalId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceGroupRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceGroupRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceGroupRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceSpec)
	fc.Result = res
	return ec.marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dctId":
				return ec.fieldContext_DeviceSpec_dctId(ctx, field)
			case "externalId":
				return ec.fieldContext_DeviceSpec_externalId(ctx, field)
			case "communicationUnitLink":
				return ec.fieldContext_DeviceSpec_communicationUnitLink(ctx, field)
			case "timezone":
				return ec.fieldContext_DeviceSpec_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateDeviceRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateDeviceRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateDeviceRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateDeviceRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateDeviceRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateFieldDescriptorRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateFieldDescriptorRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateFieldDescriptorRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateFieldDescriptorRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateFieldDescriptorRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProxyBulkRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateProxyBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProxyBulkRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProxyBulkSpec)
	fc.Result = res
	return ec.marshalOProxyBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProxyBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProxyBulkRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProxyBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correlationId":
				return ec.fieldContext_ProxyBulkSpec_correlationId(ctx, field)
			case "driverType":
				return ec.fieldContext_ProxyBulkSpec_driverType(ctx, field)
			case "devices":
				return ec.fieldContext_ProxyBulkSpec_devices(ctx, field)
			case "settings":
				return ec.fieldContext_ProxyBulkSpec_settings(ctx, field)
			case "actions":
				return ec.fieldContext_ProxyBulkSpec_actions(ctx, field)
			case "webhookUrl":
				return ec.fieldContext_ProxyBulkSpec_webhookUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProxyBulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateProxyBulkRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateProxyBulkRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateProxyBulkRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateProxyBulkRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateProxyBulkRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateTimeOfUseTableRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateTimeOfUseTableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateTimeOfUseTableRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeOfUseTableSpec)
	fc.Result = res
	return ec.marshalOTimeOfUseTableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTableSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateTimeOfUseTableRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateTimeOfUseTableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expiesAt":
				return ec.fieldContext_TimeOfUseTableSpec_expiesAt(ctx, field)
			case "hdoGroupId":
				return ec.fieldContext_TimeOfUseTableSpec_hdoGroupId(ctx, field)
			case "activateAt":
				return ec.fieldContext_TimeOfUseTableSpec_activateAt(ctx, field)
			case "seasons":
				return ec.fieldContext_TimeOfUseTableSpec_seasons(ctx, field)
			case "weeks":
				return ec.fieldContext_TimeOfUseTableSpec_weeks(ctx, field)
			case "dayProfiles":
				return ec.fieldContext_TimeOfUseTableSpec_dayProfiles(ctx, field)
			case "specialDays":
				return ec.fieldContext_TimeOfUseTableSpec_specialDays(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeOfUseTableSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateTimeOfUseTableRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateTimeOfUseTableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateTimeOfUseTableRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateTimeOfUseTableRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateTimeOfUseTableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateVariableRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.CreateVariableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateVariableRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VariableSpec)
	fc.Result = res
	return ec.marshalOVariableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateVariableRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateVariableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "registerId":
				return ec.fieldContext_VariableSpec_registerId(ctx, field)
			case "dataType":
				return ec.fieldContext_VariableSpec_dataType(ctx, field)
			case "excludeDataFrom":
				return ec.fieldContext_VariableSpec_excludeDataFrom(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VariableSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CreateVariableRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CreateVariableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CreateVariableRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CreateVariableRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CreateVariableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJob_spec(ctx context.Context, field graphql.CollectedField, obj *model.CronJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJob_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CronJobSpec)
	fc.Result = res
	return ec.marshalOCronJobSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJob_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_CronJobSpec_type(ctx, field)
			case "schedule":
				return ec.fieldContext_CronJobSpec_schedule(ctx, field)
			case "timezone":
				return ec.fieldContext_CronJobSpec_timezone(ctx, field)
			case "suspend":
				return ec.fieldContext_CronJobSpec_suspend(ctx, field)
			case "data":
				return ec.fieldContext_CronJobSpec_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CronJobSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJob_status(ctx context.Context, field graphql.CollectedField, obj *model.CronJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJob_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CronJobStatus)
	fc.Result = res
	return ec.marshalOCronJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJob_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lastRunAt":
				return ec.fieldContext_CronJobStatus_lastRunAt(ctx, field)
			case "nextRunAt":
				return ec.fieldContext_CronJobStatus_nextRunAt(ctx, field)
			case "error":
				return ec.fieldContext_CronJobStatus_error(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CronJobStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJob_metadata(ctx context.Context, field graphql.CollectedField, obj *model.CronJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJob_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJob_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobSpec_type(ctx context.Context, field graphql.CollectedField, obj *model.CronJobSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobSpec_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CronJobTypeEnum)
	fc.Result = res
	return ec.marshalOCronJobTypeEnum2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobSpec_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CronJobTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobSpec_schedule(ctx context.Context, field graphql.CollectedField, obj *model.CronJobSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobSpec_schedule(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Schedule, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobSpec_schedule(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobSpec_timezone(ctx context.Context, field graphql.CollectedField, obj *model.CronJobSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobSpec_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobSpec_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobSpec_suspend(ctx context.Context, field graphql.CollectedField, obj *model.CronJobSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobSpec_suspend(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspend, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobSpec_suspend(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobSpec_data(ctx context.Context, field graphql.CollectedField, obj *model.CronJobSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobSpec_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Struct)
	fc.Result = res
	return ec.marshalOStruct2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStruct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobSpec_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fields":
				return ec.fieldContext_Struct_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Struct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobStatus_lastRunAt(ctx context.Context, field graphql.CollectedField, obj *model.CronJobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobStatus_lastRunAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastRunAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobStatus_lastRunAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobStatus_nextRunAt(ctx context.Context, field graphql.CollectedField, obj *model.CronJobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobStatus_nextRunAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextRunAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobStatus_nextRunAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CronJobStatus_error(ctx context.Context, field graphql.CollectedField, obj *model.CronJobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CronJobStatus_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CronJobStatus_error(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CronJobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CryptoSecret_accessLevel(ctx context.Context, field graphql.CollectedField, obj *model.CryptoSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CryptoSecret_accessLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CryptoSecret_accessLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CryptoSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CryptoSecret_keyId(ctx context.Context, field graphql.CollectedField, obj *model.CryptoSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CryptoSecret_keyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CryptoSecret_keyId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CryptoSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CryptoSecret_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.CryptoSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CryptoSecret_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CryptoSecret_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CryptoSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CryptoSecret_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CryptoSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CryptoSecret_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CryptoSecret_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CryptoSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CryptoSecret_data(ctx context.Context, field graphql.CollectedField, obj *model.CryptoSecret) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CryptoSecret_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CryptoSecret_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CryptoSecret",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CryptoSecrets_secrets(ctx context.Context, field graphql.CollectedField, obj *model.CryptoSecrets) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CryptoSecrets_secrets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secrets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CryptoSecret)
	fc.Result = res
	return ec.marshalOCryptoSecret2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCryptoSecret(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CryptoSecrets_secrets(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CryptoSecrets",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "accessLevel":
				return ec.fieldContext_CryptoSecret_accessLevel(ctx, field)
			case "keyId":
				return ec.fieldContext_CryptoSecret_keyId(ctx, field)
			case "createdAt":
				return ec.fieldContext_CryptoSecret_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CryptoSecret_updatedAt(ctx, field)
			case "data":
				return ec.fieldContext_CryptoSecret_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CryptoSecret", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_linkProtocol(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_linkProtocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DataLinkProtocol)
	fc.Result = res
	return ec.marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_linkProtocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DataLinkProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_appProtocolRefs(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_appProtocolRefs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocolRefs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_appProtocolRefs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataLinkTemplate_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DataLinkTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataLinkTemplate_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataLinkTemplate_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataLinkTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Date_year(ctx context.Context, field graphql.CollectedField, obj *model.Date) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Date_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Date_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Date",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Date_month(ctx context.Context, field graphql.CollectedField, obj *model.Date) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Date_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Date_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Date",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Date_day(ctx context.Context, field graphql.CollectedField, obj *model.Date) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Date_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Date_day(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Date",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DayProfile_dayId(ctx context.Context, field graphql.CollectedField, obj *model.DayProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DayProfile_dayId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DayProfile_dayId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DayProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DayProfile_switching(ctx context.Context, field graphql.CollectedField, obj *model.DayProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DayProfile_switching(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Switching, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Switching)
	fc.Result = res
	return ec.marshalOSwitching2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSwitching(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DayProfile_switching(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DayProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hour":
				return ec.fieldContext_Switching_hour(ctx, field)
			case "minute":
				return ec.fieldContext_Switching_minute(ctx, field)
			case "tariff":
				return ec.fieldContext_Switching_tariff(ctx, field)
			case "relays":
				return ec.fieldContext_Switching_relays(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Switching", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_spec(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceSpec)
	fc.Result = res
	return ec.marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dctId":
				return ec.fieldContext_DeviceSpec_dctId(ctx, field)
			case "externalId":
				return ec.fieldContext_DeviceSpec_externalId(ctx, field)
			case "communicationUnitLink":
				return ec.fieldContext_DeviceSpec_communicationUnitLink(ctx, field)
			case "timezone":
				return ec.fieldContext_DeviceSpec_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_status(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceStatus)
	fc.Result = res
	return ec.marshalODeviceStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "info":
				return ec.fieldContext_DeviceStatus_info(ctx, field)
			case "driverType":
				return ec.fieldContext_DeviceStatus_driverType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceBulks_bulks(ctx context.Context, field graphql.CollectedField, obj *model.DeviceBulks) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceBulks_bulks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bulks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Bulk)
	fc.Result = res
	return ec.marshalOBulk2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceBulks_bulks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceBulks",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Bulk_spec(ctx, field)
			case "status":
				return ec.fieldContext_Bulk_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Bulk_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_communicationUnitId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_communicationUnitId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_communicationUnitId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_appProtocol(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_appProtocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_appProtocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnit_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnit_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnit_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnitChange_status(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnitChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnitChange_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceCommunicationUnitChangeStatus)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnitChangeStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnitChangeStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnitChange_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnitChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "changeAt":
				return ec.fieldContext_DeviceCommunicationUnitChangeStatus_changeAt(ctx, field)
			case "communicationUnitId":
				return ec.fieldContext_DeviceCommunicationUnitChangeStatus_communicationUnitId(ctx, field)
			case "communicationUnitName":
				return ec.fieldContext_DeviceCommunicationUnitChangeStatus_communicationUnitName(ctx, field)
			case "deviceId":
				return ec.fieldContext_DeviceCommunicationUnitChangeStatus_deviceId(ctx, field)
			case "deviceName":
				return ec.fieldContext_DeviceCommunicationUnitChangeStatus_deviceName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnitChangeStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnitChangeStatus_changeAt(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnitChangeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnitChangeStatus_changeAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChangeAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnitChangeStatus_changeAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnitChangeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnitChangeStatus_communicationUnitId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnitChangeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnitChangeStatus_communicationUnitId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnitChangeStatus_communicationUnitId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnitChangeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnitChangeStatus_communicationUnitName(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnitChangeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnitChangeStatus_communicationUnitName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnitChangeStatus_communicationUnitName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnitChangeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnitChangeStatus_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnitChangeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnitChangeStatus_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnitChangeStatus_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnitChangeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceCommunicationUnitChangeStatus_deviceName(ctx context.Context, field graphql.CollectedField, obj *model.DeviceCommunicationUnitChangeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceCommunicationUnitChangeStatus_deviceName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceCommunicationUnitChangeStatus_deviceName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceCommunicationUnitChangeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationRegister_spec(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationRegister_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceConfigurationRegisterSpec)
	fc.Result = res
	return ec.marshalODeviceConfigurationRegisterSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegisterSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationRegister_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driverType":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_driverType(ctx, field)
			case "registerType":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_registerType(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_attributes(ctx, field)
			case "dataType":
				return ec.fieldContext_DeviceConfigurationRegisterSpec_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationRegisterSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationRegister_metadata(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationRegister_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationRegister_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationRegisterSpec_driverType(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationRegisterSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationRegisterSpec_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationRegisterSpec_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationRegisterSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationRegisterSpec_registerType(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationRegisterSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationRegisterSpec_registerType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegisterType)
	fc.Result = res
	return ec.marshalORegisterType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationRegisterSpec_registerType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationRegisterSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RegisterType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationRegisterSpec_attributes(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationRegisterSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationRegisterSpec_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationRegisterSpec_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationRegisterSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationRegisterSpec_dataType(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationRegisterSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationRegisterSpec_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationRegisterSpec_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationRegisterSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationTemplate_spec(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationTemplate_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceConfigurationTemplateSpec)
	fc.Result = res
	return ec.marshalODeviceConfigurationTemplateSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplateSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationTemplate_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "driverType":
				return ec.fieldContext_DeviceConfigurationTemplateSpec_driverType(ctx, field)
			case "registerId":
				return ec.fieldContext_DeviceConfigurationTemplateSpec_registerId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationTemplateSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationTemplate_metadata(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationTemplate_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationTemplate_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationTemplateSpec_driverType(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationTemplateSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationTemplateSpec_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationTemplateSpec_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationTemplateSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceConfigurationTemplateSpec_registerId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceConfigurationTemplateSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceConfigurationTemplateSpec_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceConfigurationTemplateSpec_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceConfigurationTemplateSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceData_devices(ctx context.Context, field graphql.CollectedField, obj *model.DeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceData_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceDeviceData)
	fc.Result = res
	return ec.marshalODeviceDeviceData2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDeviceData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceData_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deviceId":
				return ec.fieldContext_DeviceDeviceData_deviceId(ctx, field)
			case "data":
				return ec.fieldContext_DeviceDeviceData_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceDeviceData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfo_spec(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfo_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceDataInfoSpec)
	fc.Result = res
	return ec.marshalODeviceDataInfoSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfoSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfo_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deviceId":
				return ec.fieldContext_DeviceDataInfoSpec_deviceId(ctx, field)
			case "registerId":
				return ec.fieldContext_DeviceDataInfoSpec_registerId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceDataInfoSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfo_status(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfo_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceDataInfoStatus)
	fc.Result = res
	return ec.marshalODeviceDataInfoStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfoStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfo_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "registerName":
				return ec.fieldContext_DeviceDataInfoStatus_registerName(ctx, field)
			case "period":
				return ec.fieldContext_DeviceDataInfoStatus_period(ctx, field)
			case "lastValueAt":
				return ec.fieldContext_DeviceDataInfoStatus_lastValueAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceDataInfoStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfoSpec_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfoSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfoSpec_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfoSpec_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfoSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfoSpec_registerId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfoSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfoSpec_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfoSpec_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfoSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfoStatus_registerName(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfoStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfoStatus_registerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfoStatus_registerName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfoStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfoStatus_period(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfoStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfoStatus_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfoStatus_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfoStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDataInfoStatus_lastValueAt(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDataInfoStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDataInfoStatus_lastValueAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastValueAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDataInfoStatus_lastValueAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDataInfoStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDeviceData_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDeviceData_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDeviceData_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceDeviceData_data(ctx context.Context, field graphql.CollectedField, obj *model.DeviceDeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceDeviceData_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VariableDeviceData)
	fc.Result = res
	return ec.marshalOVariableDeviceData2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableDeviceData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceDeviceData_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceDeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "variableId":
				return ec.fieldContext_VariableDeviceData_variableId(ctx, field)
			case "timestamps":
				return ec.fieldContext_VariableDeviceData_timestamps(ctx, field)
			case "units":
				return ec.fieldContext_VariableDeviceData_units(ctx, field)
			case "values":
				return ec.fieldContext_VariableDeviceData_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VariableDeviceData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEventRecord_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEventRecord_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEventRecord_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEventRecord_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEventRecord_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEventRecord_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEventRecord_eventId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEventRecord_eventId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEventRecord_eventId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEventRecord_eventCode(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEventRecord_eventCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEventRecord_eventCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEventRecord_eventSource(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEventRecord_eventSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEventRecord_eventSource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEventRecord_eventText(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEventRecord_eventText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEventRecord_eventText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceEvents_events(ctx context.Context, field graphql.CollectedField, obj *model.DeviceEvents) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceEvents_events(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceEventRecord)
	fc.Result = res
	return ec.marshalODeviceEventRecord2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceEventRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceEvents_events(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceEvents",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deviceId":
				return ec.fieldContext_DeviceEventRecord_deviceId(ctx, field)
			case "timestamp":
				return ec.fieldContext_DeviceEventRecord_timestamp(ctx, field)
			case "eventId":
				return ec.fieldContext_DeviceEventRecord_eventId(ctx, field)
			case "eventCode":
				return ec.fieldContext_DeviceEventRecord_eventCode(ctx, field)
			case "eventSource":
				return ec.fieldContext_DeviceEventRecord_eventSource(ctx, field)
			case "eventText":
				return ec.fieldContext_DeviceEventRecord_eventText(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceEventRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroup_spec(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroup_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroupSpec)
	fc.Result = res
	return ec.marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroupSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroup_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "externalId":
				return ec.fieldContext_DeviceGroupSpec_externalId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroupSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroup_metadata(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroup_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroup_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceGroupSpec_externalId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceGroupSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceGroupSpec_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceGroupSpec_externalId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceGroupSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_infoTimestamp(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_infoTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InfoTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_infoTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_manufacturerSerialNumber(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_manufacturerSerialNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManufacturerSerialNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_manufacturerSerialNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_deviceSerialNumber(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_deviceSerialNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceSerialNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_deviceSerialNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_firmwareVersion(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_firmwareVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirmwareVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_firmwareVersion(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_clockDelta(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_clockDelta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClockDelta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_clockDelta(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_deviceModel(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_deviceModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_deviceModel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_errorRegister(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_errorRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOBigInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_errorRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BigInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_relayStates(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_relayStates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelayStates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚕᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_relayStates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceInfo_connectionState(ctx context.Context, field graphql.CollectedField, obj *model.DeviceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceInfo_connectionState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceInfo_connectionState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_dctId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_dctId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DctID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_dctId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_externalId(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_externalId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_communicationUnitLink(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_communicationUnitLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_communicationUnitLink(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communicationUnitId":
				return ec.fieldContext_DeviceCommunicationUnit_communicationUnitId(ctx, field)
			case "appProtocol":
				return ec.fieldContext_DeviceCommunicationUnit_appProtocol(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceCommunicationUnit_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceSpec_timezone(ctx context.Context, field graphql.CollectedField, obj *model.DeviceSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceSpec_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceSpec_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceStatus_info(ctx context.Context, field graphql.CollectedField, obj *model.DeviceStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceStatus_info(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceInfo)
	fc.Result = res
	return ec.marshalODeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceStatus_info(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "infoTimestamp":
				return ec.fieldContext_DeviceInfo_infoTimestamp(ctx, field)
			case "manufacturerSerialNumber":
				return ec.fieldContext_DeviceInfo_manufacturerSerialNumber(ctx, field)
			case "deviceSerialNumber":
				return ec.fieldContext_DeviceInfo_deviceSerialNumber(ctx, field)
			case "firmwareVersion":
				return ec.fieldContext_DeviceInfo_firmwareVersion(ctx, field)
			case "clockDelta":
				return ec.fieldContext_DeviceInfo_clockDelta(ctx, field)
			case "deviceModel":
				return ec.fieldContext_DeviceInfo_deviceModel(ctx, field)
			case "errorRegister":
				return ec.fieldContext_DeviceInfo_errorRegister(ctx, field)
			case "relayStates":
				return ec.fieldContext_DeviceInfo_relayStates(ctx, field)
			case "connectionState":
				return ec.fieldContext_DeviceInfo_connectionState(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceStatus_driverType(ctx context.Context, field graphql.CollectedField, obj *model.DeviceStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceStatus_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceStatus_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_spec(ctx context.Context, field graphql.CollectedField, obj *model.Driver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Driver_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverSpec)
	fc.Result = res
	return ec.marshalODriverSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriverSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Driver_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "version":
				return ec.fieldContext_DriverSpec_version(ctx, field)
			case "listeningPort":
				return ec.fieldContext_DriverSpec_listeningPort(ctx, field)
			case "driverType":
				return ec.fieldContext_DriverSpec_driverType(ctx, field)
			case "maxConcurrentJobs":
				return ec.fieldContext_DriverSpec_maxConcurrentJobs(ctx, field)
			case "maxCascadeDepth":
				return ec.fieldContext_DriverSpec_maxCascadeDepth(ctx, field)
			case "typicalMemUsage":
				return ec.fieldContext_DriverSpec_typicalMemUsage(ctx, field)
			case "templates":
				return ec.fieldContext_DriverSpec_templates(ctx, field)
			case "displayName":
				return ec.fieldContext_DriverSpec_displayName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Driver_status(ctx context.Context, field graphql.CollectedField, obj *model.Driver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Driver_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverStatus)
	fc.Result = res
	return ec.marshalODriverStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriverStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Driver_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Driver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isLatest":
				return ec.fieldContext_DriverStatus_isLatest(ctx, field)
			case "updateFinished":
				return ec.fieldContext_DriverStatus_updateFinished(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_version(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_listeningPort(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_listeningPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListeningPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_listeningPort(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_driverType(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_maxConcurrentJobs(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_maxConcurrentJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxConcurrentJobs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_maxConcurrentJobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_maxCascadeDepth(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_maxCascadeDepth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCascadeDepth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_maxCascadeDepth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_typicalMemUsage(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_typicalMemUsage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypicalMemUsage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_typicalMemUsage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_templates(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_templates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Templates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DriverTemplates)
	fc.Result = res
	return ec.marshalODriverTemplates2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriverTemplates(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_templates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communicationTemplates":
				return ec.fieldContext_DriverTemplates_communicationTemplates(ctx, field)
			case "appProtocols":
				return ec.fieldContext_DriverTemplates_appProtocols(ctx, field)
			case "actionAttributes":
				return ec.fieldContext_DriverTemplates_actionAttributes(ctx, field)
			case "accessTemplates":
				return ec.fieldContext_DriverTemplates_accessTemplates(ctx, field)
			case "actionConstraints":
				return ec.fieldContext_DriverTemplates_actionConstraints(ctx, field)
			case "uknownDeviceDescriptors":
				return ec.fieldContext_DriverTemplates_uknownDeviceDescriptors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverTemplates", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverSpec_displayName(ctx context.Context, field graphql.CollectedField, obj *model.DriverSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverSpec_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverSpec_displayName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverStatus_isLatest(ctx context.Context, field graphql.CollectedField, obj *model.DriverStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverStatus_isLatest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLatest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverStatus_isLatest(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverStatus_updateFinished(ctx context.Context, field graphql.CollectedField, obj *model.DriverStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverStatus_updateFinished(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateFinished, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverStatus_updateFinished(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_communicationTemplates(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_communicationTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationTemplate)
	fc.Result = res
	return ec.marshalOCommunicationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_communicationTemplates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_CommunicationTemplate_type(ctx, field)
			case "datalinks":
				return ec.fieldContext_CommunicationTemplate_datalinks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_appProtocols(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_appProtocols(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocols, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ApplicationProtocolTemplate)
	fc.Result = res
	return ec.marshalOApplicationProtocolTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_appProtocols(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "protocol":
				return ec.fieldContext_ApplicationProtocolTemplate_protocol(ctx, field)
			case "attributes":
				return ec.fieldContext_ApplicationProtocolTemplate_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationProtocolTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_actionAttributes(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_actionAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobActionAttributes)
	fc.Result = res
	return ec.marshalOJobActionAttributes2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_actionAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_JobActionAttributes_type(ctx, field)
			case "attributes":
				return ec.fieldContext_JobActionAttributes_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionAttributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_accessTemplates(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_accessTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessTemplates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AccessLevelTemplate)
	fc.Result = res
	return ec.marshalOAccessLevelTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐAccessLevelTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_accessTemplates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AccessLevelTemplate_id(ctx, field)
			case "name":
				return ec.fieldContext_AccessLevelTemplate_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AccessLevelTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_actionConstraints(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_actionConstraints(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionConstraints, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobActionContraints)
	fc.Result = res
	return ec.marshalOJobActionContraints2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionContraints(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_actionConstraints(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "getRegisterTypeName":
				return ec.fieldContext_JobActionContraints_getRegisterTypeName(ctx, field)
			case "getRegisterTypeAttributes":
				return ec.fieldContext_JobActionContraints_getRegisterTypeAttributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobActionContraints", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverTemplates_uknownDeviceDescriptors(ctx context.Context, field graphql.CollectedField, obj *model.DriverTemplates) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverTemplates_uknownDeviceDescriptors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UknownDeviceDescriptors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverTemplates_uknownDeviceDescriptors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverTemplates",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Duration_seconds(ctx context.Context, field graphql.CollectedField, obj *model.Duration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Duration_seconds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seconds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Duration_seconds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Duration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Duration_nanos(ctx context.Context, field graphql.CollectedField, obj *model.Duration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Duration_nanos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nanos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Duration_nanos(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Duration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Empty__empty(ctx context.Context, field graphql.CollectedField, obj *model.Empty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Empty__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Empty__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Empty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventRecord_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.EventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventRecord_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventRecord_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventRecord_eventId(ctx context.Context, field graphql.CollectedField, obj *model.EventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventRecord_eventId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventRecord_eventId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventRecord_eventCode(ctx context.Context, field graphql.CollectedField, obj *model.EventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventRecord_eventCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventRecord_eventCode(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventRecord_eventText(ctx context.Context, field graphql.CollectedField, obj *model.EventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventRecord_eventText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventRecord_eventText(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventRecord_eventSource(ctx context.Context, field graphql.CollectedField, obj *model.EventRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventRecord_eventSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventRecord_eventSource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EventRecords_values(ctx context.Context, field graphql.CollectedField, obj *model.EventRecords) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EventRecords_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.EventRecord)
	fc.Result = res
	return ec.marshalOEventRecord2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEventRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EventRecords_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EventRecords",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_EventRecord_timestamp(ctx, field)
			case "eventId":
				return ec.fieldContext_EventRecord_eventId(ctx, field)
			case "eventCode":
				return ec.fieldContext_EventRecord_eventCode(ctx, field)
			case "eventText":
				return ec.fieldContext_EventRecord_eventText(ctx, field)
			case "eventSource":
				return ec.fieldContext_EventRecord_eventSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EventRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_isUserDefined(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsUserDefined, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_isUserDefined(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_objectType(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ObjectType)
	fc.Result = res
	return ec.marshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_gid(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_gid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_gid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_fieldId(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_fieldId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_jsPath(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JsPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_jsPath(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_path(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_label(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_label(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_groupId(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_groupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_groupId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_dataType(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_format(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_format(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Format, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDisplayFormat)
	fc.Result = res
	return ec.marshalOFieldDisplayFormat2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDisplayFormat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_format(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDisplayFormat does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_unit(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_precision(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_precision(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Precision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_precision(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_tooltip(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tooltip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_tooltip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_required(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_required(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_required(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_editable(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_editable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_editable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_visible(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_visible(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visible, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_visible(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_multiValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_multiValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_secured(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_secured(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_secured(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_validation(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_validation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Validation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldValidation)
	fc.Result = res
	return ec.marshalOFieldValidation2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValidation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_validation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "re":
				return ec.fieldContext_FieldValidation_re(ctx, field)
			case "minLength":
				return ec.fieldContext_FieldValidation_minLength(ctx, field)
			case "maxLength":
				return ec.fieldContext_FieldValidation_maxLength(ctx, field)
			case "minInteger":
				return ec.fieldContext_FieldValidation_minInteger(ctx, field)
			case "maxInteger":
				return ec.fieldContext_FieldValidation_maxInteger(ctx, field)
			case "minNumber":
				return ec.fieldContext_FieldValidation_minNumber(ctx, field)
			case "maxNumber":
				return ec.fieldContext_FieldValidation_maxNumber(ctx, field)
			case "options":
				return ec.fieldContext_FieldValidation_options(ctx, field)
			case "optionsSource":
				return ec.fieldContext_FieldValidation_optionsSource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValidation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_defaultValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldValue)
	fc.Result = res
	return ec.marshalOFieldValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stringValue":
				return ec.fieldContext_FieldValue_stringValue(ctx, field)
			case "integerValue":
				return ec.fieldContext_FieldValue_integerValue(ctx, field)
			case "doubleValue":
				return ec.fieldContext_FieldValue_doubleValue(ctx, field)
			case "binaryValue":
				return ec.fieldContext_FieldValue_binaryValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_FieldValue_boolValue(ctx, field)
			case "dateValue":
				return ec.fieldContext_FieldValue_dateValue(ctx, field)
			case "durationValue":
				return ec.fieldContext_FieldValue_durationValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_sortable(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_sortable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sortable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_sortable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptor_filterable(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptor_filterable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filterable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptor_filterable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptorOptions_options(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptorOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptorOptions_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptorOptions_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptorOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptorOptions_complete(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptorOptions) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptorOptions_complete(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Complete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptorOptions_complete(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptorOptions",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptorSelector_objectType(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptorSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptorSelector_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ObjectType)
	fc.Result = res
	return ec.marshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptorSelector_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptorSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldDescriptorSelector_gid(ctx context.Context, field graphql.CollectedField, obj *model.FieldDescriptorSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldDescriptorSelector_gid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldDescriptorSelector_gid(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldDescriptorSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_re(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_re(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Re, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_re(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_minLength(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_minLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_minLength(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_maxLength(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_maxLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_maxLength(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_minInteger(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_minInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_minInteger(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_maxInteger(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_maxInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_maxInteger(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_minNumber(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_minNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_minNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_maxNumber(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_maxNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_maxNumber(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_options(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValidation_optionsSource(ctx context.Context, field graphql.CollectedField, obj *model.FieldValidation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValidation_optionsSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OptionsSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValidation_optionsSource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValidation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_stringValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_stringValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_stringValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_integerValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_integerValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegerValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_integerValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_doubleValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_doubleValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_doubleValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_binaryValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_binaryValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BinaryValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_binaryValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_boolValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_boolValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_boolValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_dateValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_dateValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_dateValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValue_durationValue(ctx context.Context, field graphql.CollectedField, obj *model.FieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValue_durationValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValue_durationValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldValues_attributes(ctx context.Context, field graphql.CollectedField, obj *model.FieldValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldValues_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldValues_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCryptoSecretRequest_objectType(ctx context.Context, field graphql.CollectedField, obj *model.GetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCryptoSecretRequest_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ObjectType)
	fc.Result = res
	return ec.marshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCryptoSecretRequest_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCryptoSecretRequest_driverType(ctx context.Context, field graphql.CollectedField, obj *model.GetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCryptoSecretRequest_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCryptoSecretRequest_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetCryptoSecretRequest_cryptoId(ctx context.Context, field graphql.CollectedField, obj *model.GetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetCryptoSecretRequest_cryptoId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CryptoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetCryptoSecretRequest_cryptoId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceBulksRequest_from(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceBulksRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceBulksRequest_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceBulksRequest_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceBulksRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceBulksRequest_to(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceBulksRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceBulksRequest_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceBulksRequest_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceBulksRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceBulksRequest_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceBulksRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceBulksRequest_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceBulksRequest_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceBulksRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataRequest_from(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataRequest_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataRequest_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataRequest_to(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataRequest_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataRequest_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataRequest_series(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataRequest_series(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Series, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetDeviceDataSeriesSelector)
	fc.Result = res
	return ec.marshalOGetDeviceDataSeriesSelector2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐGetDeviceDataSeriesSelector(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataRequest_series(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deviceId":
				return ec.fieldContext_GetDeviceDataSeriesSelector_deviceId(ctx, field)
			case "variableId":
				return ec.fieldContext_GetDeviceDataSeriesSelector_variableId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type GetDeviceDataSeriesSelector", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataRequest_filterIncludeStatus(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataRequest_filterIncludeStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterIncludeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataRequest_filterIncludeStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataRequest_filterExcludeStatus(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataRequest_filterExcludeStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterExcludeStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataRequest_filterExcludeStatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataRequest_snapshot(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataRequest_snapshot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Snapshot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataRequest_snapshot(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataSeriesSelector_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataSeriesSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataSeriesSelector_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataSeriesSelector_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataSeriesSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceDataSeriesSelector_variableId(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceDataSeriesSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceDataSeriesSelector_variableId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceDataSeriesSelector_variableId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceDataSeriesSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceEventsRequest_from(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceEventsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceEventsRequest_from(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.From, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceEventsRequest_from(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceEventsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceEventsRequest_to(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceEventsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceEventsRequest_to(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.To, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceEventsRequest_to(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceEventsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _GetDeviceEventsRequest_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.GetDeviceEventsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_GetDeviceEventsRequest_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_GetDeviceEventsRequest_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "GetDeviceEventsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IrregularProfileValues_unit(ctx context.Context, field graphql.CollectedField, obj *model.IrregularProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IrregularProfileValues_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IrregularProfileValues_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IrregularProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IrregularProfileValues_values(ctx context.Context, field graphql.CollectedField, obj *model.IrregularProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IrregularProfileValues_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IrregularValue)
	fc.Result = res
	return ec.marshalOIrregularValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IrregularProfileValues_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IrregularProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_IrregularValue_timestamp(ctx, field)
			case "value":
				return ec.fieldContext_IrregularValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IrregularValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IrregularValue_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.IrregularValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IrregularValue_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IrregularValue_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IrregularValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IrregularValue_value(ctx context.Context, field graphql.CollectedField, obj *model.IrregularValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_IrregularValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_IrregularValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IrregularValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "doubleValue":
				return ec.fieldContext_MeasuredValue_doubleValue(ctx, field)
			case "integerValue":
				return ec.fieldContext_MeasuredValue_integerValue(ctx, field)
			case "stringValue":
				return ec.fieldContext_MeasuredValue_stringValue(ctx, field)
			case "timestampValue":
				return ec.fieldContext_MeasuredValue_timestampValue(ctx, field)
			case "timestampTzValue":
				return ec.fieldContext_MeasuredValue_timestampTzValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_MeasuredValue_boolValue(ctx, field)
			case "nstatus":
				return ec.fieldContext_MeasuredValue_nstatus(ctx, field)
			case "peakTs":
				return ec.fieldContext_MeasuredValue_peakTs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_actionId(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_actionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_actionId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_getRegister(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_getRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetRegister)
	fc.Result = res
	return ec.marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_getRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dataType":
				return ec.fieldContext_ActionGetRegister_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_getPeriodicalProfile(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_getPeriodicalProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetPeriodicalProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetPeriodicalProfile)
	fc.Result = res
	return ec.marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_getPeriodicalProfile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
			case "dataType":
				return ec.fieldContext_ActionGetPeriodicalProfile_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetPeriodicalProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_getIrregularProfile(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_getIrregularProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetIrregularProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetIrregularProfile)
	fc.Result = res
	return ec.marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_getIrregularProfile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
			case "dataType":
				return ec.fieldContext_ActionGetIrregularProfile_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetIrregularProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_getEvents(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_getEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetEvents)
	fc.Result = res
	return ec.marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetEvents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_getEvents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetEvents_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetEvents_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetEvents", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_getDeviceInfo(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_getDeviceInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeviceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetDeviceInfo)
	fc.Result = res
	return ec.marshalOActionGetDeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetDeviceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_getDeviceInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetDeviceInfo__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetDeviceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_syncClock(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_syncClock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncClock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSyncClock)
	fc.Result = res
	return ec.marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSyncClock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_syncClock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSyncClock__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSyncClock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_setRelayState(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_setRelayState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetRelayState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetRelayState)
	fc.Result = res
	return ec.marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_setRelayState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetRelayState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetRelayState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_setDisconnectorState(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_setDisconnectorState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetDisconnectorState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetDisconnectorState)
	fc.Result = res
	return ec.marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_setDisconnectorState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetDisconnectorState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_getTou(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_getTou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetTou)
	fc.Result = res
	return ec.marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_getTou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "passive":
				return ec.fieldContext_ActionGetTou_passive(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_setTou(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_setTou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetTou)
	fc.Result = res
	return ec.marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_setTou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "table":
				return ec.fieldContext_ActionSetTou_table(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_setLimiter(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_setLimiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetLimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetLimiter)
	fc.Result = res
	return ec.marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetLimiter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_setLimiter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetLimiter__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetLimiter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_resetBillingPeriod(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_resetBillingPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResetBillingPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResetBillingPeriod)
	fc.Result = res
	return ec.marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_resetBillingPeriod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResetBillingPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobAction_fwUpdate(ctx context.Context, field graphql.CollectedField, obj *model.JobAction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobAction_fwUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FwUpdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionFwUpdate)
	fc.Result = res
	return ec.marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionFwUpdate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobAction_fwUpdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobAction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionFwUpdate__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionFwUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionAttributes_type(ctx context.Context, field graphql.CollectedField, obj *model.JobActionAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionAttributes_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionType)
	fc.Result = res
	return ec.marshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionAttributes_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionAttributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ActionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionAttributes_attributes(ctx context.Context, field graphql.CollectedField, obj *model.JobActionAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionAttributes_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionAttributes_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionAttributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionContraints_getRegisterTypeName(ctx context.Context, field graphql.CollectedField, obj *model.JobActionContraints) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionContraints_getRegisterTypeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegisterTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Mapstring)
	fc.Result = res
	return ec.marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionContraints_getRegisterTypeName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionContraints",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapstring_key(ctx, field)
			case "value":
				return ec.fieldContext__mapstring_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapstring", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionContraints_getRegisterTypeAttributes(ctx context.Context, field graphql.CollectedField, obj *model.JobActionContraints) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionContraints_getRegisterTypeAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegisterTypeAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapListOfString)
	fc.Result = res
	return ec.marshalO_mapListOfString2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapListOfString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionContraints_getRegisterTypeAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionContraints",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapListOfString_key(ctx, field)
			case "value":
				return ec.fieldContext__mapListOfString_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapListOfString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_variables(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_variables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variables, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_variables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_getRegister(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_getRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetRegister, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetRegister)
	fc.Result = res
	return ec.marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_getRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dataType":
				return ec.fieldContext_ActionGetRegister_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_getPeriodicalProfile(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_getPeriodicalProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetPeriodicalProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetPeriodicalProfile)
	fc.Result = res
	return ec.marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_getPeriodicalProfile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetPeriodicalProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetPeriodicalProfile_to(ctx, field)
			case "dataType":
				return ec.fieldContext_ActionGetPeriodicalProfile_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetPeriodicalProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_getIrregularProfile(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_getIrregularProfile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetIrregularProfile, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetIrregularProfile)
	fc.Result = res
	return ec.marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_getIrregularProfile(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetIrregularProfile_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetIrregularProfile_to(ctx, field)
			case "dataType":
				return ec.fieldContext_ActionGetIrregularProfile_dataType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetIrregularProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_getEvents(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_getEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetEvents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetEvents)
	fc.Result = res
	return ec.marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetEvents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_getEvents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "from":
				return ec.fieldContext_ActionGetEvents_from(ctx, field)
			case "to":
				return ec.fieldContext_ActionGetEvents_to(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetEvents", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_getDeviceInfo(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_getDeviceInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeviceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetDeviceInfo)
	fc.Result = res
	return ec.marshalOActionGetDeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetDeviceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_getDeviceInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionGetDeviceInfo__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetDeviceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_syncClock(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_syncClock(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SyncClock, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSyncClock)
	fc.Result = res
	return ec.marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSyncClock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_syncClock(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSyncClock__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSyncClock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_setRelayState(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_setRelayState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetRelayState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetRelayState)
	fc.Result = res
	return ec.marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_setRelayState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetRelayState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetRelayState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_setDisconnectorState(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_setDisconnectorState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetDisconnectorState, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetDisconnectorState)
	fc.Result = res
	return ec.marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_setDisconnectorState(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetDisconnectorState__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetDisconnectorState", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_getTou(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_getTou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionGetTou)
	fc.Result = res
	return ec.marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_getTou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "passive":
				return ec.fieldContext_ActionGetTou_passive(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionGetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_setTou(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_setTou(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetTou, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetTou)
	fc.Result = res
	return ec.marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetTou(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_setTou(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "table":
				return ec.fieldContext_ActionSetTou_table(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetTou", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_setLimiter(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_setLimiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SetLimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionSetLimiter)
	fc.Result = res
	return ec.marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetLimiter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_setLimiter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionSetLimiter__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionSetLimiter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_resetBillingPeriod(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_resetBillingPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResetBillingPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionResetBillingPeriod)
	fc.Result = res
	return ec.marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_resetBillingPeriod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionResetBillingPeriod__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResetBillingPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobActionSet_fwUpdate(ctx context.Context, field graphql.CollectedField, obj *model.JobActionSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobActionSet_fwUpdate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FwUpdate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ActionFwUpdate)
	fc.Result = res
	return ec.marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionFwUpdate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobActionSet_fwUpdate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobActionSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ActionFwUpdate__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionFwUpdate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_jobId(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_jobId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_jobId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_externalId(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_externalId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_externalId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_deviceAttributes(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_deviceAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceAttributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_deviceAttributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_connectionInfo(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_connectionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalOConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_connectionInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "tcpip":
				return ec.fieldContext_ConnectionInfo_tcpip(ctx, field)
			case "modemPool":
				return ec.fieldContext_ConnectionInfo_modemPool(ctx, field)
			case "serialOverIp":
				return ec.fieldContext_ConnectionInfo_serialOverIp(ctx, field)
			case "linkProtocol":
				return ec.fieldContext_ConnectionInfo_linkProtocol(ctx, field)
			case "communicationBusId":
				return ec.fieldContext_ConnectionInfo_communicationBusId(ctx, field)
			case "attributes":
				return ec.fieldContext_ConnectionInfo_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_appProtocol(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_appProtocol(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationProtocol)
	fc.Result = res
	return ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_appProtocol(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ApplicationProtocol does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDevice_timezone(ctx context.Context, field graphql.CollectedField, obj *model.JobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDevice_timezone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timezone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDevice_timezone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDeviceId_jobId(ctx context.Context, field graphql.CollectedField, obj *model.JobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDeviceId_jobId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JobID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDeviceId_jobId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobDeviceId_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.JobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobDeviceId_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobDeviceId_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_maxDuration(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_maxDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_maxDuration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_priority(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_priority(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobPriority)
	fc.Result = res
	return ec.marshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobPriority(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_priority(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobPriority does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_attempts(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_attempts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attempts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int32)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_attempts(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_retryDelay(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_retryDelay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetryDelay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_retryDelay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_deferStart(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_deferStart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeferStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_deferStart(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobSettings_expiresAt(ctx context.Context, field graphql.CollectedField, obj *model.JobSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobSettings_expiresAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiresAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobSettings_expiresAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobStatusCode)
	fc.Result = res
	return ec.marshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobStatusCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobStatusCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_code(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobErrorCode)
	fc.Result = res
	return ec.marshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobErrorCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type JobErrorCode does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_results(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ActionResult)
	fc.Result = res
	return ec.marshalOActionResult2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_results(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actionId":
				return ec.fieldContext_ActionResult_actionId(ctx, field)
			case "status":
				return ec.fieldContext_ActionResult_status(ctx, field)
			case "data":
				return ec.fieldContext_ActionResult_data(ctx, field)
			case "registerId":
				return ec.fieldContext_ActionResult_registerId(ctx, field)
			case "variableName":
				return ec.fieldContext_ActionResult_variableName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_startedAt(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_startedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_startedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_finishedAt(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_finishedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FinishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_finishedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_attemptsDone(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_attemptsDone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttemptsDone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_attemptsDone(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_deviceInfo(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_deviceInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceInfo)
	fc.Result = res
	return ec.marshalODeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_deviceInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "infoTimestamp":
				return ec.fieldContext_DeviceInfo_infoTimestamp(ctx, field)
			case "manufacturerSerialNumber":
				return ec.fieldContext_DeviceInfo_manufacturerSerialNumber(ctx, field)
			case "deviceSerialNumber":
				return ec.fieldContext_DeviceInfo_deviceSerialNumber(ctx, field)
			case "firmwareVersion":
				return ec.fieldContext_DeviceInfo_firmwareVersion(ctx, field)
			case "clockDelta":
				return ec.fieldContext_DeviceInfo_clockDelta(ctx, field)
			case "deviceModel":
				return ec.fieldContext_DeviceInfo_deviceModel(ctx, field)
			case "errorRegister":
				return ec.fieldContext_DeviceInfo_errorRegister(ctx, field)
			case "relayStates":
				return ec.fieldContext_DeviceInfo_relayStates(ctx, field)
			case "connectionState":
				return ec.fieldContext_DeviceInfo_connectionState(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobStatus_queueId(ctx context.Context, field graphql.CollectedField, obj *model.JobStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobStatus_queueId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueueID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobStatus_queueId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListBulkJobsRequest_bulkId(ctx context.Context, field graphql.CollectedField, obj *model.ListBulkJobsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListBulkJobsRequest_bulkId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BulkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListBulkJobsRequest_bulkId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListBulkJobsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListBulkJobsRequest_selector(ctx context.Context, field graphql.CollectedField, obj *model.ListBulkJobsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListBulkJobsRequest_selector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListSelector)
	fc.Result = res
	return ec.marshalOListSelector2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelector(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListBulkJobsRequest_selector(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListBulkJobsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageSize":
				return ec.fieldContext_ListSelector_pageSize(ctx, field)
			case "offset":
				return ec.fieldContext_ListSelector_offset(ctx, field)
			case "sortBy":
				return ec.fieldContext_ListSelector_sortBy(ctx, field)
			case "filterBy":
				return ec.fieldContext_ListSelector_filterBy(ctx, field)
			case "fields":
				return ec.fieldContext_ListSelector_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSelector", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListDeviceGroupDevicesRequest_groupId(ctx context.Context, field graphql.CollectedField, obj *model.ListDeviceGroupDevicesRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListDeviceGroupDevicesRequest_groupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListDeviceGroupDevicesRequest_groupId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListDeviceGroupDevicesRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListDeviceGroupDevicesRequest_selector(ctx context.Context, field graphql.CollectedField, obj *model.ListDeviceGroupDevicesRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListDeviceGroupDevicesRequest_selector(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selector, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListSelector)
	fc.Result = res
	return ec.marshalOListSelector2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelector(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListDeviceGroupDevicesRequest_selector(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListDeviceGroupDevicesRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "pageSize":
				return ec.fieldContext_ListSelector_pageSize(ctx, field)
			case "offset":
				return ec.fieldContext_ListSelector_offset(ctx, field)
			case "sortBy":
				return ec.fieldContext_ListSelector_sortBy(ctx, field)
			case "filterBy":
				return ec.fieldContext_ListSelector_filterBy(ctx, field)
			case "fields":
				return ec.fieldContext_ListSelector_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSelector", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListFieldDescriptorOptionsRequest_optionsSource(ctx context.Context, field graphql.CollectedField, obj *model.ListFieldDescriptorOptionsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListFieldDescriptorOptionsRequest_optionsSource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OptionsSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListFieldDescriptorOptionsRequest_optionsSource(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListFieldDescriptorOptionsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListFieldDescriptorOptionsRequest_filterContains(ctx context.Context, field graphql.CollectedField, obj *model.ListFieldDescriptorOptionsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListFieldDescriptorOptionsRequest_filterContains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterContains, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListFieldDescriptorOptionsRequest_filterContains(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListFieldDescriptorOptionsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfBulk_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfBulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfBulk_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Bulk)
	fc.Result = res
	return ec.marshalOBulk2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfBulk_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfBulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Bulk_spec(ctx, field)
			case "status":
				return ec.fieldContext_Bulk_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Bulk_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfBulk_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfBulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfBulk_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfBulk_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfBulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfBulkJob_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfBulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfBulkJob_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BulkJob)
	fc.Result = res
	return ec.marshalOBulkJob2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfBulkJob_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfBulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_BulkJob_spec(ctx, field)
			case "status":
				return ec.fieldContext_BulkJob_status(ctx, field)
			case "metadata":
				return ec.fieldContext_BulkJob_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfBulkJob_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfBulkJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfBulkJob_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfBulkJob_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfBulkJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCommunicationBus_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCommunicationBus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCommunicationBus_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationBus)
	fc.Result = res
	return ec.marshalOCommunicationBus2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationBus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCommunicationBus_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCommunicationBus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_CommunicationBus_status(ctx, field)
			case "metadata":
				return ec.fieldContext_CommunicationBus_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationBus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCommunicationBus_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCommunicationBus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCommunicationBus_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCommunicationBus_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCommunicationBus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCommunicationUnit_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCommunicationUnit_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommunicationUnit)
	fc.Result = res
	return ec.marshalOCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCommunicationUnit_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_CommunicationUnit_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_CommunicationUnit_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCommunicationUnit_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCommunicationUnit_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCommunicationUnit_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCronJob_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCronJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCronJob_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CronJob)
	fc.Result = res
	return ec.marshalOCronJob2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCronJob_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCronJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_CronJob_spec(ctx, field)
			case "status":
				return ec.fieldContext_CronJob_status(ctx, field)
			case "metadata":
				return ec.fieldContext_CronJob_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CronJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfCronJob_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfCronJob) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfCronJob_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfCronJob_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfCronJob",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDevice_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDevice_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDevice_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Device_spec(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Device_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDevice_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDevice_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDevice_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceCommunicationUnit_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceCommunicationUnit_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceCommunicationUnit_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communicationUnitId":
				return ec.fieldContext_DeviceCommunicationUnit_communicationUnitId(ctx, field)
			case "appProtocol":
				return ec.fieldContext_DeviceCommunicationUnit_appProtocol(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceCommunicationUnit_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceCommunicationUnit_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceCommunicationUnit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceCommunicationUnit_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceCommunicationUnit_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceCommunicationUnit",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceCommunicationUnitChange_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceCommunicationUnitChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceCommunicationUnitChange_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnitChange)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnitChange2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnitChange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceCommunicationUnitChange_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceCommunicationUnitChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_DeviceCommunicationUnitChange_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnitChange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceCommunicationUnitChange_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceCommunicationUnitChange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceCommunicationUnitChange_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceCommunicationUnitChange_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceCommunicationUnitChange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceConfigurationRegister_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceConfigurationRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceConfigurationRegister_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceConfigurationRegister)
	fc.Result = res
	return ec.marshalODeviceConfigurationRegister2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceConfigurationRegister_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceConfigurationRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceConfigurationRegister_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceConfigurationRegister_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceConfigurationRegister_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceConfigurationRegister) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceConfigurationRegister_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceConfigurationRegister_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceConfigurationRegister",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceConfigurationTemplate_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceConfigurationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceConfigurationTemplate_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceConfigurationTemplate)
	fc.Result = res
	return ec.marshalODeviceConfigurationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceConfigurationTemplate_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceConfigurationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceConfigurationTemplate_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceConfigurationTemplate_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceConfigurationTemplate_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceConfigurationTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceConfigurationTemplate_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceConfigurationTemplate_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceConfigurationTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceDataInfo_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceDataInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceDataInfo_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceDataInfo)
	fc.Result = res
	return ec.marshalODeviceDataInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceDataInfo_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceDataInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceDataInfo_spec(ctx, field)
			case "status":
				return ec.fieldContext_DeviceDataInfo_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceDataInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceDataInfo_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceDataInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceDataInfo_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceDataInfo_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceDataInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceGroup_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceGroup_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceGroup)
	fc.Result = res
	return ec.marshalODeviceGroup2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceGroup_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceGroup_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceGroup_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDeviceGroup_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDeviceGroup) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDeviceGroup_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDeviceGroup_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDeviceGroup",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDriver_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDriver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDriver_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Driver)
	fc.Result = res
	return ec.marshalODriver2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDriver_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDriver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Driver_spec(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfDriver_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfDriver) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfDriver_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfDriver_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfDriver",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfFieldDescriptor_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfFieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfFieldDescriptor_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldDescriptor)
	fc.Result = res
	return ec.marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfFieldDescriptor_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfFieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isUserDefined":
				return ec.fieldContext_FieldDescriptor_isUserDefined(ctx, field)
			case "objectType":
				return ec.fieldContext_FieldDescriptor_objectType(ctx, field)
			case "gid":
				return ec.fieldContext_FieldDescriptor_gid(ctx, field)
			case "fieldId":
				return ec.fieldContext_FieldDescriptor_fieldId(ctx, field)
			case "jsPath":
				return ec.fieldContext_FieldDescriptor_jsPath(ctx, field)
			case "path":
				return ec.fieldContext_FieldDescriptor_path(ctx, field)
			case "label":
				return ec.fieldContext_FieldDescriptor_label(ctx, field)
			case "groupId":
				return ec.fieldContext_FieldDescriptor_groupId(ctx, field)
			case "dataType":
				return ec.fieldContext_FieldDescriptor_dataType(ctx, field)
			case "format":
				return ec.fieldContext_FieldDescriptor_format(ctx, field)
			case "unit":
				return ec.fieldContext_FieldDescriptor_unit(ctx, field)
			case "precision":
				return ec.fieldContext_FieldDescriptor_precision(ctx, field)
			case "tooltip":
				return ec.fieldContext_FieldDescriptor_tooltip(ctx, field)
			case "required":
				return ec.fieldContext_FieldDescriptor_required(ctx, field)
			case "editable":
				return ec.fieldContext_FieldDescriptor_editable(ctx, field)
			case "visible":
				return ec.fieldContext_FieldDescriptor_visible(ctx, field)
			case "multiValue":
				return ec.fieldContext_FieldDescriptor_multiValue(ctx, field)
			case "secured":
				return ec.fieldContext_FieldDescriptor_secured(ctx, field)
			case "validation":
				return ec.fieldContext_FieldDescriptor_validation(ctx, field)
			case "defaultValue":
				return ec.fieldContext_FieldDescriptor_defaultValue(ctx, field)
			case "sortable":
				return ec.fieldContext_FieldDescriptor_sortable(ctx, field)
			case "filterable":
				return ec.fieldContext_FieldDescriptor_filterable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfFieldDescriptor_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfFieldDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfFieldDescriptor_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfFieldDescriptor_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfFieldDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfId_id(ctx context.Context, field graphql.CollectedField, obj *model.ListOfID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfId_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfId_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfJobDevice_list(ctx context.Context, field graphql.CollectedField, obj *model.ListOfJobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfJobDevice_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDevice)
	fc.Result = res
	return ec.marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfJobDevice_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfJobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "jobId":
				return ec.fieldContext_JobDevice_jobId(ctx, field)
			case "deviceId":
				return ec.fieldContext_JobDevice_deviceId(ctx, field)
			case "externalId":
				return ec.fieldContext_JobDevice_externalId(ctx, field)
			case "deviceAttributes":
				return ec.fieldContext_JobDevice_deviceAttributes(ctx, field)
			case "connectionInfo":
				return ec.fieldContext_JobDevice_connectionInfo(ctx, field)
			case "appProtocol":
				return ec.fieldContext_JobDevice_appProtocol(ctx, field)
			case "timezone":
				return ec.fieldContext_JobDevice_timezone(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfJobDevice_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfJobDevice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfJobDevice_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfJobDevice_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfJobDevice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfJobDeviceId_list(ctx context.Context, field graphql.CollectedField, obj *model.ListOfJobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfJobDeviceId_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobDeviceID)
	fc.Result = res
	return ec.marshalOJobDeviceId2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDeviceID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfJobDeviceId_list(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfJobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "jobId":
				return ec.fieldContext_JobDeviceId_jobId(ctx, field)
			case "deviceId":
				return ec.fieldContext_JobDeviceId_deviceId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobDeviceId", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfJobDeviceId_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfJobDeviceID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfJobDeviceId_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfJobDeviceId_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfJobDeviceId",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfModemPool_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfModemPool_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ModemPool)
	fc.Result = res
	return ec.marshalOModemPool2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfModemPool_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_ModemPool_spec(ctx, field)
			case "status":
				return ec.fieldContext_ModemPool_status(ctx, field)
			case "metadata":
				return ec.fieldContext_ModemPool_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfModemPool_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfModemPool_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfModemPool_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfString_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfString_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfString_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfTimeOfUseTable_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfTimeOfUseTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfTimeOfUseTable_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TimeOfUseTable)
	fc.Result = res
	return ec.marshalOTimeOfUseTable2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfTimeOfUseTable_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfTimeOfUseTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_TimeOfUseTable_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_TimeOfUseTable_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeOfUseTable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfTimeOfUseTable_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfTimeOfUseTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfTimeOfUseTable_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfTimeOfUseTable_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfTimeOfUseTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfVariable_items(ctx context.Context, field graphql.CollectedField, obj *model.ListOfVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfVariable_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Variable)
	fc.Result = res
	return ec.marshalOVariable2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfVariable_items(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Variable_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_Variable_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Variable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListOfVariable_totalCount(ctx context.Context, field graphql.CollectedField, obj *model.ListOfVariable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListOfVariable_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListOfVariable_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListOfVariable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_pageSize(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_pageSize(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_pageSize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_offset(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_offset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_offset(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_sortBy(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_sortBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListSelectorSortBy)
	fc.Result = res
	return ec.marshalOListSelectorSortBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorSortBy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_sortBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "path":
				return ec.fieldContext_ListSelectorSortBy_path(ctx, field)
			case "desc":
				return ec.fieldContext_ListSelectorSortBy_desc(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSelectorSortBy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_filterBy(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_filterBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListSelectorFilterBy)
	fc.Result = res
	return ec.marshalOListSelectorFilterBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorFilterBy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_filterBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "path":
				return ec.fieldContext_ListSelectorFilterBy_path(ctx, field)
			case "operator":
				return ec.fieldContext_ListSelectorFilterBy_operator(ctx, field)
			case "dataType":
				return ec.fieldContext_ListSelectorFilterBy_dataType(ctx, field)
			case "text":
				return ec.fieldContext_ListSelectorFilterBy_text(ctx, field)
			case "integer":
				return ec.fieldContext_ListSelectorFilterBy_integer(ctx, field)
			case "number":
				return ec.fieldContext_ListSelectorFilterBy_number(ctx, field)
			case "boolean":
				return ec.fieldContext_ListSelectorFilterBy_boolean(ctx, field)
			case "date":
				return ec.fieldContext_ListSelectorFilterBy_date(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListSelectorFilterBy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelector_fields(ctx context.Context, field graphql.CollectedField, obj *model.ListSelector) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelector_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelector_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelector",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_path(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_operator(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_operator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FilterOperator)
	fc.Result = res
	return ec.marshalOFilterOperator2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFilterOperator(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_operator(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FilterOperator does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_dataType(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_text(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_text(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_integer(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_integer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Integer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int64)
	fc.Result = res
	return ec.marshalOInt642ᚕᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_integer(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_number(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_number(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚕᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_number(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_boolean(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_boolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Boolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚕᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_boolean(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorFilterBy_date(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorFilterBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorFilterBy_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorFilterBy_date(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorFilterBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorSortBy_path(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorSortBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorSortBy_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorSortBy_path(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorSortBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListSelectorSortBy_desc(ctx context.Context, field graphql.CollectedField, obj *model.ListSelectorSortBy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListSelectorSortBy_desc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListSelectorSortBy_desc(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListSelectorSortBy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListValue_values(ctx context.Context, field graphql.CollectedField, obj *model.ListValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListValue_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Value)
	fc.Result = res
	return ec.marshalOValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListValue_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nullValue":
				return ec.fieldContext_Value_nullValue(ctx, field)
			case "numberValue":
				return ec.fieldContext_Value_numberValue(ctx, field)
			case "stringValue":
				return ec.fieldContext_Value_stringValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_Value_boolValue(ctx, field)
			case "structValue":
				return ec.fieldContext_Value_structValue(ctx, field)
			case "listValue":
				return ec.fieldContext_Value_listValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Value", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_status(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_exponent(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_exponent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exponent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_exponent(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_doubleValue(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_doubleValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoubleValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_doubleValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_integerValue(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_integerValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IntegerValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_integerValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_stringValue(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_stringValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_stringValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_timestampValue(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_timestampValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_timestampValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_timestampTzValue(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_timestampTzValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampTzValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_timestampTzValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_boolValue(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_boolValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_boolValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_nstatus(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_nstatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nstatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOBigInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_nstatus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BigInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MeasuredValue_peakTs(ctx context.Context, field graphql.CollectedField, obj *model.MeasuredValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MeasuredValue_peakTs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeakTs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MeasuredValue_peakTs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MeasuredValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_id(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_generation(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_generation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Generation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_generation(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_fields(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_managedFields(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_managedFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagedFields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_managedFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MetadataFields_name(ctx context.Context, field graphql.CollectedField, obj *model.MetadataFields) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MetadataFields_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MetadataFields_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MetadataFields",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_modemId(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_modemId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_modemId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_atInit(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_atInit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtInit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_atInit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_atDial(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_atDial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtDial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_atDial(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_atHangup(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_atHangup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtHangup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_atHangup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_atEscape(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_atEscape(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AtEscape, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_atEscape(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_connectTimeout(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_connectTimeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_connectTimeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_commandTimeout(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_commandTimeout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommandTimeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Duration)
	fc.Result = res
	return ec.marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_commandTimeout(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "seconds":
				return ec.fieldContext_Duration_seconds(ctx, field)
			case "nanos":
				return ec.fieldContext_Duration_nanos(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Duration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_tcpip(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_tcpip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tcpip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeDirectTCPIP)
	fc.Result = res
	return ec.marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_tcpip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "host":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_port(ctx, field)
			case "timeout":
				return ec.fieldContext_ConnectionTypeDirectTcpIp_timeout(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeDirectTcpIp", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_serialOverIp(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_serialOverIp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialOverIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionTypeControlledSerial)
	fc.Result = res
	return ec.marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_serialOverIp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "direct":
				return ec.fieldContext_ConnectionTypeControlledSerial_direct(ctx, field)
			case "moxa":
				return ec.fieldContext_ConnectionTypeControlledSerial_moxa(ctx, field)
			case "rfc2217":
				return ec.fieldContext_ConnectionTypeControlledSerial_rfc2217(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionTypeControlledSerial", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemInfo_serialBaudRate(ctx context.Context, field graphql.CollectedField, obj *model.ModemInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemInfo_serialBaudRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SerialBaudRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemInfo_serialBaudRate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPool_spec(ctx context.Context, field graphql.CollectedField, obj *model.ModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPool_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPoolSpec)
	fc.Result = res
	return ec.marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPoolSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPool_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ModemPoolSpec__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPool_status(ctx context.Context, field graphql.CollectedField, obj *model.ModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPool_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPoolStatus)
	fc.Result = res
	return ec.marshalOModemPoolStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPoolStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPool_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modems":
				return ec.fieldContext_ModemPoolStatus_modems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPool_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ModemPool) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPool_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPool_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPool",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolSpec__empty(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolSpec__empty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Empty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolSpec__empty(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ModemPoolStatus_modems(ctx context.Context, field graphql.CollectedField, obj *model.ModemPoolStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ModemPoolStatus_modems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ModemPoolStatus_modems(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ModemPoolStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modemId":
				return ec.fieldContext_ModemInfo_modemId(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "atInit":
				return ec.fieldContext_ModemInfo_atInit(ctx, field)
			case "atDial":
				return ec.fieldContext_ModemInfo_atDial(ctx, field)
			case "atHangup":
				return ec.fieldContext_ModemInfo_atHangup(ctx, field)
			case "atEscape":
				return ec.fieldContext_ModemInfo_atEscape(ctx, field)
			case "connectTimeout":
				return ec.fieldContext_ModemInfo_connectTimeout(ctx, field)
			case "commandTimeout":
				return ec.fieldContext_ModemInfo_commandTimeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			case "serialOverIp":
				return ec.fieldContext_ModemInfo_serialOverIp(ctx, field)
			case "serialBaudRate":
				return ec.fieldContext_ModemInfo_serialBaudRate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMap_nodes(ctx context.Context, field graphql.CollectedField, obj *model.NetworkMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMap_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TopologyNode)
	fc.Result = res
	return ec.marshalOTopologyNode2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMap_nodes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "xId":
				return ec.fieldContext_TopologyNode_xId(ctx, field)
			case "type":
				return ec.fieldContext_TopologyNode_type(ctx, field)
			case "attributes":
				return ec.fieldContext_TopologyNode_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopologyNode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkMap_edges(ctx context.Context, field graphql.CollectedField, obj *model.NetworkMap) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkMap_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TopologyEdge)
	fc.Result = res
	return ec.marshalOTopologyEdge2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkMap_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkMap",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fromXId":
				return ec.fieldContext_TopologyEdge_fromXId(ctx, field)
			case "toXId":
				return ec.fieldContext_TopologyEdge_toXId(ctx, field)
			case "attributes":
				return ec.fieldContext_TopologyEdge_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TopologyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OpenIdConfiguration_content(ctx context.Context, field graphql.CollectedField, obj *model.OpenIDConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OpenIdConfiguration_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OpenIdConfiguration_content(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OpenIdConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileBlock_startTimestamp(ctx context.Context, field graphql.CollectedField, obj *model.ProfileBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileBlock_startTimestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartTimestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileBlock_startTimestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileBlock_values(ctx context.Context, field graphql.CollectedField, obj *model.ProfileBlock) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileBlock_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileBlock_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileBlock",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "doubleValue":
				return ec.fieldContext_MeasuredValue_doubleValue(ctx, field)
			case "integerValue":
				return ec.fieldContext_MeasuredValue_integerValue(ctx, field)
			case "stringValue":
				return ec.fieldContext_MeasuredValue_stringValue(ctx, field)
			case "timestampValue":
				return ec.fieldContext_MeasuredValue_timestampValue(ctx, field)
			case "timestampTzValue":
				return ec.fieldContext_MeasuredValue_timestampTzValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_MeasuredValue_boolValue(ctx, field)
			case "nstatus":
				return ec.fieldContext_MeasuredValue_nstatus(ctx, field)
			case "peakTs":
				return ec.fieldContext_MeasuredValue_peakTs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_period(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_period(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_unit(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProfileValues_blocks(ctx context.Context, field graphql.CollectedField, obj *model.ProfileValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProfileValues_blocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ProfileBlock)
	fc.Result = res
	return ec.marshalOProfileBlock2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileBlock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProfileValues_blocks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProfileValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "startTimestamp":
				return ec.fieldContext_ProfileBlock_startTimestamp(ctx, field)
			case "values":
				return ec.fieldContext_ProfileBlock_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileBlock", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulk_spec(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulk_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProxyBulkSpec)
	fc.Result = res
	return ec.marshalOProxyBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProxyBulkSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulk_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "correlationId":
				return ec.fieldContext_ProxyBulkSpec_correlationId(ctx, field)
			case "driverType":
				return ec.fieldContext_ProxyBulkSpec_driverType(ctx, field)
			case "devices":
				return ec.fieldContext_ProxyBulkSpec_devices(ctx, field)
			case "settings":
				return ec.fieldContext_ProxyBulkSpec_settings(ctx, field)
			case "actions":
				return ec.fieldContext_ProxyBulkSpec_actions(ctx, field)
			case "webhookUrl":
				return ec.fieldContext_ProxyBulkSpec_webhookUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProxyBulkSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulk_status(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulk_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkStatus)
	fc.Result = res
	return ec.marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulk_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_BulkStatus_status(ctx, field)
			case "jobsCount":
				return ec.fieldContext_BulkStatus_jobsCount(ctx, field)
			case "jobsFinished":
				return ec.fieldContext_BulkStatus_jobsFinished(ctx, field)
			case "jobsSuccessful":
				return ec.fieldContext_BulkStatus_jobsSuccessful(ctx, field)
			case "createdAt":
				return ec.fieldContext_BulkStatus_createdAt(ctx, field)
			case "startedAt":
				return ec.fieldContext_BulkStatus_startedAt(ctx, field)
			case "finishedAt":
				return ec.fieldContext_BulkStatus_finishedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulk_metadata(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulk) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulk_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulk_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulk",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulkSpec_correlationId(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulkSpec_correlationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CorrelationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*uuid.UUID)
	fc.Result = res
	return ec.marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulkSpec_correlationId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulkSpec_driverType(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulkSpec_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulkSpec_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulkSpec_devices(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulkSpec_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfJobDevice)
	fc.Result = res
	return ec.marshalOListOfJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfJobDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulkSpec_devices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "list":
				return ec.fieldContext_ListOfJobDevice_list(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfJobDevice_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfJobDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulkSpec_settings(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulkSpec_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Settings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobSettings)
	fc.Result = res
	return ec.marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulkSpec_settings(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "maxDuration":
				return ec.fieldContext_JobSettings_maxDuration(ctx, field)
			case "priority":
				return ec.fieldContext_JobSettings_priority(ctx, field)
			case "attempts":
				return ec.fieldContext_JobSettings_attempts(ctx, field)
			case "retryDelay":
				return ec.fieldContext_JobSettings_retryDelay(ctx, field)
			case "deferStart":
				return ec.fieldContext_JobSettings_deferStart(ctx, field)
			case "expiresAt":
				return ec.fieldContext_JobSettings_expiresAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulkSpec_actions(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulkSpec_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.JobAction)
	fc.Result = res
	return ec.marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobAction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulkSpec_actions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "actionId":
				return ec.fieldContext_JobAction_actionId(ctx, field)
			case "attributes":
				return ec.fieldContext_JobAction_attributes(ctx, field)
			case "getRegister":
				return ec.fieldContext_JobAction_getRegister(ctx, field)
			case "getPeriodicalProfile":
				return ec.fieldContext_JobAction_getPeriodicalProfile(ctx, field)
			case "getIrregularProfile":
				return ec.fieldContext_JobAction_getIrregularProfile(ctx, field)
			case "getEvents":
				return ec.fieldContext_JobAction_getEvents(ctx, field)
			case "getDeviceInfo":
				return ec.fieldContext_JobAction_getDeviceInfo(ctx, field)
			case "syncClock":
				return ec.fieldContext_JobAction_syncClock(ctx, field)
			case "setRelayState":
				return ec.fieldContext_JobAction_setRelayState(ctx, field)
			case "setDisconnectorState":
				return ec.fieldContext_JobAction_setDisconnectorState(ctx, field)
			case "getTou":
				return ec.fieldContext_JobAction_getTou(ctx, field)
			case "setTou":
				return ec.fieldContext_JobAction_setTou(ctx, field)
			case "setLimiter":
				return ec.fieldContext_JobAction_setLimiter(ctx, field)
			case "resetBillingPeriod":
				return ec.fieldContext_JobAction_resetBillingPeriod(ctx, field)
			case "fwUpdate":
				return ec.fieldContext_JobAction_fwUpdate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobAction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProxyBulkSpec_webhookUrl(ctx context.Context, field graphql.CollectedField, obj *model.ProxyBulkSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProxyBulkSpec_webhookUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProxyBulkSpec_webhookUrl(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProxyBulkSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listBulks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listBulks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListBulks(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfBulk)
	fc.Result = res
	return ec.marshalOListOfBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listBulks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfBulk_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfBulk_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfBulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listBulkJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listBulkJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListBulkJobs(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfBulkJob)
	fc.Result = res
	return ec.marshalOListOfBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfBulkJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listBulkJobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfBulkJob_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfBulkJob_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfBulkJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBulkJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBulkJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBulkJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BulkJob)
	fc.Result = res
	return ec.marshalOBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBulkJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_BulkJob_spec(ctx, field)
			case "status":
				return ec.fieldContext_BulkJob_status(ctx, field)
			case "metadata":
				return ec.fieldContext_BulkJob_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BulkJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateBulkJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateBulkJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateBulkJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateBulkJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancelBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancelBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancelBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancelBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_cancelBulkJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_cancelBulkJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CancelBulkJobs(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_cancelBulkJobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createProxyBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createProxyBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateProxyBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createProxyBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getProxyBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getProxyBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetProxyBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProxyBulk)
	fc.Result = res
	return ec.marshalOProxyBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProxyBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getProxyBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_ProxyBulk_spec(ctx, field)
			case "status":
				return ec.fieldContext_ProxyBulk_status(ctx, field)
			case "metadata":
				return ec.fieldContext_ProxyBulk_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProxyBulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Bulk)
	fc.Result = res
	return ec.marshalOBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulk(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Bulk_spec(ctx, field)
			case "status":
				return ec.fieldContext_Bulk_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Bulk_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Bulk", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateBulk(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateBulk(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateBulk(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateBulk(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceBulks(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceBulks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceBulks(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceBulks)
	fc.Result = res
	return ec.marshalODeviceBulks2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceBulks(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceBulks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "bulks":
				return ec.fieldContext_DeviceBulks_bulks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceBulks", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getApplicationConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getApplicationConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetApplicationConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ApplicationConfigDescriptor)
	fc.Result = res
	return ec.marshalOApplicationConfigDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationConfigDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getApplicationConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "descriptors":
				return ec.fieldContext_ApplicationConfigDescriptor_descriptors(ctx, field)
			case "items":
				return ec.fieldContext_ApplicationConfigDescriptor_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApplicationConfigDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateApplicationConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateApplicationConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateApplicationConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateApplicationConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_synchronizeComponentConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_synchronizeComponentConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SynchronizeComponentConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ComponentConfig)
	fc.Result = res
	return ec.marshalOComponentConfig2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_synchronizeComponentConfig(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ComponentConfig_name(ctx, field)
			case "items":
				return ec.fieldContext_ComponentConfig_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ComponentConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCronJobs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCronJobs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCronJobs(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfCronJob)
	fc.Result = res
	return ec.marshalOListOfCronJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfCronJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCronJobs(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfCronJob_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfCronJob_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfCronJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CronJob)
	fc.Result = res
	return ec.marshalOCronJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJob(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_CronJob_spec(ctx, field)
			case "status":
				return ec.fieldContext_CronJob_status(ctx, field)
			case "metadata":
				return ec.fieldContext_CronJob_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CronJob", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_runCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_runCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RunCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_runCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_pauseCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pauseCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PauseCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pauseCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_resumeCronJob(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_resumeCronJob(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ResumeCronJob(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_resumeCronJob(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCryptoSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCryptoSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCryptoSecret(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CryptoSecrets)
	fc.Result = res
	return ec.marshalOCryptoSecrets2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCryptoSecrets(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCryptoSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "secrets":
				return ec.fieldContext_CryptoSecrets_secrets(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CryptoSecrets", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_setCryptoSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setCryptoSecret(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetCryptoSecret(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setCryptoSecret(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDeviceConfigurationRegister(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDeviceConfigurationRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDeviceConfigurationRegister(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDeviceConfigurationRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceConfigurationRegisters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceConfigurationRegisters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceConfigurationRegisters(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceConfigurationRegister)
	fc.Result = res
	return ec.marshalOListOfDeviceConfigurationRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceConfigurationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceConfigurationRegisters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceConfigurationRegister_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceConfigurationRegister_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceConfigurationRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceConfigurationRegister(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceConfigurationRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceConfigurationRegister(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceConfigurationRegister)
	fc.Result = res
	return ec.marshalODeviceConfigurationRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegister(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceConfigurationRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceConfigurationRegister_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceConfigurationRegister_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationRegister", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateDeviceConfigurationRegister(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateDeviceConfigurationRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateDeviceConfigurationRegister(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateDeviceConfigurationRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteDeviceConfigurationRegister(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteDeviceConfigurationRegister(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteDeviceConfigurationRegister(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteDeviceConfigurationRegister(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDeviceConfigurationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDeviceConfigurationTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDeviceConfigurationTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDeviceConfigurationTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceConfigurationTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceConfigurationTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceConfigurationTemplates(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceConfigurationTemplate)
	fc.Result = res
	return ec.marshalOListOfDeviceConfigurationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceConfigurationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceConfigurationTemplates(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceConfigurationTemplate_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceConfigurationTemplate_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceConfigurationTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceConfigurationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceConfigurationTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceConfigurationTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceConfigurationTemplate)
	fc.Result = res
	return ec.marshalODeviceConfigurationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceConfigurationTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceConfigurationTemplate_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceConfigurationTemplate_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceConfigurationTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateDeviceConfigurationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateDeviceConfigurationTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateDeviceConfigurationTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateDeviceConfigurationTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteDeviceConfigurationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteDeviceConfigurationTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteDeviceConfigurationTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteDeviceConfigurationTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_addDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_addDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_addDeviceConfigurationRegisterToDeviceConfigurationTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceData(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceData)
	fc.Result = res
	return ec.marshalODeviceData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceData(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "devices":
				return ec.fieldContext_DeviceData_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceDataInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceDataInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceDataInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceDataInfo)
	fc.Result = res
	return ec.marshalOListOfDeviceDataInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceDataInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceDataInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceDataInfo_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceDataInfo_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceDataInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceDataRegisters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceDataRegisters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceDataRegisters(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegisterValues)
	fc.Result = res
	return ec.marshalORegisterValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceDataRegisters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "values":
				return ec.fieldContext_RegisterValues_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceDataProfiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceDataProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceDataProfiles(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProfileValues)
	fc.Result = res
	return ec.marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceDataProfiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "period":
				return ec.fieldContext_ProfileValues_period(ctx, field)
			case "unit":
				return ec.fieldContext_ProfileValues_unit(ctx, field)
			case "blocks":
				return ec.fieldContext_ProfileValues_blocks(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProfileValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceDataIrregularProfiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceDataIrregularProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceDataIrregularProfiles(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IrregularProfileValues)
	fc.Result = res
	return ec.marshalOIrregularProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularProfileValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceDataIrregularProfiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "unit":
				return ec.fieldContext_IrregularProfileValues_unit(ctx, field)
			case "values":
				return ec.fieldContext_IrregularProfileValues_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IrregularProfileValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceEvents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceEvents(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceEvents)
	fc.Result = res
	return ec.marshalODeviceEvents2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceEvents(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceEvents(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "events":
				return ec.fieldContext_DeviceEvents_events(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceEvents", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfCommunicationUnit)
	fc.Result = res
	return ec.marshalOListOfCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfCommunicationUnit_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfCommunicationUnit_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommunicationUnit)
	fc.Result = res
	return ec.marshalOCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_CommunicationUnit_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_CommunicationUnit_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteCommunicationUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteCommunicationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteCommunicationUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteCommunicationUnit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getCommunicationUnitNetworkMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getCommunicationUnitNetworkMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCommunicationUnitNetworkMap(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NetworkMap)
	fc.Result = res
	return ec.marshalONetworkMap2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐNetworkMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getCommunicationUnitNetworkMap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodes":
				return ec.fieldContext_NetworkMap_nodes(ctx, field)
			case "edges":
				return ec.fieldContext_NetworkMap_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createCommunicationBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createCommunicationBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateCommunicationBus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createCommunicationBus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listCommunicationBuses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listCommunicationBuses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListCommunicationBuses(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfCommunicationBus)
	fc.Result = res
	return ec.marshalOListOfCommunicationBus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfCommunicationBus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listCommunicationBuses(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfCommunicationBus_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfCommunicationBus_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfCommunicationBus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteCommunicationBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteCommunicationBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteCommunicationBus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteCommunicationBus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_addCommunicationUnitsToCommunicationBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_addCommunicationUnitsToCommunicationBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddCommunicationUnitsToCommunicationBus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_addCommunicationUnitsToCommunicationBus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_removeCommunicationUnitsFromCommunicationBus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_removeCommunicationUnitsFromCommunicationBus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RemoveCommunicationUnitsFromCommunicationBus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_removeCommunicationUnitsFromCommunicationBus(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDevices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDevices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDevice)
	fc.Result = res
	return ec.marshalOListOfDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDevices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDevice_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDevice_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Device_spec(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "metadata":
				return ec.fieldContext_Device_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteDevice(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteDevice(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceInfo)
	fc.Result = res
	return ec.marshalODeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "infoTimestamp":
				return ec.fieldContext_DeviceInfo_infoTimestamp(ctx, field)
			case "manufacturerSerialNumber":
				return ec.fieldContext_DeviceInfo_manufacturerSerialNumber(ctx, field)
			case "deviceSerialNumber":
				return ec.fieldContext_DeviceInfo_deviceSerialNumber(ctx, field)
			case "firmwareVersion":
				return ec.fieldContext_DeviceInfo_firmwareVersion(ctx, field)
			case "clockDelta":
				return ec.fieldContext_DeviceInfo_clockDelta(ctx, field)
			case "deviceModel":
				return ec.fieldContext_DeviceInfo_deviceModel(ctx, field)
			case "errorRegister":
				return ec.fieldContext_DeviceInfo_errorRegister(ctx, field)
			case "relayStates":
				return ec.fieldContext_DeviceInfo_relayStates(ctx, field)
			case "connectionState":
				return ec.fieldContext_DeviceInfo_connectionState(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_setDeviceCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setDeviceCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetDeviceCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setDeviceCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceCommunicationUnits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceCommunicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceCommunicationUnits(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalOListOfDeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceCommunicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceCommunicationUnit_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceCommunicationUnit_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceCommunicationUnitChanges(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceCommunicationUnitChanges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceCommunicationUnitChanges(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceCommunicationUnitChange)
	fc.Result = res
	return ec.marshalOListOfDeviceCommunicationUnitChange2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceCommunicationUnitChange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceCommunicationUnitChanges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceCommunicationUnitChange_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceCommunicationUnitChange_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceCommunicationUnitChange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceDeviceGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceDeviceGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceDeviceGroups(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceGroup)
	fc.Result = res
	return ec.marshalOListOfDeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceDeviceGroups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceGroup_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceGroup_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceNetworkMap(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceNetworkMap(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceNetworkMap(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NetworkMap)
	fc.Result = res
	return ec.marshalONetworkMap2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐNetworkMap(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceNetworkMap(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodes":
				return ec.fieldContext_NetworkMap_nodes(ctx, field)
			case "edges":
				return ec.fieldContext_NetworkMap_edges(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkMap", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceGroups(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceGroups(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceGroups(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDeviceGroup)
	fc.Result = res
	return ec.marshalOListOfDeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceGroups(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDeviceGroup_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDeviceGroup_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceGroup)
	fc.Result = res
	return ec.marshalODeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroup(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_DeviceGroup_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_DeviceGroup_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceGroup", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteDeviceGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteDeviceGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteDeviceGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteDeviceGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_addDevicesToGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_addDevicesToGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddDevicesToGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_addDevicesToGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_removeDevicesFromGroup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_removeDevicesFromGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RemoveDevicesFromGroup(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_removeDevicesFromGroup(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDeviceGroupDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDeviceGroupDevices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDeviceGroupDevices(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDevice)
	fc.Result = res
	return ec.marshalOListOfDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDeviceGroupDevices(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDevice_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDevice_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDevice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listModemPools(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listModemPools(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListModemPools(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfModemPool)
	fc.Result = res
	return ec.marshalOListOfModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listModemPools(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfModemPool_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfModemPool_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPool)
	fc.Result = res
	return ec.marshalOModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_ModemPool_spec(ctx, field)
			case "status":
				return ec.fieldContext_ModemPool_status(ctx, field)
			case "metadata":
				return ec.fieldContext_ModemPool_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPool", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteModemPool(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteModemPool(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteModemPool(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteModemPool(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteModem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteModem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteModem(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteModem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listDrivers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListDrivers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfDriver)
	fc.Result = res
	return ec.marshalOListOfDriver2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDriver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listDrivers(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfDriver_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfDriver_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfDriver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getDriver(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDriver(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Driver)
	fc.Result = res
	return ec.marshalODriver2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriver(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getDriver(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Driver_spec(ctx, field)
			case "status":
				return ec.fieldContext_Driver_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Driver", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createFieldDescriptor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createFieldDescriptor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateFieldDescriptor(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createFieldDescriptor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateFieldDescriptor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateFieldDescriptor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateFieldDescriptor(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateFieldDescriptor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteFieldDescriptor(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteFieldDescriptor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteFieldDescriptor(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteFieldDescriptor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listFieldDescriptors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listFieldDescriptors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListFieldDescriptors(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfFieldDescriptor)
	fc.Result = res
	return ec.marshalOListOfFieldDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfFieldDescriptor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listFieldDescriptors(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfFieldDescriptor_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfFieldDescriptor_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfFieldDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listFieldDescriptorOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listFieldDescriptorOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListFieldDescriptorOptions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDescriptorOptions)
	fc.Result = res
	return ec.marshalOFieldDescriptorOptions2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptorOptions(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listFieldDescriptorOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "options":
				return ec.fieldContext_FieldDescriptorOptions_options(ctx, field)
			case "complete":
				return ec.fieldContext_FieldDescriptorOptions_complete(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldDescriptorOptions", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateObjectFields(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateObjectFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateObjectFields(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateObjectFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getOpenIdConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getOpenIdConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOpenIDConfiguration(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OpenIDConfiguration)
	fc.Result = res
	return ec.marshalOOpenIdConfiguration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐOpenIDConfiguration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getOpenIdConfiguration(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "content":
				return ec.fieldContext_OpenIdConfiguration_content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OpenIdConfiguration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createTimeOfUseTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createTimeOfUseTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateTimeOfUseTable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createTimeOfUseTable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listTimeOfUseTables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listTimeOfUseTables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListTimeOfUseTables(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfTimeOfUseTable)
	fc.Result = res
	return ec.marshalOListOfTimeOfUseTable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfTimeOfUseTable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listTimeOfUseTables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfTimeOfUseTable_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfTimeOfUseTable_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfTimeOfUseTable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getTimeOfUseTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getTimeOfUseTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetTimeOfUseTable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeOfUseTable)
	fc.Result = res
	return ec.marshalOTimeOfUseTable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getTimeOfUseTable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_TimeOfUseTable_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_TimeOfUseTable_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeOfUseTable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateTimeOfUseTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateTimeOfUseTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateTimeOfUseTable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateTimeOfUseTable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteTimeOfUseTable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteTimeOfUseTable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteTimeOfUseTable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteTimeOfUseTable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createVariable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createVariable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateVariable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.StringValue)
	fc.Result = res
	return ec.marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createVariable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_StringValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type StringValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listVariables(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listVariables(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListVariables(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfVariable)
	fc.Result = res
	return ec.marshalOListOfVariable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listVariables(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfVariable_items(ctx, field)
			case "totalCount":
				return ec.fieldContext_ListOfVariable_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfVariable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_getVariable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getVariable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVariable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Variable)
	fc.Result = res
	return ec.marshalOVariable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariable(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getVariable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "spec":
				return ec.fieldContext_Variable_spec(ctx, field)
			case "metadata":
				return ec.fieldContext_Variable_metadata(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Variable", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateVariable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateVariable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateVariable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateVariable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteVariable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteVariable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteVariable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteVariable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_addRegisterToVariable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_addRegisterToVariable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AddRegisterToVariable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_addRegisterToVariable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_removeRegisterFromVariable(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_removeRegisterFromVariable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RemoveRegisterFromVariable(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Empty)
	fc.Result = res
	return ec.marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_removeRegisterFromVariable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_Empty__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Empty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterValue_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.RegisterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterValue_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterValue_timestamp(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterValue_unit(ctx context.Context, field graphql.CollectedField, obj *model.RegisterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterValue_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterValue_unit(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterValue_value(ctx context.Context, field graphql.CollectedField, obj *model.RegisterValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "doubleValue":
				return ec.fieldContext_MeasuredValue_doubleValue(ctx, field)
			case "integerValue":
				return ec.fieldContext_MeasuredValue_integerValue(ctx, field)
			case "stringValue":
				return ec.fieldContext_MeasuredValue_stringValue(ctx, field)
			case "timestampValue":
				return ec.fieldContext_MeasuredValue_timestampValue(ctx, field)
			case "timestampTzValue":
				return ec.fieldContext_MeasuredValue_timestampTzValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_MeasuredValue_boolValue(ctx, field)
			case "nstatus":
				return ec.fieldContext_MeasuredValue_nstatus(ctx, field)
			case "peakTs":
				return ec.fieldContext_MeasuredValue_peakTs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegisterValues_values(ctx context.Context, field graphql.CollectedField, obj *model.RegisterValues) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegisterValues_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegisterValue)
	fc.Result = res
	return ec.marshalORegisterValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegisterValues_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegisterValues",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timestamp":
				return ec.fieldContext_RegisterValue_timestamp(ctx, field)
			case "unit":
				return ec.fieldContext_RegisterValue_unit(ctx, field)
			case "value":
				return ec.fieldContext_RegisterValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegisterValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelayStateRecord_relayId(ctx context.Context, field graphql.CollectedField, obj *model.RelayStateRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelayStateRecord_relayId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelayID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelayStateRecord_relayId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelayStateRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RelayStateRecord_state(ctx context.Context, field graphql.CollectedField, obj *model.RelayStateRecord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RelayStateRecord_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RelayState)
	fc.Result = res
	return ec.marshalORelayState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RelayStateRecord_state(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RelayStateRecord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type RelayState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveCommunicationUnitsFromCommunicationBusRequest_communicationBusId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveCommunicationUnitsFromCommunicationBusRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveCommunicationUnitsFromCommunicationBusRequest_communicationBusId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationBusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveCommunicationUnitsFromCommunicationBusRequest_communicationBusId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveCommunicationUnitsFromCommunicationBusRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveCommunicationUnitsFromCommunicationBusRequest_communicationUnitId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveCommunicationUnitsFromCommunicationBusRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveCommunicationUnitsFromCommunicationBusRequest_communicationUnitId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveCommunicationUnitsFromCommunicationBusRequest_communicationUnitId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveCommunicationUnitsFromCommunicationBusRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_dctId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_dctId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DctID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_dctId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_registerId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDevicesFromGroupRequest_groupId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDevicesFromGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDevicesFromGroupRequest_groupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDevicesFromGroupRequest_groupId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDevicesFromGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveDevicesFromGroupRequest_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveDevicesFromGroupRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveDevicesFromGroupRequest_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveDevicesFromGroupRequest_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveDevicesFromGroupRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveRegisterFromVariableRequest_variableId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveRegisterFromVariableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveRegisterFromVariableRequest_variableId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveRegisterFromVariableRequest_variableId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveRegisterFromVariableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RemoveRegisterFromVariableRequest_registerId(ctx context.Context, field graphql.CollectedField, obj *model.RemoveRegisterFromVariableRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RemoveRegisterFromVariableRequest_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RemoveRegisterFromVariableRequest_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RemoveRegisterFromVariableRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_id(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_name(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_startYear(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_startYear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartYear, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_startYear(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_startMonth(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_startMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_startMonth(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_startDay(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_startDay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_startDay(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Season_weekId(ctx context.Context, field graphql.CollectedField, obj *model.Season) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Season_weekId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Season_weekId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Season",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_objectType(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ObjectType)
	fc.Result = res
	return ec.marshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_driverType(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_driverType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_driverType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_cryptoId(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_cryptoId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CryptoID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_cryptoId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_accessLevel(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_accessLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessLevel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_accessLevel(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_keyId(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_keyId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_keyId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_decryptionSecretId(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_decryptionSecretId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecryptionSecretID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_decryptionSecretId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_sessionKeyDecryptionMethod(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_sessionKeyDecryptionMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SessionKeyDecryptionMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SecretSessionKeyDecryptionMethod)
	fc.Result = res
	return ec.marshalOSecretSessionKeyDecryptionMethod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSecretSessionKeyDecryptionMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_sessionKeyDecryptionMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SecretSessionKeyDecryptionMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_sessionKey(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_sessionKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SessionKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_sessionKey(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_dataDecryptionMethod(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_dataDecryptionMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataDecryptionMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SecretDataDecryptionMethod)
	fc.Result = res
	return ec.marshalOSecretDataDecryptionMethod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSecretDataDecryptionMethod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_dataDecryptionMethod(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type SecretDataDecryptionMethod does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_dataDecryptionIv(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_dataDecryptionIv(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataDecryptionIv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_dataDecryptionIv(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetCryptoSecretRequest_data(ctx context.Context, field graphql.CollectedField, obj *model.SetCryptoSecretRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetCryptoSecretRequest_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetCryptoSecretRequest_data(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetCryptoSecretRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest_deviceId(ctx context.Context, field graphql.CollectedField, obj *model.SetDeviceCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetDeviceCommunicationUnitsRequest_deviceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeviceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetDeviceCommunicationUnitsRequest_deviceId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetDeviceCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest_communicationUnits(ctx context.Context, field graphql.CollectedField, obj *model.SetDeviceCommunicationUnitsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetDeviceCommunicationUnitsRequest_communicationUnits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommunicationUnits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceCommunicationUnit)
	fc.Result = res
	return ec.marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetDeviceCommunicationUnitsRequest_communicationUnits(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetDeviceCommunicationUnitsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "communicationUnitId":
				return ec.fieldContext_DeviceCommunicationUnit_communicationUnitId(ctx, field)
			case "appProtocol":
				return ec.fieldContext_DeviceCommunicationUnit_appProtocol(ctx, field)
			case "attributes":
				return ec.fieldContext_DeviceCommunicationUnit_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceCommunicationUnit", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetFieldsSpec_fields(ctx context.Context, field graphql.CollectedField, obj *model.SetFieldsSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetFieldsSpec_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapFieldValue)
	fc.Result = res
	return ec.marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetFieldsSpec_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetFieldsSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapFieldValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapFieldValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapFieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetFieldsSpec_objectType(ctx context.Context, field graphql.CollectedField, obj *model.SetFieldsSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetFieldsSpec_objectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ObjectType)
	fc.Result = res
	return ec.marshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetFieldsSpec_objectType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetFieldsSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetFieldsSpec_objectId(ctx context.Context, field graphql.CollectedField, obj *model.SetFieldsSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetFieldsSpec_objectId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ObjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetFieldsSpec_objectId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetFieldsSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemPoolRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.SetModemPoolRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemPoolRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemPoolSpec)
	fc.Result = res
	return ec.marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPoolSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemPoolRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemPoolRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_empty":
				return ec.fieldContext_ModemPoolSpec__empty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemPoolSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemPoolRequest_metadata(ctx context.Context, field graphql.CollectedField, obj *model.SetModemPoolRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemPoolRequest_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemPoolRequest_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemPoolRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemRequest_poolId(ctx context.Context, field graphql.CollectedField, obj *model.SetModemRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemRequest_poolId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PoolID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemRequest_poolId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SetModemRequest_modem(ctx context.Context, field graphql.CollectedField, obj *model.SetModemRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SetModemRequest_modem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Modem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ModemInfo)
	fc.Result = res
	return ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SetModemRequest_modem(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SetModemRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "modemId":
				return ec.fieldContext_ModemInfo_modemId(ctx, field)
			case "name":
				return ec.fieldContext_ModemInfo_name(ctx, field)
			case "atInit":
				return ec.fieldContext_ModemInfo_atInit(ctx, field)
			case "atDial":
				return ec.fieldContext_ModemInfo_atDial(ctx, field)
			case "atHangup":
				return ec.fieldContext_ModemInfo_atHangup(ctx, field)
			case "atEscape":
				return ec.fieldContext_ModemInfo_atEscape(ctx, field)
			case "connectTimeout":
				return ec.fieldContext_ModemInfo_connectTimeout(ctx, field)
			case "commandTimeout":
				return ec.fieldContext_ModemInfo_commandTimeout(ctx, field)
			case "tcpip":
				return ec.fieldContext_ModemInfo_tcpip(ctx, field)
			case "serialOverIp":
				return ec.fieldContext_ModemInfo_serialOverIp(ctx, field)
			case "serialBaudRate":
				return ec.fieldContext_ModemInfo_serialBaudRate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ModemInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpecialDay_year(ctx context.Context, field graphql.CollectedField, obj *model.SpecialDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpecialDay_year(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Year, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpecialDay_year(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpecialDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpecialDay_month(ctx context.Context, field graphql.CollectedField, obj *model.SpecialDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpecialDay_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpecialDay_month(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpecialDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpecialDay_day(ctx context.Context, field graphql.CollectedField, obj *model.SpecialDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpecialDay_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpecialDay_day(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpecialDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SpecialDay_dayId(ctx context.Context, field graphql.CollectedField, obj *model.SpecialDay) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SpecialDay_dayId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SpecialDay_dayId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SpecialDay",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _StringValue_value(ctx context.Context, field graphql.CollectedField, obj *model.StringValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_StringValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_StringValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "StringValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Struct_fields(ctx context.Context, field graphql.CollectedField, obj *model.Struct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Struct_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MapValue)
	fc.Result = res
	return ec.marshalO_mapValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Struct_fields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Struct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext__mapValue_key(ctx, field)
			case "value":
				return ec.fieldContext__mapValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _mapValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Switching_hour(ctx context.Context, field graphql.CollectedField, obj *model.Switching) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Switching_hour(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Switching_hour(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Switching",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Switching_minute(ctx context.Context, field graphql.CollectedField, obj *model.Switching) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Switching_minute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Minute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Switching_minute(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Switching",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Switching_tariff(ctx context.Context, field graphql.CollectedField, obj *model.Switching) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Switching_tariff(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tariff, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int32)
	fc.Result = res
	return ec.marshalOInt2ᚖint32(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Switching_tariff(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Switching",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Switching_relays(ctx context.Context, field graphql.CollectedField, obj *model.Switching) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Switching_relays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RelayStateRecord)
	fc.Result = res
	return ec.marshalORelayStateRecord2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayStateRecord(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Switching_relays(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Switching",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "relayId":
				return ec.fieldContext_RelayStateRecord_relayId(ctx, field)
			case "state":
				return ec.fieldContext_RelayStateRecord_state(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RelayStateRecord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTable_spec(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTable_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TimeOfUseTableSpec)
	fc.Result = res
	return ec.marshalOTimeOfUseTableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTableSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTable_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "expiesAt":
				return ec.fieldContext_TimeOfUseTableSpec_expiesAt(ctx, field)
			case "hdoGroupId":
				return ec.fieldContext_TimeOfUseTableSpec_hdoGroupId(ctx, field)
			case "activateAt":
				return ec.fieldContext_TimeOfUseTableSpec_activateAt(ctx, field)
			case "seasons":
				return ec.fieldContext_TimeOfUseTableSpec_seasons(ctx, field)
			case "weeks":
				return ec.fieldContext_TimeOfUseTableSpec_weeks(ctx, field)
			case "dayProfiles":
				return ec.fieldContext_TimeOfUseTableSpec_dayProfiles(ctx, field)
			case "specialDays":
				return ec.fieldContext_TimeOfUseTableSpec_specialDays(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimeOfUseTableSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTable_metadata(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTable_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTable_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_expiesAt(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_expiesAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiesAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_expiesAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_hdoGroupId(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_hdoGroupId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HdoGroupID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_hdoGroupId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_activateAt(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_activateAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivateAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_activateAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_Date_year(ctx, field)
			case "month":
				return ec.fieldContext_Date_month(ctx, field)
			case "day":
				return ec.fieldContext_Date_day(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Date", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_seasons(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_seasons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Seasons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Season)
	fc.Result = res
	return ec.marshalOSeason2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSeason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_seasons(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Season_id(ctx, field)
			case "name":
				return ec.fieldContext_Season_name(ctx, field)
			case "startYear":
				return ec.fieldContext_Season_startYear(ctx, field)
			case "startMonth":
				return ec.fieldContext_Season_startMonth(ctx, field)
			case "startDay":
				return ec.fieldContext_Season_startDay(ctx, field)
			case "weekId":
				return ec.fieldContext_Season_weekId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Season", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_weeks(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_weeks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weeks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Week)
	fc.Result = res
	return ec.marshalOWeek2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐWeek(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_weeks(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "weekId":
				return ec.fieldContext_Week_weekId(ctx, field)
			case "weekName":
				return ec.fieldContext_Week_weekName(ctx, field)
			case "dayIds":
				return ec.fieldContext_Week_dayIds(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Week", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_dayProfiles(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_dayProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayProfiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DayProfile)
	fc.Result = res
	return ec.marshalODayProfile2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDayProfile(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_dayProfiles(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dayId":
				return ec.fieldContext_DayProfile_dayId(ctx, field)
			case "switching":
				return ec.fieldContext_DayProfile_switching(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DayProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimeOfUseTableSpec_specialDays(ctx context.Context, field graphql.CollectedField, obj *model.TimeOfUseTableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimeOfUseTableSpec_specialDays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecialDays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SpecialDay)
	fc.Result = res
	return ec.marshalOSpecialDay2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSpecialDay(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimeOfUseTableSpec_specialDays(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimeOfUseTableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "year":
				return ec.fieldContext_SpecialDay_year(ctx, field)
			case "month":
				return ec.fieldContext_SpecialDay_month(ctx, field)
			case "day":
				return ec.fieldContext_SpecialDay_day(ctx, field)
			case "dayId":
				return ec.fieldContext_SpecialDay_dayId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SpecialDay", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopologyEdge_fromXId(ctx context.Context, field graphql.CollectedField, obj *model.TopologyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopologyEdge_fromXId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FromXId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopologyEdge_fromXId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopologyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopologyEdge_toXId(ctx context.Context, field graphql.CollectedField, obj *model.TopologyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopologyEdge_toXId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ToXId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopologyEdge_toXId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopologyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopologyEdge_attributes(ctx context.Context, field graphql.CollectedField, obj *model.TopologyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopologyEdge_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldValues)
	fc.Result = res
	return ec.marshalOFieldValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopologyEdge_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopologyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributes":
				return ec.fieldContext_FieldValues_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopologyNode_xId(ctx context.Context, field graphql.CollectedField, obj *model.TopologyNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopologyNode_xId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.XID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt642ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopologyNode_xId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopologyNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopologyNode_type(ctx context.Context, field graphql.CollectedField, obj *model.TopologyNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopologyNode_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.TopologyNodeType)
	fc.Result = res
	return ec.marshalOTopologyNodeType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNodeType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopologyNode_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopologyNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TopologyNodeType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TopologyNode_attributes(ctx context.Context, field graphql.CollectedField, obj *model.TopologyNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TopologyNode_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldValues)
	fc.Result = res
	return ec.marshalOFieldValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValues(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TopologyNode_attributes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TopologyNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributes":
				return ec.fieldContext_FieldValues_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValues", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateMetadata_metadata(ctx context.Context, field graphql.CollectedField, obj *model.UpdateMetadata) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateMetadata_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateMetadata_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateMetadata",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UpdateObjectFieldsRequest_spec(ctx context.Context, field graphql.CollectedField, obj *model.UpdateObjectFieldsRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UpdateObjectFieldsRequest_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SetFieldsSpec)
	fc.Result = res
	return ec.marshalOSetFieldsSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSetFieldsSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UpdateObjectFieldsRequest_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UpdateObjectFieldsRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fields":
				return ec.fieldContext_SetFieldsSpec_fields(ctx, field)
			case "objectType":
				return ec.fieldContext_SetFieldsSpec_objectType(ctx, field)
			case "objectId":
				return ec.fieldContext_SetFieldsSpec_objectId(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SetFieldsSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Value_nullValue(ctx context.Context, field graphql.CollectedField, obj *model.Value) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Value_nullValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NullValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NullValue)
	fc.Result = res
	return ec.marshalONullValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐNullValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Value_nullValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Value",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NullValue does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Value_numberValue(ctx context.Context, field graphql.CollectedField, obj *model.Value) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Value_numberValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Value_numberValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Value",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Value_stringValue(ctx context.Context, field graphql.CollectedField, obj *model.Value) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Value_stringValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StringValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Value_stringValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Value",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Value_boolValue(ctx context.Context, field graphql.CollectedField, obj *model.Value) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Value_boolValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoolValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Value_boolValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Value",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Value_structValue(ctx context.Context, field graphql.CollectedField, obj *model.Value) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Value_structValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StructValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Struct)
	fc.Result = res
	return ec.marshalOStruct2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStruct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Value_structValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Value",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fields":
				return ec.fieldContext_Struct_fields(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Struct", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Value_listValue(ctx context.Context, field graphql.CollectedField, obj *model.Value) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Value_listValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ListValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListValue)
	fc.Result = res
	return ec.marshalOListValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Value_listValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Value",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "values":
				return ec.fieldContext_ListValue_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_spec(ctx context.Context, field graphql.CollectedField, obj *model.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_spec(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spec, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VariableSpec)
	fc.Result = res
	return ec.marshalOVariableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableSpec(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_spec(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "registerId":
				return ec.fieldContext_VariableSpec_registerId(ctx, field)
			case "dataType":
				return ec.fieldContext_VariableSpec_dataType(ctx, field)
			case "excludeDataFrom":
				return ec.fieldContext_VariableSpec_excludeDataFrom(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type VariableSpec", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Variable_metadata(ctx context.Context, field graphql.CollectedField, obj *model.Variable) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Variable_metadata(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metadata, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MetadataFields)
	fc.Result = res
	return ec.marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Variable_metadata(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Variable",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MetadataFields_id(ctx, field)
			case "generation":
				return ec.fieldContext_MetadataFields_generation(ctx, field)
			case "fields":
				return ec.fieldContext_MetadataFields_fields(ctx, field)
			case "managedFields":
				return ec.fieldContext_MetadataFields_managedFields(ctx, field)
			case "name":
				return ec.fieldContext_MetadataFields_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MetadataFields", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableDeviceData_variableId(ctx context.Context, field graphql.CollectedField, obj *model.VariableDeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableDeviceData_variableId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariableID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableDeviceData_variableId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableDeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableDeviceData_timestamps(ctx context.Context, field graphql.CollectedField, obj *model.VariableDeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableDeviceData_timestamps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableDeviceData_timestamps(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableDeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableDeviceData_units(ctx context.Context, field graphql.CollectedField, obj *model.VariableDeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableDeviceData_units(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Units, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableDeviceData_units(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableDeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableDeviceData_values(ctx context.Context, field graphql.CollectedField, obj *model.VariableDeviceData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableDeviceData_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MeasuredValue)
	fc.Result = res
	return ec.marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableDeviceData_values(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableDeviceData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_MeasuredValue_status(ctx, field)
			case "exponent":
				return ec.fieldContext_MeasuredValue_exponent(ctx, field)
			case "doubleValue":
				return ec.fieldContext_MeasuredValue_doubleValue(ctx, field)
			case "integerValue":
				return ec.fieldContext_MeasuredValue_integerValue(ctx, field)
			case "stringValue":
				return ec.fieldContext_MeasuredValue_stringValue(ctx, field)
			case "timestampValue":
				return ec.fieldContext_MeasuredValue_timestampValue(ctx, field)
			case "timestampTzValue":
				return ec.fieldContext_MeasuredValue_timestampTzValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_MeasuredValue_boolValue(ctx, field)
			case "nstatus":
				return ec.fieldContext_MeasuredValue_nstatus(ctx, field)
			case "peakTs":
				return ec.fieldContext_MeasuredValue_peakTs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MeasuredValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableSpec_registerId(ctx context.Context, field graphql.CollectedField, obj *model.VariableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableSpec_registerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegisterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableSpec_registerId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableSpec_dataType(ctx context.Context, field graphql.CollectedField, obj *model.VariableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableSpec_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldDataType)
	fc.Result = res
	return ec.marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableSpec_dataType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type FieldDataType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _VariableSpec_excludeDataFrom(ctx context.Context, field graphql.CollectedField, obj *model.VariableSpec) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_VariableSpec_excludeDataFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExcludeDataFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_VariableSpec_excludeDataFrom(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "VariableSpec",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Week_weekId(ctx context.Context, field graphql.CollectedField, obj *model.Week) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Week_weekId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Week_weekId(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Week",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Week_weekName(ctx context.Context, field graphql.CollectedField, obj *model.Week) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Week_weekName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Week_weekName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Week",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Week_dayIds(ctx context.Context, field graphql.CollectedField, obj *model.Week) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Week_dayIds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayIds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Week_dayIds(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Week",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_isOneOf(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOneOf(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapFieldValue_key(ctx context.Context, field graphql.CollectedField, obj *model.MapFieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapFieldValue_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapFieldValue_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapFieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapFieldValue_value(ctx context.Context, field graphql.CollectedField, obj *model.MapFieldValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapFieldValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FieldValue)
	fc.Result = res
	return ec.marshalOFieldValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapFieldValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapFieldValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "stringValue":
				return ec.fieldContext_FieldValue_stringValue(ctx, field)
			case "integerValue":
				return ec.fieldContext_FieldValue_integerValue(ctx, field)
			case "doubleValue":
				return ec.fieldContext_FieldValue_doubleValue(ctx, field)
			case "binaryValue":
				return ec.fieldContext_FieldValue_binaryValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_FieldValue_boolValue(ctx, field)
			case "dateValue":
				return ec.fieldContext_FieldValue_dateValue(ctx, field)
			case "durationValue":
				return ec.fieldContext_FieldValue_durationValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapListOfString_key(ctx context.Context, field graphql.CollectedField, obj *model.MapListOfString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapListOfString_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapListOfString_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapListOfString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapListOfString_value(ctx context.Context, field graphql.CollectedField, obj *model.MapListOfString) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapListOfString_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListOfString)
	fc.Result = res
	return ec.marshalOListOfString2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfString(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapListOfString_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapListOfString",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_ListOfString_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ListOfString", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapValue_key(ctx context.Context, field graphql.CollectedField, obj *model.MapValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapValue_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapValue_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapValue_value(ctx context.Context, field graphql.CollectedField, obj *model.MapValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Value)
	fc.Result = res
	return ec.marshalOValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapValue_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nullValue":
				return ec.fieldContext_Value_nullValue(ctx, field)
			case "numberValue":
				return ec.fieldContext_Value_numberValue(ctx, field)
			case "stringValue":
				return ec.fieldContext_Value_stringValue(ctx, field)
			case "boolValue":
				return ec.fieldContext_Value_boolValue(ctx, field)
			case "structValue":
				return ec.fieldContext_Value_structValue(ctx, field)
			case "listValue":
				return ec.fieldContext_Value_listValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Value", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapstring_key(ctx context.Context, field graphql.CollectedField, obj *model.Mapstring) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapstring_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapstring_key(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapstring",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __mapstring_value(ctx context.Context, field graphql.CollectedField, obj *model.Mapstring) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__mapstring_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__mapstring_value(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_mapstring",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessLevelTemplateImplementors = []string{"AccessLevelTemplate"}

func (ec *executionContext) _AccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.AccessLevelTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessLevelTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessLevelTemplate")
		case "id":
			out.Values[i] = ec._AccessLevelTemplate_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._AccessLevelTemplate_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionDataImplementors = []string{"ActionData"}

func (ec *executionContext) _ActionData(ctx context.Context, sel ast.SelectionSet, obj *model.ActionData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionData")
		case "nodata":
			out.Values[i] = ec._ActionData_nodata(ctx, field, obj)
		case "registers":
			out.Values[i] = ec._ActionData_registers(ctx, field, obj)
		case "profile":
			out.Values[i] = ec._ActionData_profile(ctx, field, obj)
		case "irregularProfile":
			out.Values[i] = ec._ActionData_irregularProfile(ctx, field, obj)
		case "deviceInfo":
			out.Values[i] = ec._ActionData_deviceInfo(ctx, field, obj)
		case "events":
			out.Values[i] = ec._ActionData_events(ctx, field, obj)
		case "touTable":
			out.Values[i] = ec._ActionData_touTable(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionFwUpdateImplementors = []string{"ActionFwUpdate"}

func (ec *executionContext) _ActionFwUpdate(ctx context.Context, sel ast.SelectionSet, obj *model.ActionFwUpdate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionFwUpdateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionFwUpdate")
		case "_empty":
			out.Values[i] = ec._ActionFwUpdate__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetDeviceInfoImplementors = []string{"ActionGetDeviceInfo"}

func (ec *executionContext) _ActionGetDeviceInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetDeviceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetDeviceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetDeviceInfo")
		case "_empty":
			out.Values[i] = ec._ActionGetDeviceInfo__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetEventsImplementors = []string{"ActionGetEvents"}

func (ec *executionContext) _ActionGetEvents(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetEvents) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetEventsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetEvents")
		case "from":
			out.Values[i] = ec._ActionGetEvents_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetEvents_to(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetIrregularProfileImplementors = []string{"ActionGetIrregularProfile"}

func (ec *executionContext) _ActionGetIrregularProfile(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetIrregularProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetIrregularProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetIrregularProfile")
		case "from":
			out.Values[i] = ec._ActionGetIrregularProfile_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetIrregularProfile_to(ctx, field, obj)
		case "dataType":
			out.Values[i] = ec._ActionGetIrregularProfile_dataType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetPeriodicalProfileImplementors = []string{"ActionGetPeriodicalProfile"}

func (ec *executionContext) _ActionGetPeriodicalProfile(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetPeriodicalProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetPeriodicalProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetPeriodicalProfile")
		case "from":
			out.Values[i] = ec._ActionGetPeriodicalProfile_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._ActionGetPeriodicalProfile_to(ctx, field, obj)
		case "dataType":
			out.Values[i] = ec._ActionGetPeriodicalProfile_dataType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetRegisterImplementors = []string{"ActionGetRegister"}

func (ec *executionContext) _ActionGetRegister(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetRegister")
		case "dataType":
			out.Values[i] = ec._ActionGetRegister_dataType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionGetTouImplementors = []string{"ActionGetTou"}

func (ec *executionContext) _ActionGetTou(ctx context.Context, sel ast.SelectionSet, obj *model.ActionGetTou) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionGetTouImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionGetTou")
		case "passive":
			out.Values[i] = ec._ActionGetTou_passive(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionResetBillingPeriodImplementors = []string{"ActionResetBillingPeriod"}

func (ec *executionContext) _ActionResetBillingPeriod(ctx context.Context, sel ast.SelectionSet, obj *model.ActionResetBillingPeriod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionResetBillingPeriodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionResetBillingPeriod")
		case "_empty":
			out.Values[i] = ec._ActionResetBillingPeriod__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionResultImplementors = []string{"ActionResult"}

func (ec *executionContext) _ActionResult(ctx context.Context, sel ast.SelectionSet, obj *model.ActionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionResult")
		case "actionId":
			out.Values[i] = ec._ActionResult_actionId(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ActionResult_status(ctx, field, obj)
		case "data":
			out.Values[i] = ec._ActionResult_data(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._ActionResult_registerId(ctx, field, obj)
		case "variableName":
			out.Values[i] = ec._ActionResult_variableName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetDisconnectorStateImplementors = []string{"ActionSetDisconnectorState"}

func (ec *executionContext) _ActionSetDisconnectorState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetDisconnectorState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetDisconnectorStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetDisconnectorState")
		case "_empty":
			out.Values[i] = ec._ActionSetDisconnectorState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetLimiterImplementors = []string{"ActionSetLimiter"}

func (ec *executionContext) _ActionSetLimiter(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetLimiter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetLimiterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetLimiter")
		case "_empty":
			out.Values[i] = ec._ActionSetLimiter__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetRelayStateImplementors = []string{"ActionSetRelayState"}

func (ec *executionContext) _ActionSetRelayState(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetRelayState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetRelayStateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetRelayState")
		case "_empty":
			out.Values[i] = ec._ActionSetRelayState__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSetTouImplementors = []string{"ActionSetTou"}

func (ec *executionContext) _ActionSetTou(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSetTou) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSetTouImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSetTou")
		case "table":
			out.Values[i] = ec._ActionSetTou_table(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var actionSyncClockImplementors = []string{"ActionSyncClock"}

func (ec *executionContext) _ActionSyncClock(ctx context.Context, sel ast.SelectionSet, obj *model.ActionSyncClock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionSyncClockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionSyncClock")
		case "_empty":
			out.Values[i] = ec._ActionSyncClock__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var addCommunicationUnitsToCommunicationBusRequestImplementors = []string{"AddCommunicationUnitsToCommunicationBusRequest"}

func (ec *executionContext) _AddCommunicationUnitsToCommunicationBusRequest(ctx context.Context, sel ast.SelectionSet, obj *model.AddCommunicationUnitsToCommunicationBusRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addCommunicationUnitsToCommunicationBusRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddCommunicationUnitsToCommunicationBusRequest")
		case "communicationBusId":
			out.Values[i] = ec._AddCommunicationUnitsToCommunicationBusRequest_communicationBusId(ctx, field, obj)
		case "communicationUnitId":
			out.Values[i] = ec._AddCommunicationUnitsToCommunicationBusRequest_communicationUnitId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var addDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestImplementors = []string{"AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest"}

func (ec *executionContext) _AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest(ctx context.Context, sel ast.SelectionSet, obj *model.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addDeviceConfigurationRegisterToDeviceConfigurationTemplateRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest")
		case "dctId":
			out.Values[i] = ec._AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_dctId(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest_registerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var addDevicesToGroupRequestImplementors = []string{"AddDevicesToGroupRequest"}

func (ec *executionContext) _AddDevicesToGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.AddDevicesToGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addDevicesToGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddDevicesToGroupRequest")
		case "groupId":
			out.Values[i] = ec._AddDevicesToGroupRequest_groupId(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._AddDevicesToGroupRequest_deviceId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var addRegisterToVariableRequestImplementors = []string{"AddRegisterToVariableRequest"}

func (ec *executionContext) _AddRegisterToVariableRequest(ctx context.Context, sel ast.SelectionSet, obj *model.AddRegisterToVariableRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addRegisterToVariableRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddRegisterToVariableRequest")
		case "variableId":
			out.Values[i] = ec._AddRegisterToVariableRequest_variableId(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._AddRegisterToVariableRequest_registerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationConfigImplementors = []string{"ApplicationConfig"}

func (ec *executionContext) _ApplicationConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationConfig")
		case "items":
			out.Values[i] = ec._ApplicationConfig_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationConfigDescriptorImplementors = []string{"ApplicationConfigDescriptor"}

func (ec *executionContext) _ApplicationConfigDescriptor(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationConfigDescriptor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationConfigDescriptorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationConfigDescriptor")
		case "descriptors":
			out.Values[i] = ec._ApplicationConfigDescriptor_descriptors(ctx, field, obj)
		case "items":
			out.Values[i] = ec._ApplicationConfigDescriptor_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var applicationProtocolTemplateImplementors = []string{"ApplicationProtocolTemplate"}

func (ec *executionContext) _ApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.ApplicationProtocolTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, applicationProtocolTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApplicationProtocolTemplate")
		case "protocol":
			out.Values[i] = ec._ApplicationProtocolTemplate_protocol(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._ApplicationProtocolTemplate_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkImplementors = []string{"Bulk"}

func (ec *executionContext) _Bulk(ctx context.Context, sel ast.SelectionSet, obj *model.Bulk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bulk")
		case "spec":
			out.Values[i] = ec._Bulk_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Bulk_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Bulk_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkJobImplementors = []string{"BulkJob"}

func (ec *executionContext) _BulkJob(ctx context.Context, sel ast.SelectionSet, obj *model.BulkJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkJobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkJob")
		case "spec":
			out.Values[i] = ec._BulkJob_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._BulkJob_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._BulkJob_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkJobSpecImplementors = []string{"BulkJobSpec"}

func (ec *executionContext) _BulkJobSpec(ctx context.Context, sel ast.SelectionSet, obj *model.BulkJobSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkJobSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkJobSpec")
		case "device":
			out.Values[i] = ec._BulkJobSpec_device(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkSpecImplementors = []string{"BulkSpec"}

func (ec *executionContext) _BulkSpec(ctx context.Context, sel ast.SelectionSet, obj *model.BulkSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkSpec")
		case "correlationId":
			out.Values[i] = ec._BulkSpec_correlationId(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._BulkSpec_devices(ctx, field, obj)
		case "deviceGroupId":
			out.Values[i] = ec._BulkSpec_deviceGroupId(ctx, field, obj)
		case "settings":
			out.Values[i] = ec._BulkSpec_settings(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._BulkSpec_actions(ctx, field, obj)
		case "webhookUrl":
			out.Values[i] = ec._BulkSpec_webhookUrl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var bulkStatusImplementors = []string{"BulkStatus"}

func (ec *executionContext) _BulkStatus(ctx context.Context, sel ast.SelectionSet, obj *model.BulkStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bulkStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BulkStatus")
		case "status":
			out.Values[i] = ec._BulkStatus_status(ctx, field, obj)
		case "jobsCount":
			out.Values[i] = ec._BulkStatus_jobsCount(ctx, field, obj)
		case "jobsFinished":
			out.Values[i] = ec._BulkStatus_jobsFinished(ctx, field, obj)
		case "jobsSuccessful":
			out.Values[i] = ec._BulkStatus_jobsSuccessful(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._BulkStatus_createdAt(ctx, field, obj)
		case "startedAt":
			out.Values[i] = ec._BulkStatus_startedAt(ctx, field, obj)
		case "finishedAt":
			out.Values[i] = ec._BulkStatus_finishedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationBusImplementors = []string{"CommunicationBus"}

func (ec *executionContext) _CommunicationBus(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationBus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationBusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationBus")
		case "status":
			out.Values[i] = ec._CommunicationBus_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CommunicationBus_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationBusStatusImplementors = []string{"CommunicationBusStatus"}

func (ec *executionContext) _CommunicationBusStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationBusStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationBusStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationBusStatus")
		case "communicationUnitId":
			out.Values[i] = ec._CommunicationBusStatus_communicationUnitId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationTemplateImplementors = []string{"CommunicationTemplate"}

func (ec *executionContext) _CommunicationTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationTemplate")
		case "type":
			out.Values[i] = ec._CommunicationTemplate_type(ctx, field, obj)
		case "datalinks":
			out.Values[i] = ec._CommunicationTemplate_datalinks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationUnitImplementors = []string{"CommunicationUnit"}

func (ec *executionContext) _CommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationUnit")
		case "spec":
			out.Values[i] = ec._CommunicationUnit_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CommunicationUnit_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var communicationUnitSpecImplementors = []string{"CommunicationUnitSpec"}

func (ec *executionContext) _CommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CommunicationUnitSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, communicationUnitSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommunicationUnitSpec")
		case "externalId":
			out.Values[i] = ec._CommunicationUnitSpec_externalId(ctx, field, obj)
		case "connectionInfo":
			out.Values[i] = ec._CommunicationUnitSpec_connectionInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var componentConfigImplementors = []string{"ComponentConfig"}

func (ec *executionContext) _ComponentConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ComponentConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentConfigImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentConfig")
		case "name":
			out.Values[i] = ec._ComponentConfig_name(ctx, field, obj)
		case "items":
			out.Values[i] = ec._ComponentConfig_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var componentConfigDescriptorImplementors = []string{"ComponentConfigDescriptor"}

func (ec *executionContext) _ComponentConfigDescriptor(ctx context.Context, sel ast.SelectionSet, obj *model.ComponentConfigDescriptor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, componentConfigDescriptorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ComponentConfigDescriptor")
		case "name":
			out.Values[i] = ec._ComponentConfigDescriptor_name(ctx, field, obj)
		case "items":
			out.Values[i] = ec._ComponentConfigDescriptor_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionInfoImplementors = []string{"ConnectionInfo"}

func (ec *executionContext) _ConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionInfo")
		case "tcpip":
			out.Values[i] = ec._ConnectionInfo_tcpip(ctx, field, obj)
		case "modemPool":
			out.Values[i] = ec._ConnectionInfo_modemPool(ctx, field, obj)
		case "serialOverIp":
			out.Values[i] = ec._ConnectionInfo_serialOverIp(ctx, field, obj)
		case "linkProtocol":
			out.Values[i] = ec._ConnectionInfo_linkProtocol(ctx, field, obj)
		case "communicationBusId":
			out.Values[i] = ec._ConnectionInfo_communicationBusId(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._ConnectionInfo_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeControlledSerialImplementors = []string{"ConnectionTypeControlledSerial"}

func (ec *executionContext) _ConnectionTypeControlledSerial(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeControlledSerial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeControlledSerialImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeControlledSerial")
		case "direct":
			out.Values[i] = ec._ConnectionTypeControlledSerial_direct(ctx, field, obj)
		case "moxa":
			out.Values[i] = ec._ConnectionTypeControlledSerial_moxa(ctx, field, obj)
		case "rfc2217":
			out.Values[i] = ec._ConnectionTypeControlledSerial_rfc2217(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeDirectTcpIpImplementors = []string{"ConnectionTypeDirectTcpIp"}

func (ec *executionContext) _ConnectionTypeDirectTcpIp(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeDirectTCPIP) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeDirectTcpIpImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeDirectTcpIp")
		case "host":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_port(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._ConnectionTypeDirectTcpIp_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeModemPoolImplementors = []string{"ConnectionTypeModemPool"}

func (ec *executionContext) _ConnectionTypeModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeModemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeModemPool")
		case "number":
			out.Values[i] = ec._ConnectionTypeModemPool_number(ctx, field, obj)
		case "poolId":
			out.Values[i] = ec._ConnectionTypeModemPool_poolId(ctx, field, obj)
		case "modem":
			out.Values[i] = ec._ConnectionTypeModemPool_modem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialDirectImplementors = []string{"ConnectionTypeSerialDirect"}

func (ec *executionContext) _ConnectionTypeSerialDirect(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialDirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialDirectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialDirect")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialDirect_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeSerialDirect_port(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._ConnectionTypeSerialDirect_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialMoxaImplementors = []string{"ConnectionTypeSerialMoxa"}

func (ec *executionContext) _ConnectionTypeSerialMoxa(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialMoxa) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialMoxaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialMoxa")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_host(ctx, field, obj)
		case "dataPort":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_dataPort(ctx, field, obj)
		case "commandPort":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_commandPort(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._ConnectionTypeSerialMoxa_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var connectionTypeSerialRfc2217Implementors = []string{"ConnectionTypeSerialRfc2217"}

func (ec *executionContext) _ConnectionTypeSerialRfc2217(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionTypeSerialRfc2217) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionTypeSerialRfc2217Implementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionTypeSerialRfc2217")
		case "host":
			out.Values[i] = ec._ConnectionTypeSerialRfc2217_host(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ConnectionTypeSerialRfc2217_port(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._ConnectionTypeSerialRfc2217_timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createBulkRequestImplementors = []string{"CreateBulkRequest"}

func (ec *executionContext) _CreateBulkRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateBulkRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createBulkRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateBulkRequest")
		case "spec":
			out.Values[i] = ec._CreateBulkRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateBulkRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCommunicationBusRequestImplementors = []string{"CreateCommunicationBusRequest"}

func (ec *executionContext) _CreateCommunicationBusRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCommunicationBusRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCommunicationBusRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCommunicationBusRequest")
		case "metadata":
			out.Values[i] = ec._CreateCommunicationBusRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCommunicationUnitRequestImplementors = []string{"CreateCommunicationUnitRequest"}

func (ec *executionContext) _CreateCommunicationUnitRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCommunicationUnitRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCommunicationUnitRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCommunicationUnitRequest")
		case "spec":
			out.Values[i] = ec._CreateCommunicationUnitRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateCommunicationUnitRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createCronJobRequestImplementors = []string{"CreateCronJobRequest"}

func (ec *executionContext) _CreateCronJobRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateCronJobRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createCronJobRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateCronJobRequest")
		case "spec":
			out.Values[i] = ec._CreateCronJobRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateCronJobRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceConfigurationRegisterRequestImplementors = []string{"CreateDeviceConfigurationRegisterRequest"}

func (ec *executionContext) _CreateDeviceConfigurationRegisterRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceConfigurationRegisterRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceConfigurationRegisterRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceConfigurationRegisterRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceConfigurationRegisterRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateDeviceConfigurationRegisterRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceConfigurationTemplateRequestImplementors = []string{"CreateDeviceConfigurationTemplateRequest"}

func (ec *executionContext) _CreateDeviceConfigurationTemplateRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceConfigurationTemplateRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceConfigurationTemplateRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceConfigurationTemplateRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceConfigurationTemplateRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateDeviceConfigurationTemplateRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceGroupRequestImplementors = []string{"CreateDeviceGroupRequest"}

func (ec *executionContext) _CreateDeviceGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceGroupRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceGroupRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateDeviceGroupRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createDeviceRequestImplementors = []string{"CreateDeviceRequest"}

func (ec *executionContext) _CreateDeviceRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateDeviceRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createDeviceRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateDeviceRequest")
		case "spec":
			out.Values[i] = ec._CreateDeviceRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateDeviceRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createFieldDescriptorRequestImplementors = []string{"CreateFieldDescriptorRequest"}

func (ec *executionContext) _CreateFieldDescriptorRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateFieldDescriptorRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createFieldDescriptorRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateFieldDescriptorRequest")
		case "spec":
			out.Values[i] = ec._CreateFieldDescriptorRequest_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createProxyBulkRequestImplementors = []string{"CreateProxyBulkRequest"}

func (ec *executionContext) _CreateProxyBulkRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateProxyBulkRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createProxyBulkRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateProxyBulkRequest")
		case "spec":
			out.Values[i] = ec._CreateProxyBulkRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateProxyBulkRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createTimeOfUseTableRequestImplementors = []string{"CreateTimeOfUseTableRequest"}

func (ec *executionContext) _CreateTimeOfUseTableRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateTimeOfUseTableRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createTimeOfUseTableRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateTimeOfUseTableRequest")
		case "spec":
			out.Values[i] = ec._CreateTimeOfUseTableRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateTimeOfUseTableRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var createVariableRequestImplementors = []string{"CreateVariableRequest"}

func (ec *executionContext) _CreateVariableRequest(ctx context.Context, sel ast.SelectionSet, obj *model.CreateVariableRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createVariableRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateVariableRequest")
		case "spec":
			out.Values[i] = ec._CreateVariableRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CreateVariableRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cronJobImplementors = []string{"CronJob"}

func (ec *executionContext) _CronJob(ctx context.Context, sel ast.SelectionSet, obj *model.CronJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cronJobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CronJob")
		case "spec":
			out.Values[i] = ec._CronJob_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CronJob_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._CronJob_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cronJobSpecImplementors = []string{"CronJobSpec"}

func (ec *executionContext) _CronJobSpec(ctx context.Context, sel ast.SelectionSet, obj *model.CronJobSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cronJobSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CronJobSpec")
		case "type":
			out.Values[i] = ec._CronJobSpec_type(ctx, field, obj)
		case "schedule":
			out.Values[i] = ec._CronJobSpec_schedule(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._CronJobSpec_timezone(ctx, field, obj)
		case "suspend":
			out.Values[i] = ec._CronJobSpec_suspend(ctx, field, obj)
		case "data":
			out.Values[i] = ec._CronJobSpec_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cronJobStatusImplementors = []string{"CronJobStatus"}

func (ec *executionContext) _CronJobStatus(ctx context.Context, sel ast.SelectionSet, obj *model.CronJobStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cronJobStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CronJobStatus")
		case "lastRunAt":
			out.Values[i] = ec._CronJobStatus_lastRunAt(ctx, field, obj)
		case "nextRunAt":
			out.Values[i] = ec._CronJobStatus_nextRunAt(ctx, field, obj)
		case "error":
			out.Values[i] = ec._CronJobStatus_error(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cryptoSecretImplementors = []string{"CryptoSecret"}

func (ec *executionContext) _CryptoSecret(ctx context.Context, sel ast.SelectionSet, obj *model.CryptoSecret) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cryptoSecretImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CryptoSecret")
		case "accessLevel":
			out.Values[i] = ec._CryptoSecret_accessLevel(ctx, field, obj)
		case "keyId":
			out.Values[i] = ec._CryptoSecret_keyId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._CryptoSecret_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CryptoSecret_updatedAt(ctx, field, obj)
		case "data":
			out.Values[i] = ec._CryptoSecret_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var cryptoSecretsImplementors = []string{"CryptoSecrets"}

func (ec *executionContext) _CryptoSecrets(ctx context.Context, sel ast.SelectionSet, obj *model.CryptoSecrets) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cryptoSecretsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CryptoSecrets")
		case "secrets":
			out.Values[i] = ec._CryptoSecrets_secrets(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dataLinkTemplateImplementors = []string{"DataLinkTemplate"}

func (ec *executionContext) _DataLinkTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.DataLinkTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataLinkTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataLinkTemplate")
		case "linkProtocol":
			out.Values[i] = ec._DataLinkTemplate_linkProtocol(ctx, field, obj)
		case "appProtocolRefs":
			out.Values[i] = ec._DataLinkTemplate_appProtocolRefs(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DataLinkTemplate_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dateImplementors = []string{"Date"}

func (ec *executionContext) _Date(ctx context.Context, sel ast.SelectionSet, obj *model.Date) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Date")
		case "year":
			out.Values[i] = ec._Date_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._Date_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._Date_day(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dayProfileImplementors = []string{"DayProfile"}

func (ec *executionContext) _DayProfile(ctx context.Context, sel ast.SelectionSet, obj *model.DayProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dayProfileImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DayProfile")
		case "dayId":
			out.Values[i] = ec._DayProfile_dayId(ctx, field, obj)
		case "switching":
			out.Values[i] = ec._DayProfile_switching(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceImplementors = []string{"Device"}

func (ec *executionContext) _Device(ctx context.Context, sel ast.SelectionSet, obj *model.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Device")
		case "spec":
			out.Values[i] = ec._Device_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Device_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Device_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceBulksImplementors = []string{"DeviceBulks"}

func (ec *executionContext) _DeviceBulks(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceBulks) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceBulksImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceBulks")
		case "bulks":
			out.Values[i] = ec._DeviceBulks_bulks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceCommunicationUnitImplementors = []string{"DeviceCommunicationUnit"}

func (ec *executionContext) _DeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceCommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceCommunicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceCommunicationUnit")
		case "communicationUnitId":
			out.Values[i] = ec._DeviceCommunicationUnit_communicationUnitId(ctx, field, obj)
		case "appProtocol":
			out.Values[i] = ec._DeviceCommunicationUnit_appProtocol(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DeviceCommunicationUnit_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceCommunicationUnitChangeImplementors = []string{"DeviceCommunicationUnitChange"}

func (ec *executionContext) _DeviceCommunicationUnitChange(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceCommunicationUnitChange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceCommunicationUnitChangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceCommunicationUnitChange")
		case "status":
			out.Values[i] = ec._DeviceCommunicationUnitChange_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceCommunicationUnitChangeStatusImplementors = []string{"DeviceCommunicationUnitChangeStatus"}

func (ec *executionContext) _DeviceCommunicationUnitChangeStatus(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceCommunicationUnitChangeStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceCommunicationUnitChangeStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceCommunicationUnitChangeStatus")
		case "changeAt":
			out.Values[i] = ec._DeviceCommunicationUnitChangeStatus_changeAt(ctx, field, obj)
		case "communicationUnitId":
			out.Values[i] = ec._DeviceCommunicationUnitChangeStatus_communicationUnitId(ctx, field, obj)
		case "communicationUnitName":
			out.Values[i] = ec._DeviceCommunicationUnitChangeStatus_communicationUnitName(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._DeviceCommunicationUnitChangeStatus_deviceId(ctx, field, obj)
		case "deviceName":
			out.Values[i] = ec._DeviceCommunicationUnitChangeStatus_deviceName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceConfigurationRegisterImplementors = []string{"DeviceConfigurationRegister"}

func (ec *executionContext) _DeviceConfigurationRegister(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceConfigurationRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceConfigurationRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceConfigurationRegister")
		case "spec":
			out.Values[i] = ec._DeviceConfigurationRegister_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._DeviceConfigurationRegister_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceConfigurationRegisterSpecImplementors = []string{"DeviceConfigurationRegisterSpec"}

func (ec *executionContext) _DeviceConfigurationRegisterSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceConfigurationRegisterSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceConfigurationRegisterSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceConfigurationRegisterSpec")
		case "driverType":
			out.Values[i] = ec._DeviceConfigurationRegisterSpec_driverType(ctx, field, obj)
		case "registerType":
			out.Values[i] = ec._DeviceConfigurationRegisterSpec_registerType(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._DeviceConfigurationRegisterSpec_attributes(ctx, field, obj)
		case "dataType":
			out.Values[i] = ec._DeviceConfigurationRegisterSpec_dataType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceConfigurationTemplateImplementors = []string{"DeviceConfigurationTemplate"}

func (ec *executionContext) _DeviceConfigurationTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceConfigurationTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceConfigurationTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceConfigurationTemplate")
		case "spec":
			out.Values[i] = ec._DeviceConfigurationTemplate_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._DeviceConfigurationTemplate_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceConfigurationTemplateSpecImplementors = []string{"DeviceConfigurationTemplateSpec"}

func (ec *executionContext) _DeviceConfigurationTemplateSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceConfigurationTemplateSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceConfigurationTemplateSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceConfigurationTemplateSpec")
		case "driverType":
			out.Values[i] = ec._DeviceConfigurationTemplateSpec_driverType(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._DeviceConfigurationTemplateSpec_registerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceDataImplementors = []string{"DeviceData"}

func (ec *executionContext) _DeviceData(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceData")
		case "devices":
			out.Values[i] = ec._DeviceData_devices(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceDataInfoImplementors = []string{"DeviceDataInfo"}

func (ec *executionContext) _DeviceDataInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceDataInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceDataInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceDataInfo")
		case "spec":
			out.Values[i] = ec._DeviceDataInfo_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._DeviceDataInfo_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceDataInfoSpecImplementors = []string{"DeviceDataInfoSpec"}

func (ec *executionContext) _DeviceDataInfoSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceDataInfoSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceDataInfoSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceDataInfoSpec")
		case "deviceId":
			out.Values[i] = ec._DeviceDataInfoSpec_deviceId(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._DeviceDataInfoSpec_registerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceDataInfoStatusImplementors = []string{"DeviceDataInfoStatus"}

func (ec *executionContext) _DeviceDataInfoStatus(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceDataInfoStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceDataInfoStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceDataInfoStatus")
		case "registerName":
			out.Values[i] = ec._DeviceDataInfoStatus_registerName(ctx, field, obj)
		case "period":
			out.Values[i] = ec._DeviceDataInfoStatus_period(ctx, field, obj)
		case "lastValueAt":
			out.Values[i] = ec._DeviceDataInfoStatus_lastValueAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceDeviceDataImplementors = []string{"DeviceDeviceData"}

func (ec *executionContext) _DeviceDeviceData(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceDeviceData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceDeviceDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceDeviceData")
		case "deviceId":
			out.Values[i] = ec._DeviceDeviceData_deviceId(ctx, field, obj)
		case "data":
			out.Values[i] = ec._DeviceDeviceData_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceEventRecordImplementors = []string{"DeviceEventRecord"}

func (ec *executionContext) _DeviceEventRecord(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceEventRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceEventRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceEventRecord")
		case "deviceId":
			out.Values[i] = ec._DeviceEventRecord_deviceId(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._DeviceEventRecord_timestamp(ctx, field, obj)
		case "eventId":
			out.Values[i] = ec._DeviceEventRecord_eventId(ctx, field, obj)
		case "eventCode":
			out.Values[i] = ec._DeviceEventRecord_eventCode(ctx, field, obj)
		case "eventSource":
			out.Values[i] = ec._DeviceEventRecord_eventSource(ctx, field, obj)
		case "eventText":
			out.Values[i] = ec._DeviceEventRecord_eventText(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceEventsImplementors = []string{"DeviceEvents"}

func (ec *executionContext) _DeviceEvents(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceEvents) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceEventsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceEvents")
		case "events":
			out.Values[i] = ec._DeviceEvents_events(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceGroupImplementors = []string{"DeviceGroup"}

func (ec *executionContext) _DeviceGroup(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceGroup")
		case "spec":
			out.Values[i] = ec._DeviceGroup_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._DeviceGroup_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceGroupSpecImplementors = []string{"DeviceGroupSpec"}

func (ec *executionContext) _DeviceGroupSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceGroupSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceGroupSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceGroupSpec")
		case "externalId":
			out.Values[i] = ec._DeviceGroupSpec_externalId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceInfoImplementors = []string{"DeviceInfo"}

func (ec *executionContext) _DeviceInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceInfo")
		case "infoTimestamp":
			out.Values[i] = ec._DeviceInfo_infoTimestamp(ctx, field, obj)
		case "manufacturerSerialNumber":
			out.Values[i] = ec._DeviceInfo_manufacturerSerialNumber(ctx, field, obj)
		case "deviceSerialNumber":
			out.Values[i] = ec._DeviceInfo_deviceSerialNumber(ctx, field, obj)
		case "firmwareVersion":
			out.Values[i] = ec._DeviceInfo_firmwareVersion(ctx, field, obj)
		case "clockDelta":
			out.Values[i] = ec._DeviceInfo_clockDelta(ctx, field, obj)
		case "deviceModel":
			out.Values[i] = ec._DeviceInfo_deviceModel(ctx, field, obj)
		case "errorRegister":
			out.Values[i] = ec._DeviceInfo_errorRegister(ctx, field, obj)
		case "relayStates":
			out.Values[i] = ec._DeviceInfo_relayStates(ctx, field, obj)
		case "connectionState":
			out.Values[i] = ec._DeviceInfo_connectionState(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceSpecImplementors = []string{"DeviceSpec"}

func (ec *executionContext) _DeviceSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceSpec")
		case "dctId":
			out.Values[i] = ec._DeviceSpec_dctId(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._DeviceSpec_externalId(ctx, field, obj)
		case "communicationUnitLink":
			out.Values[i] = ec._DeviceSpec_communicationUnitLink(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._DeviceSpec_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var deviceStatusImplementors = []string{"DeviceStatus"}

func (ec *executionContext) _DeviceStatus(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceStatus")
		case "info":
			out.Values[i] = ec._DeviceStatus_info(ctx, field, obj)
		case "driverType":
			out.Values[i] = ec._DeviceStatus_driverType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverImplementors = []string{"Driver"}

func (ec *executionContext) _Driver(ctx context.Context, sel ast.SelectionSet, obj *model.Driver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Driver")
		case "spec":
			out.Values[i] = ec._Driver_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Driver_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverSpecImplementors = []string{"DriverSpec"}

func (ec *executionContext) _DriverSpec(ctx context.Context, sel ast.SelectionSet, obj *model.DriverSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverSpec")
		case "version":
			out.Values[i] = ec._DriverSpec_version(ctx, field, obj)
		case "listeningPort":
			out.Values[i] = ec._DriverSpec_listeningPort(ctx, field, obj)
		case "driverType":
			out.Values[i] = ec._DriverSpec_driverType(ctx, field, obj)
		case "maxConcurrentJobs":
			out.Values[i] = ec._DriverSpec_maxConcurrentJobs(ctx, field, obj)
		case "maxCascadeDepth":
			out.Values[i] = ec._DriverSpec_maxCascadeDepth(ctx, field, obj)
		case "typicalMemUsage":
			out.Values[i] = ec._DriverSpec_typicalMemUsage(ctx, field, obj)
		case "templates":
			out.Values[i] = ec._DriverSpec_templates(ctx, field, obj)
		case "displayName":
			out.Values[i] = ec._DriverSpec_displayName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverStatusImplementors = []string{"DriverStatus"}

func (ec *executionContext) _DriverStatus(ctx context.Context, sel ast.SelectionSet, obj *model.DriverStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverStatus")
		case "isLatest":
			out.Values[i] = ec._DriverStatus_isLatest(ctx, field, obj)
		case "updateFinished":
			out.Values[i] = ec._DriverStatus_updateFinished(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var driverTemplatesImplementors = []string{"DriverTemplates"}

func (ec *executionContext) _DriverTemplates(ctx context.Context, sel ast.SelectionSet, obj *model.DriverTemplates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverTemplatesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverTemplates")
		case "communicationTemplates":
			out.Values[i] = ec._DriverTemplates_communicationTemplates(ctx, field, obj)
		case "appProtocols":
			out.Values[i] = ec._DriverTemplates_appProtocols(ctx, field, obj)
		case "actionAttributes":
			out.Values[i] = ec._DriverTemplates_actionAttributes(ctx, field, obj)
		case "accessTemplates":
			out.Values[i] = ec._DriverTemplates_accessTemplates(ctx, field, obj)
		case "actionConstraints":
			out.Values[i] = ec._DriverTemplates_actionConstraints(ctx, field, obj)
		case "uknownDeviceDescriptors":
			out.Values[i] = ec._DriverTemplates_uknownDeviceDescriptors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var durationImplementors = []string{"Duration"}

func (ec *executionContext) _Duration(ctx context.Context, sel ast.SelectionSet, obj *model.Duration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, durationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Duration")
		case "seconds":
			out.Values[i] = ec._Duration_seconds(ctx, field, obj)
		case "nanos":
			out.Values[i] = ec._Duration_nanos(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emptyImplementors = []string{"Empty"}

func (ec *executionContext) _Empty(ctx context.Context, sel ast.SelectionSet, obj *model.Empty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emptyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Empty")
		case "_empty":
			out.Values[i] = ec._Empty__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventRecordImplementors = []string{"EventRecord"}

func (ec *executionContext) _EventRecord(ctx context.Context, sel ast.SelectionSet, obj *model.EventRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventRecord")
		case "timestamp":
			out.Values[i] = ec._EventRecord_timestamp(ctx, field, obj)
		case "eventId":
			out.Values[i] = ec._EventRecord_eventId(ctx, field, obj)
		case "eventCode":
			out.Values[i] = ec._EventRecord_eventCode(ctx, field, obj)
		case "eventText":
			out.Values[i] = ec._EventRecord_eventText(ctx, field, obj)
		case "eventSource":
			out.Values[i] = ec._EventRecord_eventSource(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var eventRecordsImplementors = []string{"EventRecords"}

func (ec *executionContext) _EventRecords(ctx context.Context, sel ast.SelectionSet, obj *model.EventRecords) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventRecordsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventRecords")
		case "values":
			out.Values[i] = ec._EventRecords_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldDescriptorImplementors = []string{"FieldDescriptor"}

func (ec *executionContext) _FieldDescriptor(ctx context.Context, sel ast.SelectionSet, obj *model.FieldDescriptor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldDescriptorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldDescriptor")
		case "isUserDefined":
			out.Values[i] = ec._FieldDescriptor_isUserDefined(ctx, field, obj)
		case "objectType":
			out.Values[i] = ec._FieldDescriptor_objectType(ctx, field, obj)
		case "gid":
			out.Values[i] = ec._FieldDescriptor_gid(ctx, field, obj)
		case "fieldId":
			out.Values[i] = ec._FieldDescriptor_fieldId(ctx, field, obj)
		case "jsPath":
			out.Values[i] = ec._FieldDescriptor_jsPath(ctx, field, obj)
		case "path":
			out.Values[i] = ec._FieldDescriptor_path(ctx, field, obj)
		case "label":
			out.Values[i] = ec._FieldDescriptor_label(ctx, field, obj)
		case "groupId":
			out.Values[i] = ec._FieldDescriptor_groupId(ctx, field, obj)
		case "dataType":
			out.Values[i] = ec._FieldDescriptor_dataType(ctx, field, obj)
		case "format":
			out.Values[i] = ec._FieldDescriptor_format(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._FieldDescriptor_unit(ctx, field, obj)
		case "precision":
			out.Values[i] = ec._FieldDescriptor_precision(ctx, field, obj)
		case "tooltip":
			out.Values[i] = ec._FieldDescriptor_tooltip(ctx, field, obj)
		case "required":
			out.Values[i] = ec._FieldDescriptor_required(ctx, field, obj)
		case "editable":
			out.Values[i] = ec._FieldDescriptor_editable(ctx, field, obj)
		case "visible":
			out.Values[i] = ec._FieldDescriptor_visible(ctx, field, obj)
		case "multiValue":
			out.Values[i] = ec._FieldDescriptor_multiValue(ctx, field, obj)
		case "secured":
			out.Values[i] = ec._FieldDescriptor_secured(ctx, field, obj)
		case "validation":
			out.Values[i] = ec._FieldDescriptor_validation(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec._FieldDescriptor_defaultValue(ctx, field, obj)
		case "sortable":
			out.Values[i] = ec._FieldDescriptor_sortable(ctx, field, obj)
		case "filterable":
			out.Values[i] = ec._FieldDescriptor_filterable(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldDescriptorOptionsImplementors = []string{"FieldDescriptorOptions"}

func (ec *executionContext) _FieldDescriptorOptions(ctx context.Context, sel ast.SelectionSet, obj *model.FieldDescriptorOptions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldDescriptorOptionsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldDescriptorOptions")
		case "options":
			out.Values[i] = ec._FieldDescriptorOptions_options(ctx, field, obj)
		case "complete":
			out.Values[i] = ec._FieldDescriptorOptions_complete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldDescriptorSelectorImplementors = []string{"FieldDescriptorSelector"}

func (ec *executionContext) _FieldDescriptorSelector(ctx context.Context, sel ast.SelectionSet, obj *model.FieldDescriptorSelector) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldDescriptorSelectorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldDescriptorSelector")
		case "objectType":
			out.Values[i] = ec._FieldDescriptorSelector_objectType(ctx, field, obj)
		case "gid":
			out.Values[i] = ec._FieldDescriptorSelector_gid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldValidationImplementors = []string{"FieldValidation"}

func (ec *executionContext) _FieldValidation(ctx context.Context, sel ast.SelectionSet, obj *model.FieldValidation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldValidationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldValidation")
		case "re":
			out.Values[i] = ec._FieldValidation_re(ctx, field, obj)
		case "minLength":
			out.Values[i] = ec._FieldValidation_minLength(ctx, field, obj)
		case "maxLength":
			out.Values[i] = ec._FieldValidation_maxLength(ctx, field, obj)
		case "minInteger":
			out.Values[i] = ec._FieldValidation_minInteger(ctx, field, obj)
		case "maxInteger":
			out.Values[i] = ec._FieldValidation_maxInteger(ctx, field, obj)
		case "minNumber":
			out.Values[i] = ec._FieldValidation_minNumber(ctx, field, obj)
		case "maxNumber":
			out.Values[i] = ec._FieldValidation_maxNumber(ctx, field, obj)
		case "options":
			out.Values[i] = ec._FieldValidation_options(ctx, field, obj)
		case "optionsSource":
			out.Values[i] = ec._FieldValidation_optionsSource(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldValueImplementors = []string{"FieldValue"}

func (ec *executionContext) _FieldValue(ctx context.Context, sel ast.SelectionSet, obj *model.FieldValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldValue")
		case "stringValue":
			out.Values[i] = ec._FieldValue_stringValue(ctx, field, obj)
		case "integerValue":
			out.Values[i] = ec._FieldValue_integerValue(ctx, field, obj)
		case "doubleValue":
			out.Values[i] = ec._FieldValue_doubleValue(ctx, field, obj)
		case "binaryValue":
			out.Values[i] = ec._FieldValue_binaryValue(ctx, field, obj)
		case "boolValue":
			out.Values[i] = ec._FieldValue_boolValue(ctx, field, obj)
		case "dateValue":
			out.Values[i] = ec._FieldValue_dateValue(ctx, field, obj)
		case "durationValue":
			out.Values[i] = ec._FieldValue_durationValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var fieldValuesImplementors = []string{"FieldValues"}

func (ec *executionContext) _FieldValues(ctx context.Context, sel ast.SelectionSet, obj *model.FieldValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldValues")
		case "attributes":
			out.Values[i] = ec._FieldValues_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getCryptoSecretRequestImplementors = []string{"GetCryptoSecretRequest"}

func (ec *executionContext) _GetCryptoSecretRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetCryptoSecretRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getCryptoSecretRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetCryptoSecretRequest")
		case "objectType":
			out.Values[i] = ec._GetCryptoSecretRequest_objectType(ctx, field, obj)
		case "driverType":
			out.Values[i] = ec._GetCryptoSecretRequest_driverType(ctx, field, obj)
		case "cryptoId":
			out.Values[i] = ec._GetCryptoSecretRequest_cryptoId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDeviceBulksRequestImplementors = []string{"GetDeviceBulksRequest"}

func (ec *executionContext) _GetDeviceBulksRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetDeviceBulksRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDeviceBulksRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDeviceBulksRequest")
		case "from":
			out.Values[i] = ec._GetDeviceBulksRequest_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._GetDeviceBulksRequest_to(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._GetDeviceBulksRequest_deviceId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDeviceDataRequestImplementors = []string{"GetDeviceDataRequest"}

func (ec *executionContext) _GetDeviceDataRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetDeviceDataRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDeviceDataRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDeviceDataRequest")
		case "from":
			out.Values[i] = ec._GetDeviceDataRequest_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._GetDeviceDataRequest_to(ctx, field, obj)
		case "series":
			out.Values[i] = ec._GetDeviceDataRequest_series(ctx, field, obj)
		case "filterIncludeStatus":
			out.Values[i] = ec._GetDeviceDataRequest_filterIncludeStatus(ctx, field, obj)
		case "filterExcludeStatus":
			out.Values[i] = ec._GetDeviceDataRequest_filterExcludeStatus(ctx, field, obj)
		case "snapshot":
			out.Values[i] = ec._GetDeviceDataRequest_snapshot(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDeviceDataSeriesSelectorImplementors = []string{"GetDeviceDataSeriesSelector"}

func (ec *executionContext) _GetDeviceDataSeriesSelector(ctx context.Context, sel ast.SelectionSet, obj *model.GetDeviceDataSeriesSelector) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDeviceDataSeriesSelectorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDeviceDataSeriesSelector")
		case "deviceId":
			out.Values[i] = ec._GetDeviceDataSeriesSelector_deviceId(ctx, field, obj)
		case "variableId":
			out.Values[i] = ec._GetDeviceDataSeriesSelector_variableId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var getDeviceEventsRequestImplementors = []string{"GetDeviceEventsRequest"}

func (ec *executionContext) _GetDeviceEventsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.GetDeviceEventsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getDeviceEventsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetDeviceEventsRequest")
		case "from":
			out.Values[i] = ec._GetDeviceEventsRequest_from(ctx, field, obj)
		case "to":
			out.Values[i] = ec._GetDeviceEventsRequest_to(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._GetDeviceEventsRequest_deviceId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var irregularProfileValuesImplementors = []string{"IrregularProfileValues"}

func (ec *executionContext) _IrregularProfileValues(ctx context.Context, sel ast.SelectionSet, obj *model.IrregularProfileValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, irregularProfileValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IrregularProfileValues")
		case "unit":
			out.Values[i] = ec._IrregularProfileValues_unit(ctx, field, obj)
		case "values":
			out.Values[i] = ec._IrregularProfileValues_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var irregularValueImplementors = []string{"IrregularValue"}

func (ec *executionContext) _IrregularValue(ctx context.Context, sel ast.SelectionSet, obj *model.IrregularValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, irregularValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IrregularValue")
		case "timestamp":
			out.Values[i] = ec._IrregularValue_timestamp(ctx, field, obj)
		case "value":
			out.Values[i] = ec._IrregularValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionImplementors = []string{"JobAction"}

func (ec *executionContext) _JobAction(ctx context.Context, sel ast.SelectionSet, obj *model.JobAction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobAction")
		case "actionId":
			out.Values[i] = ec._JobAction_actionId(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._JobAction_attributes(ctx, field, obj)
		case "getRegister":
			out.Values[i] = ec._JobAction_getRegister(ctx, field, obj)
		case "getPeriodicalProfile":
			out.Values[i] = ec._JobAction_getPeriodicalProfile(ctx, field, obj)
		case "getIrregularProfile":
			out.Values[i] = ec._JobAction_getIrregularProfile(ctx, field, obj)
		case "getEvents":
			out.Values[i] = ec._JobAction_getEvents(ctx, field, obj)
		case "getDeviceInfo":
			out.Values[i] = ec._JobAction_getDeviceInfo(ctx, field, obj)
		case "syncClock":
			out.Values[i] = ec._JobAction_syncClock(ctx, field, obj)
		case "setRelayState":
			out.Values[i] = ec._JobAction_setRelayState(ctx, field, obj)
		case "setDisconnectorState":
			out.Values[i] = ec._JobAction_setDisconnectorState(ctx, field, obj)
		case "getTou":
			out.Values[i] = ec._JobAction_getTou(ctx, field, obj)
		case "setTou":
			out.Values[i] = ec._JobAction_setTou(ctx, field, obj)
		case "setLimiter":
			out.Values[i] = ec._JobAction_setLimiter(ctx, field, obj)
		case "resetBillingPeriod":
			out.Values[i] = ec._JobAction_resetBillingPeriod(ctx, field, obj)
		case "fwUpdate":
			out.Values[i] = ec._JobAction_fwUpdate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionAttributesImplementors = []string{"JobActionAttributes"}

func (ec *executionContext) _JobActionAttributes(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionAttributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionAttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionAttributes")
		case "type":
			out.Values[i] = ec._JobActionAttributes_type(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._JobActionAttributes_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionContraintsImplementors = []string{"JobActionContraints"}

func (ec *executionContext) _JobActionContraints(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionContraints) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionContraintsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionContraints")
		case "getRegisterTypeName":
			out.Values[i] = ec._JobActionContraints_getRegisterTypeName(ctx, field, obj)
		case "getRegisterTypeAttributes":
			out.Values[i] = ec._JobActionContraints_getRegisterTypeAttributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobActionSetImplementors = []string{"JobActionSet"}

func (ec *executionContext) _JobActionSet(ctx context.Context, sel ast.SelectionSet, obj *model.JobActionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobActionSetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobActionSet")
		case "variables":
			out.Values[i] = ec._JobActionSet_variables(ctx, field, obj)
		case "getRegister":
			out.Values[i] = ec._JobActionSet_getRegister(ctx, field, obj)
		case "getPeriodicalProfile":
			out.Values[i] = ec._JobActionSet_getPeriodicalProfile(ctx, field, obj)
		case "getIrregularProfile":
			out.Values[i] = ec._JobActionSet_getIrregularProfile(ctx, field, obj)
		case "getEvents":
			out.Values[i] = ec._JobActionSet_getEvents(ctx, field, obj)
		case "getDeviceInfo":
			out.Values[i] = ec._JobActionSet_getDeviceInfo(ctx, field, obj)
		case "syncClock":
			out.Values[i] = ec._JobActionSet_syncClock(ctx, field, obj)
		case "setRelayState":
			out.Values[i] = ec._JobActionSet_setRelayState(ctx, field, obj)
		case "setDisconnectorState":
			out.Values[i] = ec._JobActionSet_setDisconnectorState(ctx, field, obj)
		case "getTou":
			out.Values[i] = ec._JobActionSet_getTou(ctx, field, obj)
		case "setTou":
			out.Values[i] = ec._JobActionSet_setTou(ctx, field, obj)
		case "setLimiter":
			out.Values[i] = ec._JobActionSet_setLimiter(ctx, field, obj)
		case "resetBillingPeriod":
			out.Values[i] = ec._JobActionSet_resetBillingPeriod(ctx, field, obj)
		case "fwUpdate":
			out.Values[i] = ec._JobActionSet_fwUpdate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDeviceImplementors = []string{"JobDevice"}

func (ec *executionContext) _JobDevice(ctx context.Context, sel ast.SelectionSet, obj *model.JobDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDevice")
		case "jobId":
			out.Values[i] = ec._JobDevice_jobId(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._JobDevice_deviceId(ctx, field, obj)
		case "externalId":
			out.Values[i] = ec._JobDevice_externalId(ctx, field, obj)
		case "deviceAttributes":
			out.Values[i] = ec._JobDevice_deviceAttributes(ctx, field, obj)
		case "connectionInfo":
			out.Values[i] = ec._JobDevice_connectionInfo(ctx, field, obj)
		case "appProtocol":
			out.Values[i] = ec._JobDevice_appProtocol(ctx, field, obj)
		case "timezone":
			out.Values[i] = ec._JobDevice_timezone(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobDeviceIdImplementors = []string{"JobDeviceId"}

func (ec *executionContext) _JobDeviceId(ctx context.Context, sel ast.SelectionSet, obj *model.JobDeviceID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobDeviceIdImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobDeviceId")
		case "jobId":
			out.Values[i] = ec._JobDeviceId_jobId(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._JobDeviceId_deviceId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobSettingsImplementors = []string{"JobSettings"}

func (ec *executionContext) _JobSettings(ctx context.Context, sel ast.SelectionSet, obj *model.JobSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobSettingsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobSettings")
		case "maxDuration":
			out.Values[i] = ec._JobSettings_maxDuration(ctx, field, obj)
		case "priority":
			out.Values[i] = ec._JobSettings_priority(ctx, field, obj)
		case "attempts":
			out.Values[i] = ec._JobSettings_attempts(ctx, field, obj)
		case "retryDelay":
			out.Values[i] = ec._JobSettings_retryDelay(ctx, field, obj)
		case "deferStart":
			out.Values[i] = ec._JobSettings_deferStart(ctx, field, obj)
		case "expiresAt":
			out.Values[i] = ec._JobSettings_expiresAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobStatusImplementors = []string{"JobStatus"}

func (ec *executionContext) _JobStatus(ctx context.Context, sel ast.SelectionSet, obj *model.JobStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobStatus")
		case "status":
			out.Values[i] = ec._JobStatus_status(ctx, field, obj)
		case "code":
			out.Values[i] = ec._JobStatus_code(ctx, field, obj)
		case "results":
			out.Values[i] = ec._JobStatus_results(ctx, field, obj)
		case "startedAt":
			out.Values[i] = ec._JobStatus_startedAt(ctx, field, obj)
		case "finishedAt":
			out.Values[i] = ec._JobStatus_finishedAt(ctx, field, obj)
		case "attemptsDone":
			out.Values[i] = ec._JobStatus_attemptsDone(ctx, field, obj)
		case "deviceInfo":
			out.Values[i] = ec._JobStatus_deviceInfo(ctx, field, obj)
		case "queueId":
			out.Values[i] = ec._JobStatus_queueId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listBulkJobsRequestImplementors = []string{"ListBulkJobsRequest"}

func (ec *executionContext) _ListBulkJobsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.ListBulkJobsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listBulkJobsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListBulkJobsRequest")
		case "bulkId":
			out.Values[i] = ec._ListBulkJobsRequest_bulkId(ctx, field, obj)
		case "selector":
			out.Values[i] = ec._ListBulkJobsRequest_selector(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listDeviceGroupDevicesRequestImplementors = []string{"ListDeviceGroupDevicesRequest"}

func (ec *executionContext) _ListDeviceGroupDevicesRequest(ctx context.Context, sel ast.SelectionSet, obj *model.ListDeviceGroupDevicesRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listDeviceGroupDevicesRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListDeviceGroupDevicesRequest")
		case "groupId":
			out.Values[i] = ec._ListDeviceGroupDevicesRequest_groupId(ctx, field, obj)
		case "selector":
			out.Values[i] = ec._ListDeviceGroupDevicesRequest_selector(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listFieldDescriptorOptionsRequestImplementors = []string{"ListFieldDescriptorOptionsRequest"}

func (ec *executionContext) _ListFieldDescriptorOptionsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.ListFieldDescriptorOptionsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listFieldDescriptorOptionsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListFieldDescriptorOptionsRequest")
		case "optionsSource":
			out.Values[i] = ec._ListFieldDescriptorOptionsRequest_optionsSource(ctx, field, obj)
		case "filterContains":
			out.Values[i] = ec._ListFieldDescriptorOptionsRequest_filterContains(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfBulkImplementors = []string{"ListOfBulk"}

func (ec *executionContext) _ListOfBulk(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfBulk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfBulkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfBulk")
		case "items":
			out.Values[i] = ec._ListOfBulk_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfBulk_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfBulkJobImplementors = []string{"ListOfBulkJob"}

func (ec *executionContext) _ListOfBulkJob(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfBulkJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfBulkJobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfBulkJob")
		case "items":
			out.Values[i] = ec._ListOfBulkJob_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfBulkJob_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfCommunicationBusImplementors = []string{"ListOfCommunicationBus"}

func (ec *executionContext) _ListOfCommunicationBus(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfCommunicationBus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfCommunicationBusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfCommunicationBus")
		case "items":
			out.Values[i] = ec._ListOfCommunicationBus_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfCommunicationBus_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfCommunicationUnitImplementors = []string{"ListOfCommunicationUnit"}

func (ec *executionContext) _ListOfCommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfCommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfCommunicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfCommunicationUnit")
		case "items":
			out.Values[i] = ec._ListOfCommunicationUnit_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfCommunicationUnit_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfCronJobImplementors = []string{"ListOfCronJob"}

func (ec *executionContext) _ListOfCronJob(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfCronJob) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfCronJobImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfCronJob")
		case "items":
			out.Values[i] = ec._ListOfCronJob_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfCronJob_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceImplementors = []string{"ListOfDevice"}

func (ec *executionContext) _ListOfDevice(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDevice")
		case "items":
			out.Values[i] = ec._ListOfDevice_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDevice_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceCommunicationUnitImplementors = []string{"ListOfDeviceCommunicationUnit"}

func (ec *executionContext) _ListOfDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceCommunicationUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceCommunicationUnitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceCommunicationUnit")
		case "items":
			out.Values[i] = ec._ListOfDeviceCommunicationUnit_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDeviceCommunicationUnit_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceCommunicationUnitChangeImplementors = []string{"ListOfDeviceCommunicationUnitChange"}

func (ec *executionContext) _ListOfDeviceCommunicationUnitChange(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceCommunicationUnitChange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceCommunicationUnitChangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceCommunicationUnitChange")
		case "items":
			out.Values[i] = ec._ListOfDeviceCommunicationUnitChange_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDeviceCommunicationUnitChange_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceConfigurationRegisterImplementors = []string{"ListOfDeviceConfigurationRegister"}

func (ec *executionContext) _ListOfDeviceConfigurationRegister(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceConfigurationRegister) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceConfigurationRegisterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceConfigurationRegister")
		case "items":
			out.Values[i] = ec._ListOfDeviceConfigurationRegister_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDeviceConfigurationRegister_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceConfigurationTemplateImplementors = []string{"ListOfDeviceConfigurationTemplate"}

func (ec *executionContext) _ListOfDeviceConfigurationTemplate(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceConfigurationTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceConfigurationTemplateImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceConfigurationTemplate")
		case "items":
			out.Values[i] = ec._ListOfDeviceConfigurationTemplate_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDeviceConfigurationTemplate_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceDataInfoImplementors = []string{"ListOfDeviceDataInfo"}

func (ec *executionContext) _ListOfDeviceDataInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceDataInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceDataInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceDataInfo")
		case "items":
			out.Values[i] = ec._ListOfDeviceDataInfo_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDeviceDataInfo_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDeviceGroupImplementors = []string{"ListOfDeviceGroup"}

func (ec *executionContext) _ListOfDeviceGroup(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDeviceGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDeviceGroupImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDeviceGroup")
		case "items":
			out.Values[i] = ec._ListOfDeviceGroup_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDeviceGroup_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfDriverImplementors = []string{"ListOfDriver"}

func (ec *executionContext) _ListOfDriver(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfDriver) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfDriverImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfDriver")
		case "items":
			out.Values[i] = ec._ListOfDriver_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfDriver_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfFieldDescriptorImplementors = []string{"ListOfFieldDescriptor"}

func (ec *executionContext) _ListOfFieldDescriptor(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfFieldDescriptor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfFieldDescriptorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfFieldDescriptor")
		case "items":
			out.Values[i] = ec._ListOfFieldDescriptor_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfFieldDescriptor_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfIdImplementors = []string{"ListOfId"}

func (ec *executionContext) _ListOfId(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfIdImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfId")
		case "id":
			out.Values[i] = ec._ListOfId_id(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfJobDeviceImplementors = []string{"ListOfJobDevice"}

func (ec *executionContext) _ListOfJobDevice(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfJobDevice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfJobDeviceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfJobDevice")
		case "list":
			out.Values[i] = ec._ListOfJobDevice_list(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfJobDevice_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfJobDeviceIdImplementors = []string{"ListOfJobDeviceId"}

func (ec *executionContext) _ListOfJobDeviceId(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfJobDeviceID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfJobDeviceIdImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfJobDeviceId")
		case "list":
			out.Values[i] = ec._ListOfJobDeviceId_list(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfJobDeviceId_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfModemPoolImplementors = []string{"ListOfModemPool"}

func (ec *executionContext) _ListOfModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfModemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfModemPool")
		case "items":
			out.Values[i] = ec._ListOfModemPool_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfModemPool_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfStringImplementors = []string{"ListOfString"}

func (ec *executionContext) _ListOfString(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfString")
		case "items":
			out.Values[i] = ec._ListOfString_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfTimeOfUseTableImplementors = []string{"ListOfTimeOfUseTable"}

func (ec *executionContext) _ListOfTimeOfUseTable(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfTimeOfUseTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfTimeOfUseTableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfTimeOfUseTable")
		case "items":
			out.Values[i] = ec._ListOfTimeOfUseTable_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfTimeOfUseTable_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listOfVariableImplementors = []string{"ListOfVariable"}

func (ec *executionContext) _ListOfVariable(ctx context.Context, sel ast.SelectionSet, obj *model.ListOfVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listOfVariableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListOfVariable")
		case "items":
			out.Values[i] = ec._ListOfVariable_items(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._ListOfVariable_totalCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSelectorImplementors = []string{"ListSelector"}

func (ec *executionContext) _ListSelector(ctx context.Context, sel ast.SelectionSet, obj *model.ListSelector) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSelectorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSelector")
		case "pageSize":
			out.Values[i] = ec._ListSelector_pageSize(ctx, field, obj)
		case "offset":
			out.Values[i] = ec._ListSelector_offset(ctx, field, obj)
		case "sortBy":
			out.Values[i] = ec._ListSelector_sortBy(ctx, field, obj)
		case "filterBy":
			out.Values[i] = ec._ListSelector_filterBy(ctx, field, obj)
		case "fields":
			out.Values[i] = ec._ListSelector_fields(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSelectorFilterByImplementors = []string{"ListSelectorFilterBy"}

func (ec *executionContext) _ListSelectorFilterBy(ctx context.Context, sel ast.SelectionSet, obj *model.ListSelectorFilterBy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSelectorFilterByImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSelectorFilterBy")
		case "path":
			out.Values[i] = ec._ListSelectorFilterBy_path(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._ListSelectorFilterBy_operator(ctx, field, obj)
		case "dataType":
			out.Values[i] = ec._ListSelectorFilterBy_dataType(ctx, field, obj)
		case "text":
			out.Values[i] = ec._ListSelectorFilterBy_text(ctx, field, obj)
		case "integer":
			out.Values[i] = ec._ListSelectorFilterBy_integer(ctx, field, obj)
		case "number":
			out.Values[i] = ec._ListSelectorFilterBy_number(ctx, field, obj)
		case "boolean":
			out.Values[i] = ec._ListSelectorFilterBy_boolean(ctx, field, obj)
		case "date":
			out.Values[i] = ec._ListSelectorFilterBy_date(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listSelectorSortByImplementors = []string{"ListSelectorSortBy"}

func (ec *executionContext) _ListSelectorSortBy(ctx context.Context, sel ast.SelectionSet, obj *model.ListSelectorSortBy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listSelectorSortByImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListSelectorSortBy")
		case "path":
			out.Values[i] = ec._ListSelectorSortBy_path(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._ListSelectorSortBy_desc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var listValueImplementors = []string{"ListValue"}

func (ec *executionContext) _ListValue(ctx context.Context, sel ast.SelectionSet, obj *model.ListValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListValue")
		case "values":
			out.Values[i] = ec._ListValue_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var measuredValueImplementors = []string{"MeasuredValue"}

func (ec *executionContext) _MeasuredValue(ctx context.Context, sel ast.SelectionSet, obj *model.MeasuredValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, measuredValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MeasuredValue")
		case "status":
			out.Values[i] = ec._MeasuredValue_status(ctx, field, obj)
		case "exponent":
			out.Values[i] = ec._MeasuredValue_exponent(ctx, field, obj)
		case "doubleValue":
			out.Values[i] = ec._MeasuredValue_doubleValue(ctx, field, obj)
		case "integerValue":
			out.Values[i] = ec._MeasuredValue_integerValue(ctx, field, obj)
		case "stringValue":
			out.Values[i] = ec._MeasuredValue_stringValue(ctx, field, obj)
		case "timestampValue":
			out.Values[i] = ec._MeasuredValue_timestampValue(ctx, field, obj)
		case "timestampTzValue":
			out.Values[i] = ec._MeasuredValue_timestampTzValue(ctx, field, obj)
		case "boolValue":
			out.Values[i] = ec._MeasuredValue_boolValue(ctx, field, obj)
		case "nstatus":
			out.Values[i] = ec._MeasuredValue_nstatus(ctx, field, obj)
		case "peakTs":
			out.Values[i] = ec._MeasuredValue_peakTs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metadataFieldsImplementors = []string{"MetadataFields"}

func (ec *executionContext) _MetadataFields(ctx context.Context, sel ast.SelectionSet, obj *model.MetadataFields) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metadataFieldsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MetadataFields")
		case "id":
			out.Values[i] = ec._MetadataFields_id(ctx, field, obj)
		case "generation":
			out.Values[i] = ec._MetadataFields_generation(ctx, field, obj)
		case "fields":
			out.Values[i] = ec._MetadataFields_fields(ctx, field, obj)
		case "managedFields":
			out.Values[i] = ec._MetadataFields_managedFields(ctx, field, obj)
		case "name":
			out.Values[i] = ec._MetadataFields_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemInfoImplementors = []string{"ModemInfo"}

func (ec *executionContext) _ModemInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ModemInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemInfo")
		case "modemId":
			out.Values[i] = ec._ModemInfo_modemId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ModemInfo_name(ctx, field, obj)
		case "atInit":
			out.Values[i] = ec._ModemInfo_atInit(ctx, field, obj)
		case "atDial":
			out.Values[i] = ec._ModemInfo_atDial(ctx, field, obj)
		case "atHangup":
			out.Values[i] = ec._ModemInfo_atHangup(ctx, field, obj)
		case "atEscape":
			out.Values[i] = ec._ModemInfo_atEscape(ctx, field, obj)
		case "connectTimeout":
			out.Values[i] = ec._ModemInfo_connectTimeout(ctx, field, obj)
		case "commandTimeout":
			out.Values[i] = ec._ModemInfo_commandTimeout(ctx, field, obj)
		case "tcpip":
			out.Values[i] = ec._ModemInfo_tcpip(ctx, field, obj)
		case "serialOverIp":
			out.Values[i] = ec._ModemInfo_serialOverIp(ctx, field, obj)
		case "serialBaudRate":
			out.Values[i] = ec._ModemInfo_serialBaudRate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolImplementors = []string{"ModemPool"}

func (ec *executionContext) _ModemPool(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPool) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPool")
		case "spec":
			out.Values[i] = ec._ModemPool_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ModemPool_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._ModemPool_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolSpecImplementors = []string{"ModemPoolSpec"}

func (ec *executionContext) _ModemPoolSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPoolSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPoolSpec")
		case "_empty":
			out.Values[i] = ec._ModemPoolSpec__empty(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var modemPoolStatusImplementors = []string{"ModemPoolStatus"}

func (ec *executionContext) _ModemPoolStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ModemPoolStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, modemPoolStatusImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ModemPoolStatus")
		case "modems":
			out.Values[i] = ec._ModemPoolStatus_modems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var networkMapImplementors = []string{"NetworkMap"}

func (ec *executionContext) _NetworkMap(ctx context.Context, sel ast.SelectionSet, obj *model.NetworkMap) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkMapImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NetworkMap")
		case "nodes":
			out.Values[i] = ec._NetworkMap_nodes(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._NetworkMap_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var openIdConfigurationImplementors = []string{"OpenIdConfiguration"}

func (ec *executionContext) _OpenIdConfiguration(ctx context.Context, sel ast.SelectionSet, obj *model.OpenIDConfiguration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, openIdConfigurationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OpenIdConfiguration")
		case "content":
			out.Values[i] = ec._OpenIdConfiguration_content(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileBlockImplementors = []string{"ProfileBlock"}

func (ec *executionContext) _ProfileBlock(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileBlock) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileBlockImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileBlock")
		case "startTimestamp":
			out.Values[i] = ec._ProfileBlock_startTimestamp(ctx, field, obj)
		case "values":
			out.Values[i] = ec._ProfileBlock_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var profileValuesImplementors = []string{"ProfileValues"}

func (ec *executionContext) _ProfileValues(ctx context.Context, sel ast.SelectionSet, obj *model.ProfileValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, profileValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProfileValues")
		case "period":
			out.Values[i] = ec._ProfileValues_period(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._ProfileValues_unit(ctx, field, obj)
		case "blocks":
			out.Values[i] = ec._ProfileValues_blocks(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var proxyBulkImplementors = []string{"ProxyBulk"}

func (ec *executionContext) _ProxyBulk(ctx context.Context, sel ast.SelectionSet, obj *model.ProxyBulk) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, proxyBulkImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProxyBulk")
		case "spec":
			out.Values[i] = ec._ProxyBulk_spec(ctx, field, obj)
		case "status":
			out.Values[i] = ec._ProxyBulk_status(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._ProxyBulk_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var proxyBulkSpecImplementors = []string{"ProxyBulkSpec"}

func (ec *executionContext) _ProxyBulkSpec(ctx context.Context, sel ast.SelectionSet, obj *model.ProxyBulkSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, proxyBulkSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProxyBulkSpec")
		case "correlationId":
			out.Values[i] = ec._ProxyBulkSpec_correlationId(ctx, field, obj)
		case "driverType":
			out.Values[i] = ec._ProxyBulkSpec_driverType(ctx, field, obj)
		case "devices":
			out.Values[i] = ec._ProxyBulkSpec_devices(ctx, field, obj)
		case "settings":
			out.Values[i] = ec._ProxyBulkSpec_settings(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._ProxyBulkSpec_actions(ctx, field, obj)
		case "webhookUrl":
			out.Values[i] = ec._ProxyBulkSpec_webhookUrl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "listBulks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listBulks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listBulkJobs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listBulkJobs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBulkJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBulkJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateBulkJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateBulkJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cancelBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancelBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cancelBulkJobs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cancelBulkJobs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createProxyBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createProxyBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getProxyBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getProxyBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateBulk":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateBulk(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceBulks":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceBulks(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getApplicationConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getApplicationConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateApplicationConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateApplicationConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "synchronizeComponentConfig":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_synchronizeComponentConfig(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listCronJobs":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCronJobs(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "runCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_runCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "pauseCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pauseCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "resumeCronJob":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_resumeCronJob(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCryptoSecret":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCryptoSecret(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "setCryptoSecret":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setCryptoSecret(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDeviceConfigurationRegister":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDeviceConfigurationRegister(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceConfigurationRegisters":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceConfigurationRegisters(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceConfigurationRegister":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceConfigurationRegister(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateDeviceConfigurationRegister":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateDeviceConfigurationRegister(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteDeviceConfigurationRegister":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteDeviceConfigurationRegister(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDeviceConfigurationTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDeviceConfigurationTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceConfigurationTemplates":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceConfigurationTemplates(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceConfigurationTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceConfigurationTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateDeviceConfigurationTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateDeviceConfigurationTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteDeviceConfigurationTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteDeviceConfigurationTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "addDeviceConfigurationRegisterToDeviceConfigurationTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addDeviceConfigurationRegisterToDeviceConfigurationTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_removeDeviceConfigurationRegisterFromDeviceConfigurationTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceData":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceDataInfo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceDataInfo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceDataRegisters":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceDataRegisters(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceDataProfiles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceDataProfiles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceDataIrregularProfiles":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceDataIrregularProfiles(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceEvents":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceEvents(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteCommunicationUnit":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteCommunicationUnit(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getCommunicationUnitNetworkMap":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCommunicationUnitNetworkMap(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createCommunicationBus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createCommunicationBus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listCommunicationBuses":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listCommunicationBuses(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteCommunicationBus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteCommunicationBus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "addCommunicationUnitsToCommunicationBus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addCommunicationUnitsToCommunicationBus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "removeCommunicationUnitsFromCommunicationBus":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_removeCommunicationUnitsFromCommunicationBus(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDevices":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDevices(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteDevice":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteDevice(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceInfo":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceInfo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "setDeviceCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setDeviceCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceCommunicationUnits":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceCommunicationUnits(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceCommunicationUnitChanges":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceCommunicationUnitChanges(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceDeviceGroups":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceDeviceGroups(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceNetworkMap":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceNetworkMap(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceGroups":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceGroups(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteDeviceGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteDeviceGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "addDevicesToGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addDevicesToGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "removeDevicesFromGroup":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_removeDevicesFromGroup(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDeviceGroupDevices":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDeviceGroupDevices(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listModemPools":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listModemPools(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteModemPool":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteModemPool(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteModem":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteModem(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listDrivers":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listDrivers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getDriver":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDriver(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createFieldDescriptor":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createFieldDescriptor(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateFieldDescriptor":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateFieldDescriptor(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteFieldDescriptor":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteFieldDescriptor(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listFieldDescriptors":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFieldDescriptors(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listFieldDescriptorOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFieldDescriptorOptions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateObjectFields":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateObjectFields(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getOpenIdConfiguration":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOpenIdConfiguration(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createTimeOfUseTable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createTimeOfUseTable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listTimeOfUseTables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listTimeOfUseTables(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getTimeOfUseTable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getTimeOfUseTable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateTimeOfUseTable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateTimeOfUseTable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteTimeOfUseTable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteTimeOfUseTable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "createVariable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createVariable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listVariables":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listVariables(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getVariable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVariable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "updateVariable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateVariable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "deleteVariable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteVariable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "addRegisterToVariable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_addRegisterToVariable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "removeRegisterFromVariable":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_removeRegisterFromVariable(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerValueImplementors = []string{"RegisterValue"}

func (ec *executionContext) _RegisterValue(ctx context.Context, sel ast.SelectionSet, obj *model.RegisterValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterValue")
		case "timestamp":
			out.Values[i] = ec._RegisterValue_timestamp(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._RegisterValue_unit(ctx, field, obj)
		case "value":
			out.Values[i] = ec._RegisterValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registerValuesImplementors = []string{"RegisterValues"}

func (ec *executionContext) _RegisterValues(ctx context.Context, sel ast.SelectionSet, obj *model.RegisterValues) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registerValuesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegisterValues")
		case "values":
			out.Values[i] = ec._RegisterValues_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var relayStateRecordImplementors = []string{"RelayStateRecord"}

func (ec *executionContext) _RelayStateRecord(ctx context.Context, sel ast.SelectionSet, obj *model.RelayStateRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, relayStateRecordImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RelayStateRecord")
		case "relayId":
			out.Values[i] = ec._RelayStateRecord_relayId(ctx, field, obj)
		case "state":
			out.Values[i] = ec._RelayStateRecord_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var removeCommunicationUnitsFromCommunicationBusRequestImplementors = []string{"RemoveCommunicationUnitsFromCommunicationBusRequest"}

func (ec *executionContext) _RemoveCommunicationUnitsFromCommunicationBusRequest(ctx context.Context, sel ast.SelectionSet, obj *model.RemoveCommunicationUnitsFromCommunicationBusRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeCommunicationUnitsFromCommunicationBusRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveCommunicationUnitsFromCommunicationBusRequest")
		case "communicationBusId":
			out.Values[i] = ec._RemoveCommunicationUnitsFromCommunicationBusRequest_communicationBusId(ctx, field, obj)
		case "communicationUnitId":
			out.Values[i] = ec._RemoveCommunicationUnitsFromCommunicationBusRequest_communicationUnitId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var removeDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestImplementors = []string{"RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest"}

func (ec *executionContext) _RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest(ctx context.Context, sel ast.SelectionSet, obj *model.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest")
		case "dctId":
			out.Values[i] = ec._RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_dctId(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest_registerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var removeDevicesFromGroupRequestImplementors = []string{"RemoveDevicesFromGroupRequest"}

func (ec *executionContext) _RemoveDevicesFromGroupRequest(ctx context.Context, sel ast.SelectionSet, obj *model.RemoveDevicesFromGroupRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeDevicesFromGroupRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveDevicesFromGroupRequest")
		case "groupId":
			out.Values[i] = ec._RemoveDevicesFromGroupRequest_groupId(ctx, field, obj)
		case "deviceId":
			out.Values[i] = ec._RemoveDevicesFromGroupRequest_deviceId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var removeRegisterFromVariableRequestImplementors = []string{"RemoveRegisterFromVariableRequest"}

func (ec *executionContext) _RemoveRegisterFromVariableRequest(ctx context.Context, sel ast.SelectionSet, obj *model.RemoveRegisterFromVariableRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, removeRegisterFromVariableRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RemoveRegisterFromVariableRequest")
		case "variableId":
			out.Values[i] = ec._RemoveRegisterFromVariableRequest_variableId(ctx, field, obj)
		case "registerId":
			out.Values[i] = ec._RemoveRegisterFromVariableRequest_registerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var seasonImplementors = []string{"Season"}

func (ec *executionContext) _Season(ctx context.Context, sel ast.SelectionSet, obj *model.Season) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, seasonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Season")
		case "id":
			out.Values[i] = ec._Season_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Season_name(ctx, field, obj)
		case "startYear":
			out.Values[i] = ec._Season_startYear(ctx, field, obj)
		case "startMonth":
			out.Values[i] = ec._Season_startMonth(ctx, field, obj)
		case "startDay":
			out.Values[i] = ec._Season_startDay(ctx, field, obj)
		case "weekId":
			out.Values[i] = ec._Season_weekId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setCryptoSecretRequestImplementors = []string{"SetCryptoSecretRequest"}

func (ec *executionContext) _SetCryptoSecretRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetCryptoSecretRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setCryptoSecretRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetCryptoSecretRequest")
		case "objectType":
			out.Values[i] = ec._SetCryptoSecretRequest_objectType(ctx, field, obj)
		case "driverType":
			out.Values[i] = ec._SetCryptoSecretRequest_driverType(ctx, field, obj)
		case "cryptoId":
			out.Values[i] = ec._SetCryptoSecretRequest_cryptoId(ctx, field, obj)
		case "accessLevel":
			out.Values[i] = ec._SetCryptoSecretRequest_accessLevel(ctx, field, obj)
		case "keyId":
			out.Values[i] = ec._SetCryptoSecretRequest_keyId(ctx, field, obj)
		case "decryptionSecretId":
			out.Values[i] = ec._SetCryptoSecretRequest_decryptionSecretId(ctx, field, obj)
		case "sessionKeyDecryptionMethod":
			out.Values[i] = ec._SetCryptoSecretRequest_sessionKeyDecryptionMethod(ctx, field, obj)
		case "sessionKey":
			out.Values[i] = ec._SetCryptoSecretRequest_sessionKey(ctx, field, obj)
		case "dataDecryptionMethod":
			out.Values[i] = ec._SetCryptoSecretRequest_dataDecryptionMethod(ctx, field, obj)
		case "dataDecryptionIv":
			out.Values[i] = ec._SetCryptoSecretRequest_dataDecryptionIv(ctx, field, obj)
		case "data":
			out.Values[i] = ec._SetCryptoSecretRequest_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setDeviceCommunicationUnitsRequestImplementors = []string{"SetDeviceCommunicationUnitsRequest"}

func (ec *executionContext) _SetDeviceCommunicationUnitsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetDeviceCommunicationUnitsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setDeviceCommunicationUnitsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetDeviceCommunicationUnitsRequest")
		case "deviceId":
			out.Values[i] = ec._SetDeviceCommunicationUnitsRequest_deviceId(ctx, field, obj)
		case "communicationUnits":
			out.Values[i] = ec._SetDeviceCommunicationUnitsRequest_communicationUnits(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setFieldsSpecImplementors = []string{"SetFieldsSpec"}

func (ec *executionContext) _SetFieldsSpec(ctx context.Context, sel ast.SelectionSet, obj *model.SetFieldsSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setFieldsSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetFieldsSpec")
		case "fields":
			out.Values[i] = ec._SetFieldsSpec_fields(ctx, field, obj)
		case "objectType":
			out.Values[i] = ec._SetFieldsSpec_objectType(ctx, field, obj)
		case "objectId":
			out.Values[i] = ec._SetFieldsSpec_objectId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setModemPoolRequestImplementors = []string{"SetModemPoolRequest"}

func (ec *executionContext) _SetModemPoolRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetModemPoolRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setModemPoolRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetModemPoolRequest")
		case "spec":
			out.Values[i] = ec._SetModemPoolRequest_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._SetModemPoolRequest_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var setModemRequestImplementors = []string{"SetModemRequest"}

func (ec *executionContext) _SetModemRequest(ctx context.Context, sel ast.SelectionSet, obj *model.SetModemRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, setModemRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SetModemRequest")
		case "poolId":
			out.Values[i] = ec._SetModemRequest_poolId(ctx, field, obj)
		case "modem":
			out.Values[i] = ec._SetModemRequest_modem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var specialDayImplementors = []string{"SpecialDay"}

func (ec *executionContext) _SpecialDay(ctx context.Context, sel ast.SelectionSet, obj *model.SpecialDay) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, specialDayImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SpecialDay")
		case "year":
			out.Values[i] = ec._SpecialDay_year(ctx, field, obj)
		case "month":
			out.Values[i] = ec._SpecialDay_month(ctx, field, obj)
		case "day":
			out.Values[i] = ec._SpecialDay_day(ctx, field, obj)
		case "dayId":
			out.Values[i] = ec._SpecialDay_dayId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var stringValueImplementors = []string{"StringValue"}

func (ec *executionContext) _StringValue(ctx context.Context, sel ast.SelectionSet, obj *model.StringValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stringValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StringValue")
		case "value":
			out.Values[i] = ec._StringValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var structImplementors = []string{"Struct"}

func (ec *executionContext) _Struct(ctx context.Context, sel ast.SelectionSet, obj *model.Struct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, structImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Struct")
		case "fields":
			out.Values[i] = ec._Struct_fields(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var switchingImplementors = []string{"Switching"}

func (ec *executionContext) _Switching(ctx context.Context, sel ast.SelectionSet, obj *model.Switching) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, switchingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Switching")
		case "hour":
			out.Values[i] = ec._Switching_hour(ctx, field, obj)
		case "minute":
			out.Values[i] = ec._Switching_minute(ctx, field, obj)
		case "tariff":
			out.Values[i] = ec._Switching_tariff(ctx, field, obj)
		case "relays":
			out.Values[i] = ec._Switching_relays(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timeOfUseTableImplementors = []string{"TimeOfUseTable"}

func (ec *executionContext) _TimeOfUseTable(ctx context.Context, sel ast.SelectionSet, obj *model.TimeOfUseTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeOfUseTableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeOfUseTable")
		case "spec":
			out.Values[i] = ec._TimeOfUseTable_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._TimeOfUseTable_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timeOfUseTableSpecImplementors = []string{"TimeOfUseTableSpec"}

func (ec *executionContext) _TimeOfUseTableSpec(ctx context.Context, sel ast.SelectionSet, obj *model.TimeOfUseTableSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timeOfUseTableSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimeOfUseTableSpec")
		case "expiesAt":
			out.Values[i] = ec._TimeOfUseTableSpec_expiesAt(ctx, field, obj)
		case "hdoGroupId":
			out.Values[i] = ec._TimeOfUseTableSpec_hdoGroupId(ctx, field, obj)
		case "activateAt":
			out.Values[i] = ec._TimeOfUseTableSpec_activateAt(ctx, field, obj)
		case "seasons":
			out.Values[i] = ec._TimeOfUseTableSpec_seasons(ctx, field, obj)
		case "weeks":
			out.Values[i] = ec._TimeOfUseTableSpec_weeks(ctx, field, obj)
		case "dayProfiles":
			out.Values[i] = ec._TimeOfUseTableSpec_dayProfiles(ctx, field, obj)
		case "specialDays":
			out.Values[i] = ec._TimeOfUseTableSpec_specialDays(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topologyEdgeImplementors = []string{"TopologyEdge"}

func (ec *executionContext) _TopologyEdge(ctx context.Context, sel ast.SelectionSet, obj *model.TopologyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topologyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopologyEdge")
		case "fromXId":
			out.Values[i] = ec._TopologyEdge_fromXId(ctx, field, obj)
		case "toXId":
			out.Values[i] = ec._TopologyEdge_toXId(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._TopologyEdge_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var topologyNodeImplementors = []string{"TopologyNode"}

func (ec *executionContext) _TopologyNode(ctx context.Context, sel ast.SelectionSet, obj *model.TopologyNode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, topologyNodeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TopologyNode")
		case "xId":
			out.Values[i] = ec._TopologyNode_xId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._TopologyNode_type(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._TopologyNode_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateMetadataImplementors = []string{"UpdateMetadata"}

func (ec *executionContext) _UpdateMetadata(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateMetadata) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateMetadataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateMetadata")
		case "metadata":
			out.Values[i] = ec._UpdateMetadata_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var updateObjectFieldsRequestImplementors = []string{"UpdateObjectFieldsRequest"}

func (ec *executionContext) _UpdateObjectFieldsRequest(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateObjectFieldsRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateObjectFieldsRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateObjectFieldsRequest")
		case "spec":
			out.Values[i] = ec._UpdateObjectFieldsRequest_spec(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var valueImplementors = []string{"Value"}

func (ec *executionContext) _Value(ctx context.Context, sel ast.SelectionSet, obj *model.Value) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Value")
		case "nullValue":
			out.Values[i] = ec._Value_nullValue(ctx, field, obj)
		case "numberValue":
			out.Values[i] = ec._Value_numberValue(ctx, field, obj)
		case "stringValue":
			out.Values[i] = ec._Value_stringValue(ctx, field, obj)
		case "boolValue":
			out.Values[i] = ec._Value_boolValue(ctx, field, obj)
		case "structValue":
			out.Values[i] = ec._Value_structValue(ctx, field, obj)
		case "listValue":
			out.Values[i] = ec._Value_listValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var variableImplementors = []string{"Variable"}

func (ec *executionContext) _Variable(ctx context.Context, sel ast.SelectionSet, obj *model.Variable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, variableImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Variable")
		case "spec":
			out.Values[i] = ec._Variable_spec(ctx, field, obj)
		case "metadata":
			out.Values[i] = ec._Variable_metadata(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var variableDeviceDataImplementors = []string{"VariableDeviceData"}

func (ec *executionContext) _VariableDeviceData(ctx context.Context, sel ast.SelectionSet, obj *model.VariableDeviceData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, variableDeviceDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VariableDeviceData")
		case "variableId":
			out.Values[i] = ec._VariableDeviceData_variableId(ctx, field, obj)
		case "timestamps":
			out.Values[i] = ec._VariableDeviceData_timestamps(ctx, field, obj)
		case "units":
			out.Values[i] = ec._VariableDeviceData_units(ctx, field, obj)
		case "values":
			out.Values[i] = ec._VariableDeviceData_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var variableSpecImplementors = []string{"VariableSpec"}

func (ec *executionContext) _VariableSpec(ctx context.Context, sel ast.SelectionSet, obj *model.VariableSpec) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, variableSpecImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VariableSpec")
		case "registerId":
			out.Values[i] = ec._VariableSpec_registerId(ctx, field, obj)
		case "dataType":
			out.Values[i] = ec._VariableSpec_dataType(ctx, field, obj)
		case "excludeDataFrom":
			out.Values[i] = ec._VariableSpec_excludeDataFrom(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var weekImplementors = []string{"Week"}

func (ec *executionContext) _Week(ctx context.Context, sel ast.SelectionSet, obj *model.Week) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weekImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Week")
		case "weekId":
			out.Values[i] = ec._Week_weekId(ctx, field, obj)
		case "weekName":
			out.Values[i] = ec._Week_weekName(ctx, field, obj)
		case "dayIds":
			out.Values[i] = ec._Week_dayIds(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapFieldValueImplementors = []string{"_mapFieldValue"}

func (ec *executionContext) __mapFieldValue(ctx context.Context, sel ast.SelectionSet, obj *model.MapFieldValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapFieldValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapFieldValue")
		case "key":
			out.Values[i] = ec.__mapFieldValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapFieldValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapListOfStringImplementors = []string{"_mapListOfString"}

func (ec *executionContext) __mapListOfString(ctx context.Context, sel ast.SelectionSet, obj *model.MapListOfString) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapListOfStringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapListOfString")
		case "key":
			out.Values[i] = ec.__mapListOfString_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapListOfString_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapValueImplementors = []string{"_mapValue"}

func (ec *executionContext) __mapValue(ctx context.Context, sel ast.SelectionSet, obj *model.MapValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapValue")
		case "key":
			out.Values[i] = ec.__mapValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapValue_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _mapstringImplementors = []string{"_mapstring"}

func (ec *executionContext) __mapstring(ctx context.Context, sel ast.SelectionSet, obj *model.Mapstring) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _mapstringImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_mapstring")
		case "key":
			out.Values[i] = ec.__mapstring_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec.__mapstring_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAccessLevelTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐAccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.AccessLevelTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAccessLevelTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐAccessLevelTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAccessLevelTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐAccessLevelTemplate(ctx context.Context, sel ast.SelectionSet, v *model.AccessLevelTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AccessLevelTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalOActionData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionData(ctx context.Context, sel ast.SelectionSet, v *model.ActionData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionData(ctx, sel, v)
}

func (ec *executionContext) marshalOActionFwUpdate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionFwUpdate(ctx context.Context, sel ast.SelectionSet, v *model.ActionFwUpdate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionFwUpdate(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetDeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetDeviceInfo(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetDeviceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetDeviceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetEvents2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetEvents(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetEvents) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetEvents(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetIrregularProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetIrregularProfile(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetIrregularProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetIrregularProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetPeriodicalProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetPeriodicalProfile(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetPeriodicalProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetPeriodicalProfile(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetRegister(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetRegister(ctx, sel, v)
}

func (ec *executionContext) marshalOActionGetTou2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionGetTou(ctx context.Context, sel ast.SelectionSet, v *model.ActionGetTou) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionGetTou(ctx, sel, v)
}

func (ec *executionContext) marshalOActionResetBillingPeriod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResetBillingPeriod(ctx context.Context, sel ast.SelectionSet, v *model.ActionResetBillingPeriod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionResetBillingPeriod(ctx, sel, v)
}

func (ec *executionContext) marshalOActionResult2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResult(ctx context.Context, sel ast.SelectionSet, v []*model.ActionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActionResult2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOActionResult2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResult(ctx context.Context, sel ast.SelectionSet, v *model.ActionResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResultCode(ctx context.Context, v any) (*model.ActionResultCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActionResultCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionResultCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionResultCode(ctx context.Context, sel ast.SelectionSet, v *model.ActionResultCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOActionSetDisconnectorState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetDisconnectorState(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetDisconnectorState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetDisconnectorState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetLimiter2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetLimiter(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetLimiter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetLimiter(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetRelayState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetRelayState(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetRelayState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetRelayState(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSetTou2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSetTou(ctx context.Context, sel ast.SelectionSet, v *model.ActionSetTou) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSetTou(ctx, sel, v)
}

func (ec *executionContext) marshalOActionSyncClock2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionSyncClock(ctx context.Context, sel ast.SelectionSet, v *model.ActionSyncClock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ActionSyncClock(ctx, sel, v)
}

func (ec *executionContext) unmarshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionType(ctx context.Context, v any) (*model.ActionType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ActionType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOActionType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐActionType(ctx context.Context, sel ast.SelectionSet, v *model.ActionType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOApplicationConfigDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationConfigDescriptor(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationConfigDescriptor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationConfigDescriptor(ctx, sel, v)
}

func (ec *executionContext) unmarshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, v any) ([]*model.ApplicationProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*model.ApplicationProtocol, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOApplicationProtocol2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, sel ast.SelectionSet, v []*model.ApplicationProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, v any) (*model.ApplicationProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ApplicationProtocol)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOApplicationProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocol(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOApplicationProtocolTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.ApplicationProtocolTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApplicationProtocolTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOApplicationProtocolTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐApplicationProtocolTemplate(ctx context.Context, sel ast.SelectionSet, v *model.ApplicationProtocolTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApplicationProtocolTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBigInt2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBigInt2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚕᚖbool(ctx context.Context, v any) ([]*bool, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*bool, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOBoolean2ᚖbool(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOBoolean2ᚕᚖbool(ctx context.Context, sel ast.SelectionSet, v []*bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOBoolean2ᚖbool(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOBulk2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulk(ctx context.Context, sel ast.SelectionSet, v []*model.Bulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulk(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulk(ctx context.Context, sel ast.SelectionSet, v *model.Bulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Bulk(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkJob2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJob(ctx context.Context, sel ast.SelectionSet, v []*model.BulkJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJob(ctx context.Context, sel ast.SelectionSet, v *model.BulkJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkJob(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkJobSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkJobSpec(ctx context.Context, sel ast.SelectionSet, v *model.BulkJobSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkJobSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkSpec(ctx context.Context, sel ast.SelectionSet, v *model.BulkSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOBulkStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkStatus(ctx context.Context, sel ast.SelectionSet, v *model.BulkStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BulkStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkStatusCode(ctx context.Context, v any) (*model.BulkStatusCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.BulkStatusCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBulkStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐBulkStatusCode(ctx context.Context, sel ast.SelectionSet, v *model.BulkStatusCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommunicationBus2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationBus(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationBus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationBus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationBus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationBus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationBus(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationBus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationBus(ctx, sel, v)
}

func (ec *executionContext) marshalOCommunicationBusStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationBusStatus(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationBusStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationBusStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOCommunicationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationTemplate(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationType(ctx context.Context, v any) (*model.CommunicationType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CommunicationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommunicationType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationType(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v []*model.CommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOCommunicationUnitSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCommunicationUnitSpec(ctx context.Context, sel ast.SelectionSet, v *model.CommunicationUnitSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommunicationUnitSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentConfig2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfig(ctx context.Context, sel ast.SelectionSet, v []*model.ComponentConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponentConfig2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComponentConfig2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfig(ctx context.Context, sel ast.SelectionSet, v *model.ComponentConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentConfig(ctx, sel, v)
}

func (ec *executionContext) marshalOComponentConfigDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfigDescriptor(ctx context.Context, sel ast.SelectionSet, v []*model.ComponentConfigDescriptor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOComponentConfigDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfigDescriptor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOComponentConfigDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐComponentConfigDescriptor(ctx context.Context, sel ast.SelectionSet, v *model.ComponentConfigDescriptor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ComponentConfigDescriptor(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConnectionInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeControlledSerial2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeControlledSerial(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeControlledSerial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeControlledSerial(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeDirectTcpIp2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeDirectTCPIP(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeDirectTCPIP) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeDirectTcpIp(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialDirect2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeSerialDirect(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialDirect) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialDirect(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialMoxa2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeSerialMoxa(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialMoxa) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialMoxa(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionTypeSerialRfc22172ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐConnectionTypeSerialRfc2217(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionTypeSerialRfc2217) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionTypeSerialRfc2217(ctx, sel, v)
}

func (ec *executionContext) marshalOCronJob2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJob(ctx context.Context, sel ast.SelectionSet, v []*model.CronJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCronJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJob(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCronJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJob(ctx context.Context, sel ast.SelectionSet, v *model.CronJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CronJob(ctx, sel, v)
}

func (ec *executionContext) marshalOCronJobSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobSpec(ctx context.Context, sel ast.SelectionSet, v *model.CronJobSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CronJobSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOCronJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobStatus(ctx context.Context, sel ast.SelectionSet, v *model.CronJobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CronJobStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCronJobTypeEnum2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobTypeEnum(ctx context.Context, v any) (*model.CronJobTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.CronJobTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCronJobTypeEnum2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCronJobTypeEnum(ctx context.Context, sel ast.SelectionSet, v *model.CronJobTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCryptoSecret2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCryptoSecret(ctx context.Context, sel ast.SelectionSet, v []*model.CryptoSecret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCryptoSecret2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCryptoSecret(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCryptoSecret2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCryptoSecret(ctx context.Context, sel ast.SelectionSet, v *model.CryptoSecret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CryptoSecret(ctx, sel, v)
}

func (ec *executionContext) marshalOCryptoSecrets2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐCryptoSecrets(ctx context.Context, sel ast.SelectionSet, v *model.CryptoSecrets) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CryptoSecrets(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkProtocol(ctx context.Context, v any) (*model.DataLinkProtocol, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DataLinkProtocol)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODataLinkProtocol2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkProtocol(ctx context.Context, sel ast.SelectionSet, v *model.DataLinkProtocol) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODataLinkTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.DataLinkTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODataLinkTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODataLinkTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDataLinkTemplate(ctx context.Context, sel ast.SelectionSet, v *model.DataLinkTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DataLinkTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalODate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDate(ctx context.Context, sel ast.SelectionSet, v *model.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Date(ctx, sel, v)
}

func (ec *executionContext) marshalODayProfile2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDayProfile(ctx context.Context, sel ast.SelectionSet, v []*model.DayProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODayProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDayProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODayProfile2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDayProfile(ctx context.Context, sel ast.SelectionSet, v *model.DayProfile) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DayProfile(ctx, sel, v)
}

func (ec *executionContext) marshalODevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDevice(ctx context.Context, sel ast.SelectionSet, v []*model.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDevice(ctx context.Context, sel ast.SelectionSet, v *model.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceBulks2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceBulks(ctx context.Context, sel ast.SelectionSet, v *model.DeviceBulks) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceBulks(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceCommunicationUnit2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.DeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceCommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceCommunicationUnitChange2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnitChange(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceCommunicationUnitChange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceCommunicationUnitChange2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnitChange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceCommunicationUnitChange2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnitChange(ctx context.Context, sel ast.SelectionSet, v *model.DeviceCommunicationUnitChange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceCommunicationUnitChange(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceCommunicationUnitChangeStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceCommunicationUnitChangeStatus(ctx context.Context, sel ast.SelectionSet, v *model.DeviceCommunicationUnitChangeStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceCommunicationUnitChangeStatus(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceConfigurationRegister2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegister(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceConfigurationRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceConfigurationRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegister(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceConfigurationRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegister(ctx context.Context, sel ast.SelectionSet, v *model.DeviceConfigurationRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceConfigurationRegister(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceConfigurationRegisterSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationRegisterSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceConfigurationRegisterSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceConfigurationRegisterSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceConfigurationTemplate2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplate(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceConfigurationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceConfigurationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceConfigurationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplate(ctx context.Context, sel ast.SelectionSet, v *model.DeviceConfigurationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceConfigurationTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceConfigurationTemplateSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceConfigurationTemplateSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceConfigurationTemplateSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceConfigurationTemplateSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceData(ctx context.Context, sel ast.SelectionSet, v *model.DeviceData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceData(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceDataInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfo(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceDataInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceDataInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceDataInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfo(ctx context.Context, sel ast.SelectionSet, v *model.DeviceDataInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceDataInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceDataInfoSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfoSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceDataInfoSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceDataInfoSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceDataInfoStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDataInfoStatus(ctx context.Context, sel ast.SelectionSet, v *model.DeviceDataInfoStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceDataInfoStatus(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceDeviceData2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDeviceData(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceDeviceData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceDeviceData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDeviceData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceDeviceData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceDeviceData(ctx context.Context, sel ast.SelectionSet, v *model.DeviceDeviceData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceDeviceData(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceEventRecord2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceEventRecord(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceEventRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceEventRecord2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceEventRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceEventRecord2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceEventRecord(ctx context.Context, sel ast.SelectionSet, v *model.DeviceEventRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceEventRecord(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceEvents2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceEvents(ctx context.Context, sel ast.SelectionSet, v *model.DeviceEvents) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceEvents(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceGroup2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroup(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroup(ctx context.Context, sel ast.SelectionSet, v *model.DeviceGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceGroup(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceGroupSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceGroupSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceGroupSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceGroupSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceInfo(ctx context.Context, sel ast.SelectionSet, v *model.DeviceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceSpec(ctx context.Context, sel ast.SelectionSet, v *model.DeviceSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDeviceStatus(ctx context.Context, sel ast.SelectionSet, v *model.DeviceStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeviceStatus(ctx, sel, v)
}

func (ec *executionContext) marshalODriver2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriver(ctx context.Context, sel ast.SelectionSet, v []*model.Driver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODriver2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriver(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalODriver2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriver(ctx context.Context, sel ast.SelectionSet, v *model.Driver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Driver(ctx, sel, v)
}

func (ec *executionContext) marshalODriverSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriverSpec(ctx context.Context, sel ast.SelectionSet, v *model.DriverSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverSpec(ctx, sel, v)
}

func (ec *executionContext) marshalODriverStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriverStatus(ctx context.Context, sel ast.SelectionSet, v *model.DriverStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverStatus(ctx, sel, v)
}

func (ec *executionContext) marshalODriverTemplates2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDriverTemplates(ctx context.Context, sel ast.SelectionSet, v *model.DriverTemplates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DriverTemplates(ctx, sel, v)
}

func (ec *executionContext) marshalODuration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐDuration(ctx context.Context, sel ast.SelectionSet, v *model.Duration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Duration(ctx, sel, v)
}

func (ec *executionContext) marshalOEmpty2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEmpty(ctx context.Context, sel ast.SelectionSet, v *model.Empty) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Empty(ctx, sel, v)
}

func (ec *executionContext) marshalOEventRecord2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEventRecord(ctx context.Context, sel ast.SelectionSet, v []*model.EventRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEventRecord2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEventRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOEventRecord2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEventRecord(ctx context.Context, sel ast.SelectionSet, v *model.EventRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOEventRecords2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐEventRecords(ctx context.Context, sel ast.SelectionSet, v *model.EventRecords) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventRecords(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx context.Context, v any) (*model.FieldDataType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FieldDataType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFieldDataType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDataType(ctx context.Context, sel ast.SelectionSet, v *model.FieldDataType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFieldDescriptor2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx context.Context, sel ast.SelectionSet, v []*model.FieldDescriptor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFieldDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFieldDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptor(ctx context.Context, sel ast.SelectionSet, v *model.FieldDescriptor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldDescriptor(ctx, sel, v)
}

func (ec *executionContext) marshalOFieldDescriptorOptions2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDescriptorOptions(ctx context.Context, sel ast.SelectionSet, v *model.FieldDescriptorOptions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldDescriptorOptions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFieldDisplayFormat2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDisplayFormat(ctx context.Context, v any) (*model.FieldDisplayFormat, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FieldDisplayFormat)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFieldDisplayFormat2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldDisplayFormat(ctx context.Context, sel ast.SelectionSet, v *model.FieldDisplayFormat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFieldValidation2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValidation(ctx context.Context, sel ast.SelectionSet, v *model.FieldValidation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldValidation(ctx, sel, v)
}

func (ec *executionContext) marshalOFieldValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValue(ctx context.Context, sel ast.SelectionSet, v *model.FieldValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldValue(ctx, sel, v)
}

func (ec *executionContext) marshalOFieldValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFieldValues(ctx context.Context, sel ast.SelectionSet, v *model.FieldValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FieldValues(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFilterOperator2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFilterOperator(ctx context.Context, v any) (*model.FilterOperator, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.FilterOperator)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFilterOperator2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐFilterOperator(ctx context.Context, sel ast.SelectionSet, v *model.FilterOperator) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOFloat2ᚕᚖfloat64(ctx context.Context, v any) ([]*float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFloat2ᚖfloat64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕᚖfloat64(ctx context.Context, sel ast.SelectionSet, v []*float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOFloat2ᚖfloat64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v any) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) marshalOGetDeviceDataSeriesSelector2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐGetDeviceDataSeriesSelector(ctx context.Context, sel ast.SelectionSet, v []*model.GetDeviceDataSeriesSelector) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetDeviceDataSeriesSelector2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐGetDeviceDataSeriesSelector(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOGetDeviceDataSeriesSelector2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐGetDeviceDataSeriesSelector(ctx context.Context, sel ast.SelectionSet, v *model.GetDeviceDataSeriesSelector) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetDeviceDataSeriesSelector(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint32(ctx context.Context, v any) ([]*int32, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*int32, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint32(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint32(ctx context.Context, sel ast.SelectionSet, v []*int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint32(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint32(ctx context.Context, v any) (*int32, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt32(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint32(ctx context.Context, sel ast.SelectionSet, v *int32) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt32(*v)
	return res
}

func (ec *executionContext) unmarshalOInt642ᚕᚖint64(ctx context.Context, v any) ([]*int64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*int64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt642ᚖint64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt642ᚕᚖint64(ctx context.Context, sel ast.SelectionSet, v []*int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt642ᚖint64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt642ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt642ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) marshalOIrregularProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularProfileValues(ctx context.Context, sel ast.SelectionSet, v *model.IrregularProfileValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IrregularProfileValues(ctx, sel, v)
}

func (ec *executionContext) marshalOIrregularValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularValue(ctx context.Context, sel ast.SelectionSet, v []*model.IrregularValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIrregularValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOIrregularValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐIrregularValue(ctx context.Context, sel ast.SelectionSet, v *model.IrregularValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IrregularValue(ctx, sel, v)
}

func (ec *executionContext) marshalOJobAction2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobAction(ctx context.Context, sel ast.SelectionSet, v []*model.JobAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobAction2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobAction2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobAction(ctx context.Context, sel ast.SelectionSet, v *model.JobAction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobAction(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionAttributes2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionAttributes(ctx context.Context, sel ast.SelectionSet, v []*model.JobActionAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobActionAttributes2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionAttributes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobActionAttributes2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionAttributes(ctx context.Context, sel ast.SelectionSet, v *model.JobActionAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionAttributes(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionContraints2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionContraints(ctx context.Context, sel ast.SelectionSet, v *model.JobActionContraints) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionContraints(ctx, sel, v)
}

func (ec *executionContext) marshalOJobActionSet2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionSet(ctx context.Context, sel ast.SelectionSet, v []*model.JobActionSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobActionSet2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobActionSet2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobActionSet(ctx context.Context, sel ast.SelectionSet, v *model.JobActionSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobActionSet(ctx, sel, v)
}

func (ec *executionContext) marshalOJobDevice2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDevice(ctx context.Context, sel ast.SelectionSet, v []*model.JobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDevice(ctx context.Context, sel ast.SelectionSet, v *model.JobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOJobDeviceId2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDeviceID(ctx context.Context, sel ast.SelectionSet, v []*model.JobDeviceID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDeviceID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobDeviceID(ctx context.Context, sel ast.SelectionSet, v *model.JobDeviceID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobDeviceId(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobErrorCode(ctx context.Context, v any) (*model.JobErrorCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobErrorCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobErrorCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobErrorCode(ctx context.Context, sel ast.SelectionSet, v *model.JobErrorCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobPriority(ctx context.Context, v any) (*model.JobPriority, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobPriority)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobPriority2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobPriority(ctx context.Context, sel ast.SelectionSet, v *model.JobPriority) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOJobSettings2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobSettings(ctx context.Context, sel ast.SelectionSet, v *model.JobSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOJobStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobStatus(ctx context.Context, sel ast.SelectionSet, v *model.JobStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobStatusCode(ctx context.Context, v any) (*model.JobStatusCode, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.JobStatusCode)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJobStatusCode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐJobStatusCode(ctx context.Context, sel ast.SelectionSet, v *model.JobStatusCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOListOfBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfBulk(ctx context.Context, sel ast.SelectionSet, v *model.ListOfBulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfBulk(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfBulkJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfBulkJob(ctx context.Context, sel ast.SelectionSet, v *model.ListOfBulkJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfBulkJob(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfCommunicationBus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfCommunicationBus(ctx context.Context, sel ast.SelectionSet, v *model.ListOfCommunicationBus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfCommunicationBus(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.ListOfCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfCommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfCronJob2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfCronJob(ctx context.Context, sel ast.SelectionSet, v *model.ListOfCronJob) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfCronJob(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDevice(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceCommunicationUnit2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceCommunicationUnit(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceCommunicationUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceCommunicationUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceCommunicationUnitChange2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceCommunicationUnitChange(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceCommunicationUnitChange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceCommunicationUnitChange(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceConfigurationRegister2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceConfigurationRegister(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceConfigurationRegister) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceConfigurationRegister(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceConfigurationTemplate2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceConfigurationTemplate(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceConfigurationTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceConfigurationTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceDataInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceDataInfo(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceDataInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceDataInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDeviceGroup2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDeviceGroup(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDeviceGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDeviceGroup(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfDriver2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfDriver(ctx context.Context, sel ast.SelectionSet, v *model.ListOfDriver) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfDriver(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfFieldDescriptor2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfFieldDescriptor(ctx context.Context, sel ast.SelectionSet, v *model.ListOfFieldDescriptor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfFieldDescriptor(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfJobDevice2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfJobDevice(ctx context.Context, sel ast.SelectionSet, v *model.ListOfJobDevice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfJobDevice(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfJobDeviceId2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfJobDeviceID(ctx context.Context, sel ast.SelectionSet, v *model.ListOfJobDeviceID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfJobDeviceId(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ListOfModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfString2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfString(ctx context.Context, sel ast.SelectionSet, v *model.ListOfString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfString(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfTimeOfUseTable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfTimeOfUseTable(ctx context.Context, sel ast.SelectionSet, v *model.ListOfTimeOfUseTable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfTimeOfUseTable(ctx, sel, v)
}

func (ec *executionContext) marshalOListOfVariable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListOfVariable(ctx context.Context, sel ast.SelectionSet, v *model.ListOfVariable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListOfVariable(ctx, sel, v)
}

func (ec *executionContext) marshalOListSelector2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelector(ctx context.Context, sel ast.SelectionSet, v *model.ListSelector) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListSelector(ctx, sel, v)
}

func (ec *executionContext) marshalOListSelectorFilterBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorFilterBy(ctx context.Context, sel ast.SelectionSet, v []*model.ListSelectorFilterBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOListSelectorFilterBy2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorFilterBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOListSelectorFilterBy2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorFilterBy(ctx context.Context, sel ast.SelectionSet, v *model.ListSelectorFilterBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListSelectorFilterBy(ctx, sel, v)
}

func (ec *executionContext) marshalOListSelectorSortBy2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorSortBy(ctx context.Context, sel ast.SelectionSet, v []*model.ListSelectorSortBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOListSelectorSortBy2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorSortBy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOListSelectorSortBy2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListSelectorSortBy(ctx context.Context, sel ast.SelectionSet, v *model.ListSelectorSortBy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListSelectorSortBy(ctx, sel, v)
}

func (ec *executionContext) marshalOListValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐListValue(ctx context.Context, sel ast.SelectionSet, v *model.ListValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ListValue(ctx, sel, v)
}

func (ec *executionContext) marshalOMeasuredValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx context.Context, sel ast.SelectionSet, v []*model.MeasuredValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMeasuredValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMeasuredValue(ctx context.Context, sel ast.SelectionSet, v *model.MeasuredValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MeasuredValue(ctx, sel, v)
}

func (ec *executionContext) marshalOMetadataFields2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMetadataFields(ctx context.Context, sel ast.SelectionSet, v *model.MetadataFields) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MetadataFields(ctx, sel, v)
}

func (ec *executionContext) marshalOModemInfo2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ModemInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOModemInfo2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemInfo(ctx context.Context, sel ast.SelectionSet, v *model.ModemInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPool2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPool(ctx context.Context, sel ast.SelectionSet, v []*model.ModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPool(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOModemPool2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPool(ctx context.Context, sel ast.SelectionSet, v *model.ModemPool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPool(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPoolSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPoolSpec(ctx context.Context, sel ast.SelectionSet, v *model.ModemPoolSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPoolSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOModemPoolStatus2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐModemPoolStatus(ctx context.Context, sel ast.SelectionSet, v *model.ModemPoolStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ModemPoolStatus(ctx, sel, v)
}

func (ec *executionContext) marshalONetworkMap2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐNetworkMap(ctx context.Context, sel ast.SelectionSet, v *model.NetworkMap) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._NetworkMap(ctx, sel, v)
}

func (ec *executionContext) unmarshalONullValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐNullValue(ctx context.Context, v any) (*model.NullValue, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NullValue)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONullValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐNullValue(ctx context.Context, sel ast.SelectionSet, v *model.NullValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx context.Context, v any) (*model.ObjectType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ObjectType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐObjectType(ctx context.Context, sel ast.SelectionSet, v *model.ObjectType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOpenIdConfiguration2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐOpenIDConfiguration(ctx context.Context, sel ast.SelectionSet, v *model.OpenIDConfiguration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OpenIdConfiguration(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileBlock2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileBlock(ctx context.Context, sel ast.SelectionSet, v []*model.ProfileBlock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOProfileBlock2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileBlock(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOProfileBlock2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileBlock(ctx context.Context, sel ast.SelectionSet, v *model.ProfileBlock) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileBlock(ctx, sel, v)
}

func (ec *executionContext) marshalOProfileValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProfileValues(ctx context.Context, sel ast.SelectionSet, v *model.ProfileValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProfileValues(ctx, sel, v)
}

func (ec *executionContext) marshalOProxyBulk2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProxyBulk(ctx context.Context, sel ast.SelectionSet, v *model.ProxyBulk) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProxyBulk(ctx, sel, v)
}

func (ec *executionContext) marshalOProxyBulkSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐProxyBulkSpec(ctx context.Context, sel ast.SelectionSet, v *model.ProxyBulkSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProxyBulkSpec(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegisterType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterType(ctx context.Context, v any) (*model.RegisterType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RegisterType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegisterType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterType(ctx context.Context, sel ast.SelectionSet, v *model.RegisterType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORegisterValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValue(ctx context.Context, sel ast.SelectionSet, v []*model.RegisterValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegisterValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORegisterValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValue(ctx context.Context, sel ast.SelectionSet, v *model.RegisterValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegisterValue(ctx, sel, v)
}

func (ec *executionContext) marshalORegisterValues2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRegisterValues(ctx context.Context, sel ast.SelectionSet, v *model.RegisterValues) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegisterValues(ctx, sel, v)
}

func (ec *executionContext) unmarshalORelayState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayState(ctx context.Context, v any) (*model.RelayState, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.RelayState)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORelayState2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayState(ctx context.Context, sel ast.SelectionSet, v *model.RelayState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORelayStateRecord2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayStateRecord(ctx context.Context, sel ast.SelectionSet, v []*model.RelayStateRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORelayStateRecord2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayStateRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORelayStateRecord2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐRelayStateRecord(ctx context.Context, sel ast.SelectionSet, v *model.RelayStateRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RelayStateRecord(ctx, sel, v)
}

func (ec *executionContext) marshalOSeason2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSeason(ctx context.Context, sel ast.SelectionSet, v []*model.Season) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSeason2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSeason(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSeason2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSeason(ctx context.Context, sel ast.SelectionSet, v *model.Season) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Season(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSecretDataDecryptionMethod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSecretDataDecryptionMethod(ctx context.Context, v any) (*model.SecretDataDecryptionMethod, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SecretDataDecryptionMethod)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSecretDataDecryptionMethod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSecretDataDecryptionMethod(ctx context.Context, sel ast.SelectionSet, v *model.SecretDataDecryptionMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSecretSessionKeyDecryptionMethod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSecretSessionKeyDecryptionMethod(ctx context.Context, v any) (*model.SecretSessionKeyDecryptionMethod, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.SecretSessionKeyDecryptionMethod)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSecretSessionKeyDecryptionMethod2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSecretSessionKeyDecryptionMethod(ctx context.Context, sel ast.SelectionSet, v *model.SecretSessionKeyDecryptionMethod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSetFieldsSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSetFieldsSpec(ctx context.Context, sel ast.SelectionSet, v *model.SetFieldsSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SetFieldsSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOSpecialDay2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSpecialDay(ctx context.Context, sel ast.SelectionSet, v []*model.SpecialDay) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSpecialDay2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSpecialDay(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSpecialDay2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSpecialDay(ctx context.Context, sel ast.SelectionSet, v *model.SpecialDay) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SpecialDay(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOStringValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStringValue(ctx context.Context, sel ast.SelectionSet, v *model.StringValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StringValue(ctx, sel, v)
}

func (ec *executionContext) marshalOStruct2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐStruct(ctx context.Context, sel ast.SelectionSet, v *model.Struct) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Struct(ctx, sel, v)
}

func (ec *executionContext) marshalOSwitching2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSwitching(ctx context.Context, sel ast.SelectionSet, v []*model.Switching) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSwitching2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSwitching(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSwitching2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐSwitching(ctx context.Context, sel ast.SelectionSet, v *model.Switching) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Switching(ctx, sel, v)
}

func (ec *executionContext) marshalOTimeOfUseTable2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTable(ctx context.Context, sel ast.SelectionSet, v []*model.TimeOfUseTable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTimeOfUseTable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTimeOfUseTable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTable(ctx context.Context, sel ast.SelectionSet, v *model.TimeOfUseTable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeOfUseTable(ctx, sel, v)
}

func (ec *executionContext) marshalOTimeOfUseTableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTimeOfUseTableSpec(ctx context.Context, sel ast.SelectionSet, v *model.TimeOfUseTableSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TimeOfUseTableSpec(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTimestamp2ᚕᚖstring(ctx context.Context, v any) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOTimestamp2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOTimestamp2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOTimestamp2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOTimestamp2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTopologyEdge2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyEdge(ctx context.Context, sel ast.SelectionSet, v []*model.TopologyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTopologyEdge2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTopologyEdge2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyEdge(ctx context.Context, sel ast.SelectionSet, v *model.TopologyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopologyEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOTopologyNode2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNode(ctx context.Context, sel ast.SelectionSet, v []*model.TopologyNode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTopologyNode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTopologyNode2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNode(ctx context.Context, sel ast.SelectionSet, v *model.TopologyNode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TopologyNode(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTopologyNodeType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNodeType(ctx context.Context, v any) (*model.TopologyNodeType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.TopologyNodeType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTopologyNodeType2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐTopologyNodeType(ctx context.Context, sel ast.SelectionSet, v *model.TopologyNodeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, v any) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalUUID(*v)
	return res
}

func (ec *executionContext) marshalOValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐValue(ctx context.Context, sel ast.SelectionSet, v []*model.Value) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐValue(ctx context.Context, sel ast.SelectionSet, v *model.Value) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Value(ctx, sel, v)
}

func (ec *executionContext) marshalOVariable2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariable(ctx context.Context, sel ast.SelectionSet, v []*model.Variable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVariable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVariable2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariable(ctx context.Context, sel ast.SelectionSet, v *model.Variable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Variable(ctx, sel, v)
}

func (ec *executionContext) marshalOVariableDeviceData2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableDeviceData(ctx context.Context, sel ast.SelectionSet, v []*model.VariableDeviceData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVariableDeviceData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableDeviceData(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOVariableDeviceData2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableDeviceData(ctx context.Context, sel ast.SelectionSet, v *model.VariableDeviceData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VariableDeviceData(ctx, sel, v)
}

func (ec *executionContext) marshalOVariableSpec2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐVariableSpec(ctx context.Context, sel ast.SelectionSet, v *model.VariableSpec) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VariableSpec(ctx, sel, v)
}

func (ec *executionContext) marshalOWeek2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐWeek(ctx context.Context, sel ast.SelectionSet, v []*model.Week) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWeek2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐWeek(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOWeek2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐWeek(ctx context.Context, sel ast.SelectionSet, v *model.Week) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Week(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapFieldValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx context.Context, sel ast.SelectionSet, v []*model.MapFieldValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapFieldValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapFieldValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapFieldValue(ctx context.Context, sel ast.SelectionSet, v *model.MapFieldValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapFieldValue(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapListOfString2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapListOfString(ctx context.Context, sel ast.SelectionSet, v []*model.MapListOfString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapListOfString2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapListOfString(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapListOfString2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapListOfString(ctx context.Context, sel ast.SelectionSet, v *model.MapListOfString) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapListOfString(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapValue2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapValue(ctx context.Context, sel ast.SelectionSet, v []*model.MapValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapValue2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapValue(ctx context.Context, sel ast.SelectionSet, v *model.MapValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapValue(ctx, sel, v)
}

func (ec *executionContext) marshalO_mapstring2ᚕᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapstring(ctx context.Context, sel ast.SelectionSet, v []*model.Mapstring) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_mapstring2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapstring(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalO_mapstring2ᚖgithubᚗcomᚋcybroslabsᚋouroᚑapiᚑsharedᚋgraphᚋmodelᚐMapstring(ctx context.Context, sel ast.SelectionSet, v *model.Mapstring) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__mapstring(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
