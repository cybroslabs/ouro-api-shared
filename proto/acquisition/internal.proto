// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.acquisition;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "acquisition/shared.proto";
import "common/fields.proto";

// Driver <-> Taskmaster driver data caching

message SetCacheRequest {
    string key              = 1;  // The key of the cache entry. The key is unique within the driver type.
    common.FieldValue value = 2;  // The value of the cache entry.
}

message GetCacheRequest {
    string key = 1;  // The key of the cache entry. The key is unique within the driver type.
}

message GetCacheResponse {
    common.FieldValue value = 1;  // The value of the cache entry.
}

message SetConfigDefaultsRequest {
    repeated common.FieldDescriptor items = 1;  // The list of configuration items to be set as defaults. The list can be empty.
}

message GetDriverConfigRequest {
    repeated string field_id = 1;  // The list of options to be returned. If the list is empty, nothing is returned.
}

message StartJobsRequest {
    ConnectionInfo connection_info = 2;  // The connection info for the job.
    repeated StartJobData jobs     = 1;  // The list of jobs to be started with the same connection info.
}

// Driver -> Taskmaster job/action progress update message
message ProgressUpdate {
    // The oneof field containing the progress update data - either for job or for action.
    oneof progress {
        JobProgressUpdate job       = 1;  // The job progress update data. It shall be called once and only once for each job. It shall be also called as the last message in the stream; other updates will be ignored after this.
        ActionProgressUpdate action = 2;  // The action progress update data. It shall be called for each action in the job.
    }
}

// Driver <-> OuroOperator info synchronization

message StartUpgradeRequest {
    string driver_type        = 1;  // The driver unique identifier.
    string driver_version     = 2;  // The driver version to be started. It must be a valid version of the driver and should be exactly +1 against the version of the data to be upgraded; or the major version can be +1 if current data version is the latest possible minor version.
    string deviceregistry_url = 3;  // The URL of the DeviceRegistry service the driver shall connect to.
}

// DataProxy <-> Taskmaster communication

message QueueJobsRequest {
    repeated JobSpec spec = 1;  // The list of jobs to be queued.
}

message QueueJobsResponse {
    map<string, uint64> job_ids = 1;  // The map of queue job identifiers. The key is the job identifier, the value is the queue ID assigned by the Taskmaster.
}

message GetJobResponse {
    JobStatus status = 1;  // The status of the job
}

// OuroOperator <-> Taskmaster communication

message SetDriverScaleRequest {
    string taskmaster_id = 1;  // The Taskmaster identifier. It is statefulset so value must be either full pod name or suffix integer of the pod name. For example: taskmaster-0 or 0.
    string driver_type   = 2;  // The driver unique identifier.
    uint32 replicas      = 3;  // The number of replicas to scale to.
}

message GetDriverScaleRequest {
    string taskmaster_id = 1;  // The Taskmaster identifier. It is statefulset so value must be either full pod name or suffix integer of the pod name. For example: taskmaster-0 or 0.
    string driver_type   = 2;  // The driver unique identifier.
}

message MapDeviceConnectionInfo {
    map<string, ListOfConnectionInfo> devices = 1;  // The communication units definitions linked to the device(s).
}

message SetDeviceInfoRequest {
    string device_id            = 1;  // The device identifier.
    acquisition.DeviceInfo info = 2;  // The device information.
}

message AddCommunicationUnitLogsRequest {
    string communication_unit_id              = 1;  // The unique identifier of the communication unit for which the logs are being added.
    repeated CommunicationUnitLogRecord items = 2;  // The list of communication unit log records to be added.
}

message SetUnknownDevicesRequest {
    string communication_unit_id      = 1;  // The unique identifier of the communication unit for which the unknown devices are being set.
    repeated UnknownDevicesItem items = 2;  // The list of unknown devices to be set. The list is not empty.
}

message UnknownDevicesItem {
    int64 x_device_identifier                 = 1;  // The unique x-device-identifier of the unknown device, see GetMapDeviceKeyXId.
    map<string, common.FieldValue> attributes = 2;  // The list of attributes of the unknown device. It must not be empty.
}

message DirectNeightbours {
    int64 x_device_identifier                 = 1;  // The unique x-device-identifier of the neighbour device, see GetMapDeviceKeyXId.
    map<string, common.FieldValue> attributes = 2;  // The field values containing attributes of the neighbour device.
}

message IndirectNeightbours {
    int64 from_x_device_identifier            = 1;  // The unique x-device-identifier of the neighbour device, see GetMapDeviceKeyXId, where 'from' represents a nearer device from the CU in the topology and 'to' represents a further-away device from the CU.
    int64 to_x_device_identifier              = 2;  // The unique x-device-identifier of the neighbour device, see GetMapDeviceKeyXId, where 'from' represents a nearer device from the CU in the topology and 'to' represents a further-away device from the CU.
    map<string, common.FieldValue> attributes = 3;  // The field values containing attributes of the neighbour device.
}

message SetNeighboursRequest {
    string communication_unit_id                     = 1;  // The unique identifier of the communication unit for which the neighbors are being set.
    repeated DirectNeightbours direct_neighbours     = 2;  // The list of neighbor device identifiers next to the communication unit.
    repeated IndirectNeightbours indirect_neighbours = 3;  // The list of indirect neighbour devices.
}

enum DeviceNeighbourType {
    DEVICE_NEIGHBOUR_TYPE_UNSPECIFIED        = 0;  // Unspecified type.
    DEVICE_NEIGHBOUR_TYPE_COMMUNICATION_UNIT = 1;  // The device neighbour is a communication unit.
    DEVICE_NEIGHBOUR_TYPE_DEVICE             = 2;  // The device neighbour is a device.
}

message DeviceNeightbour {
    DeviceNeighbourType type = 1;  // The type of the neighbour.
    string id                = 2;  // The unique identifier of the neighbour. It is either a communication unit identifier or a device identifier.
}

message SetCurrentDeviceCommunicationUnitRequest {
    string communication_unit_id              = 1;  // The unique identifier of the communication unit.
    repeated AttributeSelector attributes     = 2;  // The device selector, using attributes. It is used to select the device for which the device the communication unit is being set as primary.
    ApplicationProtocol proposed_app_protocol = 3;  // The application protocol to be used as a default.
}

message SetCurrentDeviceCommunicationUnitInternalRequest {
    string communication_unit_id              = 1;  // The unique identifier of the communication unit.
    common.ListSelector device_selector       = 2;  // The device selector, using attributes. It is used to select the device for which the device the communication unit is being set as primary.
    ApplicationProtocol proposed_app_protocol = 3;  // The application protocol to be used as a default.
}
