// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.acquisition.timeofuse;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition/timeofuse";

import "google/protobuf/timestamp.proto";
import "google/type/date.proto";

// Defines the possible relay states.
enum RelayState {
    RELAY_STATE_UNSPECIFIED = 0;  // Unspecified relay state. The relay state is ignored (no action).
    RELAY_STATE_CONNECT     = 1;  // The relay connects.
    RELAY_STATE_DISCONNECT  = 2;  // The relay disconnects.
}

// Defines the switching configuration, including tariffs and relay states for specific times.
message Switching {
    // The hour of the switching event.
    // @values: 0–23
    // @example: 7
    int32 hour = 1;

    // The minute of the switching event.
    // @values: 0–59
    // @example: 30
    int32 minute = 2;

    // The tariff ID.
    // @values: -1 means no tariff; other values are valid tariff IDs
    // @example: 2
    int32 tariff = 3;

    // A map of relay IDs to their corresponding relay states. Duplicate IDs are not allowed.
    repeated RelayStateRecord relays = 4;
}

// Defines the state of a relay at a specific time.
// Each record contains the relay ID and its associated state (CONNECT or DISCONNECT).
// The relay ID must be unique within the list of relays.
message RelayStateRecord {
    // The unique relay identifier.
    // @example: 1
    int32 relay_id = 1;

    // The state of the relay (`CONNECT` or `DISCONNECT`).
    // @example: CONNECT
    RelayState state = 2;
}

// Defines a single day profile, containing multiple switching times.
message DayProfile {
    // The unique day profile identifier.
    // @example: "weekday-profile"
    string day_id = 1;

    // The list of switching events. Each event specifies the time and relay states.
    repeated Switching switching = 2;
}

// Defines special days, such as holidays, or other exceptions.
message SpecialDay {
    // he year of the special day.
    // @values: full year (e.g., 2023)
    // @example: 2023
    int32 year = 1;

    // The month of the special day.
    // @values: 1–12
    // @example: 12
    int32 month = 2;

    // The day of the special day.
    // @values: 1–31
    // @example: 25
    int32 day = 3;

    // The unique special day identifier.
    // @example: "christmas"
    string day_id = 4;
}

// Defines a week of the year, containing a list of day IDs and week name.
message Week {
    // The unique week identifier.
    // @example: "week-01"
    string week_id = 1;

    // The name of the week.
    // @example: "Week 1"
    string week_name = 2;

    // The list of day IDs assigned to the week.
    // @example: ["monday", "tuesday", "holiday"]
    repeated string day_ids = 3;
}

// Defines a season that starts on a specific date and is linked to a week profile.
message Season {
    // The unique season identifier.
    // @example: "season-winter"
    string id = 1;

    // The name of the season.
    // @example: "Winter"
    string name = 2;

    // The start year of the season.
    // @example: 2023
    int32 start_year = 3;

    // The start month of the season.
    // @values: 1–12
    // @example: 12
    int32 start_month = 4;

    // The start day of the season.
    // @values: 1–31
    // @example: 1
    int32 start_day = 5;

    // The reference to a week ID that applies to this season.
    // @example: "week-01"
    string week_id = 6;
}

// Defines the main Time-of-Use (TOU) table that contains all relevant definitions.
message TimeOfUseTableSpec {
    // The expiration date of the TOU table.
    // @example: "2025-01-01T00:00:00Z"
    google.protobuf.Timestamp expies_at = 3;

    // HDO (High Demand Option) Group ID
    // @example: "group-a"
    string hdo_group_id = 4;

    // The activation date of the TOU table.
    // @example: "2024-06-01"
    google.type.Date activate_at = 5;

    // The list of seasons defined in the TOU table.
    repeated Season seasons = 6;

    // The list of week profiles defined in the TOU table.
    repeated Week weeks = 7;

    // The list of day profiles, each defining multiple switching events.
    repeated DayProfile day_profiles = 8;

    // The list of special days, such as holidays or other exceptions.
    repeated SpecialDay special_days = 9;
}
