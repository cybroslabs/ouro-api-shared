// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.acquisition.timeofuse;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition/timeofuse";

import "google/protobuf/timestamp.proto";
import "google/type/date.proto";

// Enumeration for Relay State
enum RelayState {
    RELAY_STATE_UNSPECIFIED = 0;  // Unspecified relay state. Relay state is ignored (no action)
    RELAY_STATE_CONNECT     = 1;  // Relay connects
    RELAY_STATE_DISCONNECT  = 2;  // Relay disconnects
}

// Switching data includes tariffs and relay states for specific times
message Switching {
    // Hour of the switching event.
    // @values: 0–23
    // @example: 7
    int32 hour = 1;

    // Minute of the switching event.
    // @values: 0–59
    // @example: 30
    int32 minute = 2;

    // Tariff ID.
    // @values: -1 means no tariff; other values are valid tariff IDs
    // @example: 2
    int32 tariff = 3;

    // Map of relay ID to relay state. The list must not contain duplicit relay IDs.
    repeated RelayStateRecord relays = 4;
}

// RelayStateRecord represents the state of a relay at a specific time.
// It contains the relay ID and its state (CONNECT or DISCONNECT).
// The relay ID must be unique within the list of relays.
message RelayStateRecord {
    // Relay ID
    // @example: 1
    int32 relay_id = 1;

    // State of the relay (CONNECT or DISCONNECT)
    // @example: CONNECT
    RelayState state = 2;
}

// DayProfile represents the profile for a single day, containing multiple Switching times
message DayProfile {
    // Unique identifier for the day profile
    // @example: "weekday-profile"
    string day_id = 1;

    // List of switching events (each with specific time and relay states)
    repeated Switching switching = 2;
}

// SpecialDay represents specific days such as holidays or exceptions
message SpecialDay {
    // Year of the special day
    // @values: full year (e.g., 2023)
    // @example: 2023
    int32 year = 1;

    // Month of the special day
    // @values: 1–12
    // @example: 12
    int32 month = 2;

    // Day of the special day
    // @values: 1–31
    // @example: 25
    int32 day = 3;

    // Unique identifier for the special day
    // @example: "christmas"
    string day_id = 4;
}

// Week represents a week of the year, containing a list of Day IDs and Week Name
message Week {
    // Unique identifier for the week
    // @example: "week-01"
    string week_id = 1;

    // Name of the week
    // @example: "Week 1"
    string week_name = 2;

    // List of day IDs that belong to this week
    // @example: ["monday", "tuesday", "holiday"]
    repeated string day_ids = 3;
}

// Season represents a season which spans across a specific start date and references a week
message Season {
    // Unique identifier for the season
    // @example: "season-winter"
    string id = 1;

    // Name of the season
    // @example: "Winter"
    string name = 2;

    // Start year of the season
    // @example: 2023
    int32 start_year = 3;

    // Start month of the season
    // @values: 1–12
    // @example: 12
    int32 start_month = 4;

    // Start day of the season
    // @values: 1–31
    // @example: 1
    int32 start_day = 5;

    // Reference to a Week ID that this season is associated with
    // @example: "week-01"
    string week_id = 6;
}

// TimeOfUse represents the main Time-of-Use (TOU) table containing all relevant definitions
message TimeOfUseTableSpec {
    // Expiration date of the TOU table
    // @example: "2025-01-01T00:00:00Z"
    google.protobuf.Timestamp expies_at = 3;

    // HDO (High Demand Option) Group ID
    // @example: "group-a"
    string hdo_group_id = 4;

    // Activation date of the TOU table
    // @example: "2024-06-01"
    google.type.Date activate_at = 5;

    // List of seasons defined in the TOU
    repeated Season seasons = 6;

    // List of weeks defined in the TOU
    repeated Week weeks = 7;

    // List of day profiles (each day having a list of switching events)
    repeated DayProfile day_profiles = 8;

    // List of special days (e.g., holidays, exceptions)
    repeated SpecialDay special_days = 9;
}
