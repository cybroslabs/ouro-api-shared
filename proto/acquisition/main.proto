// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.acquisition;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/acquisition";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "common/metadata.proto";
import "common/fields.proto";
import "acquisition/shared.proto";
import "acquisition/timeofuse/timeofuse.proto";

// Communication Unit specification.

message CreateCommunicationUnitRequest {
    CommunicationUnitSpec spec     = 1;  // The communication unit specification.
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ListOfCommunicationUnit {
    repeated CommunicationUnit items = 1;  // The communication unit specification.
    int32 total_count                = 2;  // The total number of items.
}

// Communication Bus specification.

message CreateCommunicationBusRequest {
    reserved 1;
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ListOfCommunicationBus {
    repeated CommunicationBus items = 1;  // The list of communication unit buses.
    int32 total_count               = 2;  // The total number of items.
}

// CommunicationUnit#CommunicationBus specification.

message AddCommunicationUnitsToCommunicationBusRequest {
    string communication_bus_id           = 1;  // The unique identifier of the communication bus.
    repeated string communication_unit_id = 2;  // The unique identifier of the communication unit.
}

message RemoveCommunicationUnitsFromCommunicationBusRequest {
    string communication_bus_id           = 1;  // The unique identifier of the communication bus.
    repeated string communication_unit_id = 2;  // The unique identifier of the communication unit.
}

// Device specification.

message CreateDeviceRequest {
    DeviceSpec spec                = 1;  // The device specification.
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ListOfDevice {
    repeated Device items = 1;  // The list of devices.
    int32 total_count     = 2;  // The total number of items.
}

message Device {
    DeviceSpec spec                = 1;  // The device specification.
    DeviceStatus status            = 2;  // The device status.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message StreamDevicesDriverTypesRequest {
    repeated string device_id = 1;  // The list of devices.
}

message StreamDevicesDriverTypesResponse {
    map<string, string> data = 1;  // The map of devices to their driver types. The key is the device identifier, the value is the driver type.
}

message ListOfDeviceCommunicationUnitChange {
    repeated DeviceCommunicationUnitChange items = 1;  // The list of device groups.
    int32 total_count                            = 2;  // The total number of items.
}

message DeviceCommunicationUnitChange {
    reserved 1, 3;
    DeviceCommunicationUnitChangeStatus status = 2;  // The device communication unit changes status.
}

message DeviceCommunicationUnitChangeStatus {
    google.protobuf.Timestamp change_at = 1;  // The timestamp of the change.
    string communication_unit_id        = 2;  // The unique identifier of the communication unit.
    string communication_unit_name      = 3;  // The name of the communication unit.
    string device_id                    = 4;  // The unique identifier of the device.
    string device_name                  = 5;  // The name of the device.
}

// Unknown device specification.

message UnknownDevice {
    reserved 1;                          // reserved for status
    UnknownDeviceStatus status     = 2;  // The unknown device status.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message UnknownDeviceStatus {
    string driver_type           = 1;  // The driver type of the device.
    string communication_unit_id = 2;  // The communication unit identifier of the device.
}

// Device group specification.

message CreateDeviceGroupRequest {
    DeviceGroupSpec spec           = 1;  // The device group specification.
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ListOfDeviceGroup {
    repeated DeviceGroup items = 1;  // The list of device groups.
    int32 total_count          = 2;  // The total number of items.
}

message StreamDeviceGroup {
    // The oneof field containing the device group partial data.
    oneof parts {
        DeviceGroupSpec spec           = 1;  // The device group specification.
        StreamDeviceGroupStatus status = 2;  // The device group status.
        common.MetadataFields metadata = 3;  // The metadata fields.
    }
}

message DeviceGroup {
    reserved 2;
    DeviceGroupSpec spec           = 1;  // The device group specification.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message DeviceGroupSpec {
    string external_id = 1;  // The external identifier of the communication unit.
}

message StreamDeviceGroupStatus {
    map<string, DeviceGroupStatusDevice> devices = 4;  // The list of devices that are part of the group. The key represents the device identifier, the value contains additional information.
}

message DeviceGroupStatusDevice {
    string driver_type = 1;  // The driver type.
}

// Device#CU specification.

message SetDeviceCommunicationUnitsRequest {
    string device_id                                     = 1;  // The unique identifier of the device.
    repeated DeviceCommunicationUnit communication_units = 2;  // The list of linked communication units.
}

message ListOfDeviceCommunicationUnit {
    repeated DeviceCommunicationUnit items = 1;  // The list of linked communication units.
    int32 total_count                      = 2;  // The total number of items.
}

// Device#Group specification.

message AddDevicesToGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

message RemoveDevicesFromGroupRequest {
    string group_id           = 1;  // The unique identifier of the device group.
    repeated string device_id = 2;  // The unique identifier of the device.
}

message ListDeviceGroupDevicesRequest {
    string group_id                                     = 1;  // The unique identifier of the device group.
    io.clbs.openhes.models.common.ListSelector selector = 2;  // The list selector.
}

// Bulk specification.

message CreateBulkRequest {
    BulkSpec spec                  = 1;  // The bulk-job spec.
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ListOfBulk {
    repeated Bulk items = 1;  // The list of bulks.
    int32 total_count   = 2;  // The total number of items.
}

message Bulk {
    BulkSpec spec                  = 1;  // The bulk-job spec.
    BulkStatus status              = 2;  // The bulk-job status/data.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message BulkSpec {
    // @gqltype: UUID
    string correlation_id = 1;  // The correlation identifier, e.g. to define relation to non-homogenous group.
    oneof device {
        ListOfJobDeviceId devices = 2;  // The list of devices in the bulk.
        string device_group_id    = 3;  // The device group identifier.
    }
    JobSettings settings          = 4;  // The bulk-shared job settings.
    repeated JobActionSet actions = 5;  // The list actions to be executed.
    string webhook_url            = 6;  // The webhook URL to call when the bulk is completed.
}

message BulkStatus {
    BulkStatusCode status                 = 1;  // The job status.
    int32 jobs_count                      = 2;  // The number of jobs in the bulk.
    int32 jobs_finished                   = 3;  // The number of jobs finished.
    int32 jobs_successful                 = 4;  // The number of jobs successful.
    google.protobuf.Timestamp created_at  = 5;  // The creation timestamp of the bulk.
    google.protobuf.Timestamp started_at  = 6;  // The start timestamp of the bulk.
    google.protobuf.Timestamp finished_at = 7;  // The finish timestamp of the bulk.
}

message BulkJob {
    BulkJobSpec spec               = 1;  // The job spec.
    JobStatus status               = 2;  // The job status.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message BulkJobSpec {
    JobDevice device = 1;  // The device info.
}

message ListBulkJobsRequest {
    string bulk_id                                      = 1;  // The bulk identifier.
    io.clbs.openhes.models.common.ListSelector selector = 2;  // The list selector.
}

message ListOfBulkJob {
    repeated BulkJob items = 1;  // The list of jobs.
    int32 total_count      = 2;  // The total number of items.
}

// Proxy Bulk specification.

message CreateProxyBulkRequest {
    ProxyBulkSpec spec             = 1;  // The proxy bulk-job spec.
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ProxyBulkSpec {
    // @gqltype: UUID
    string correlation_id      = 1;  // The correlation identifier, e.g. to define relation to non-homogenous group.
    string driver_type         = 2;  // The device (driver) type.
    ListOfJobDevice devices    = 3;  // The list of custom devices in the proxy bulk.
    JobSettings settings       = 4;  // The bulk-shared job settings.
    repeated JobAction actions = 5;  // The list actions to be executed.
    string webhook_url         = 6;  // The webhook URL to call when the proxy bulk is completed.
}

message ProxyBulk {
    ProxyBulkSpec spec             = 1;  // The bulk-job spec.
    BulkStatus status              = 2;  // The bulk-job status/data.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

// Modem Pool specification.

message SetModemPoolRequest {
    reserved 2;                          // reserved for status
    ModemPoolSpec spec             = 1;  // The modem pool specification.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message ListOfModemPool {
    repeated ModemPool items = 1;  // The list of modem pools.
    int32 total_count        = 2;  // The total number of items.
}

message ModemPoolSpec {
}

message ModemPoolStatus {
    repeated ModemInfo modems = 1;  // The list of modems in the pool.
}

message ModemPool {
    ModemPoolSpec spec             = 1;  // The modem pool specification.
    ModemPoolStatus status         = 2;  // The modem pool status.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

// Modem specification.

message SetModemRequest {
    string pool_id  = 1;  // The modem pool identifier, required for update operation.
    ModemInfo modem = 2;  // The modem specification.
}

// Driver specification.

message SetDriver {
    reserved 2, 3;        // reserved for status, metadata
    DriverSpec spec = 1;  // The driver specification.
}

message ListOfDriver {
    repeated Driver items = 1;  // The list of drivers.
    int32 total_count     = 2;  // The total number of items.
}

message Driver {
    reserved 3;               // reserved for metadata
    DriverSpec spec     = 1;  // The driver specification.
    DriverStatus status = 2;  // The driver status.
}

message DriverSpec {
    // The driver version. The format is not defined. The driver itself is versioned by the docker image tags so this value shall be either the same (set during the image build) or any useful user-readable version string.
    string version = 1;
    // The port the driver's gRPC will listen on.
    uint32 listening_port = 2;
    // The technical/internal ID of the driver.
    string driver_type = 3;
    // The maximum number of concurrent jobs the driver can handle. The value 0 is not allowed, the maximum number respect typical_mem_usage not to overgrow the memory resources!
    int32 max_concurrent_jobs = 4;
    // The maximum cascade depth the driver can handle. Number 1 means that the driver cannot handle cascading jobs, 2 means that the driver can handle cascading jobs with one level of depth, etc.
    // The value 0 means that the driver can handle any number of cascading jobs.
    uint32 max_cascade_depth = 5;
    // The typical memory usage of the driver in MB.
    int32 typical_mem_usage = 6;
    // The connection and action templates.
    DriverTemplates templates = 7;
    // The display name of the driver. Must be in format '<manufacturer> <device_type> [<device_type_version>]'.
    // It must respect upper/lower characters.
    // The generic drivers, such as 'cybros labs generic', must be named as '<driver_company_name> generic'.
    //
    // Examples: 'Addax NP73E', 'cybros labs generic', 'Landis+Gyr S650 v2'
    string display_name = 8;
}

message DriverStatus {
    bool is_latest       = 1;  // Whether the driver is the latest installed version in the system. Note that this does not mean that the driver is the latest released version!
    bool update_finished = 2;  // Whether the driver update from previous version (if any) has been finished.
}

// Variables

message CreateVariableRequest {
    VariableSpec spec              = 1;  // The variable specification.
    common.MetadataFields metadata = 2;  // The metadata fields.
}

message ListOfVariable {
    repeated Variable items = 1;  // The list of variables.
    int32 total_count       = 2;  // The total number of items.
}

message Variable {
    reserved 2;                          // reserved for status
    VariableSpec spec              = 1;  // The variable specification.
    common.MetadataFields metadata = 3;  // The metadata fields.
}

message VariableSpec {
    repeated string register_id    = 1;  // The list of device configuration register identifiers.
    common.FieldDataType data_type = 2;  // The data type of the variable. Only registers of the same data type can be linked to the variable.
    bool exclude_data_from         = 3;  // If true, the device data returned for this variable will exclude values at 'from' timestamp. Default is false (include values at 'from' timestamp).
}

message AddRegisterToVariableRequest {
    string variable_id          = 1;  // The unique identifier of the variable.
    repeated string register_id = 2;  // The list of register identifiers to be linked to the variable.
}

message RemoveRegisterFromVariableRequest {
    string variable_id          = 1;  // The unique identifier of the variable.
    repeated string register_id = 2;  // The list of register identifiers to be linked to the variable.
}

// Device Configuration Register specification

message CreateDeviceConfigurationRegisterRequest {
    DeviceConfigurationRegisterSpec spec = 1;  // The register specification.
    common.MetadataFields metadata       = 2;  // The metadata fields.
}

message ListOfDeviceConfigurationRegister {
    repeated DeviceConfigurationRegister items = 1;  // The list of registers.
    int32 total_count                          = 2;  // The total number of items.
}

message DeviceConfigurationRegister {
    reserved 2;                                // reserved for status
    DeviceConfigurationRegisterSpec spec = 1;  // The register specification.
    common.MetadataFields metadata       = 3;  // The metadata fields.
}

message DeviceConfigurationRegisterMap {
    repeated DeviceConfigurationRegisterMapRecord items = 1;  // The list of device configuration registers to create a map.
}

message DeviceConfigurationRegisterMapRecord {
    int64 register_id             = 1;  // The register identifier.
    string public_register_id     = 2;  // The public register identifier.
    string register_name          = 3;  // The register name.
    repeated string variable_name = 4;  // The name of the variable, if the register is assigned to some.
}

// Device Configuration Template specification.

message CreateDeviceConfigurationTemplateRequest {
    DeviceConfigurationTemplateSpec spec = 1;  // The device configuration template specification.
    common.MetadataFields metadata       = 2;  // The metadata fields.
}

message ListOfDeviceConfigurationTemplate {
    repeated DeviceConfigurationTemplate items = 1;  // The list of device configuration templates.
    int32 total_count                          = 2;  // The total number of items.
}

message DeviceConfigurationTemplate {
    reserved 2;                                // reserved for status
    DeviceConfigurationTemplateSpec spec = 1;  // The device configuration template specification.
    common.MetadataFields metadata       = 3;  // The metadata fields.
}

message DeviceConfigurationTemplateSpec {
    string driver_type          = 1;  // The device (driver) type.
    repeated string register_id = 2;  // The list of device configuration register identifiers.
}

message AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest {
    string dct_id               = 1;  // The identifier of the device configuration template.
    repeated string register_id = 2;  // The list of register identifiers to be linked to the template.
}

message RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest {
    string dct_id               = 1;  // The identifier of the device configuration template.
    repeated string register_id = 2;  // The list of register identifiers to be unlinked from the template.
}

// Device Data

message GetDeviceDataRequest {
    google.protobuf.Timestamp range_start       = 1;  // The start timestamp of the data. The exclusivness/inclusiveness of the timestamp is defined in the variable.
    google.protobuf.Timestamp range_end         = 2;  // The end timestamp of the data. It is inclusive.
    repeated GetDeviceDataSeriesSelector series = 3;  // One or more identifiers of the devices.
    int64 filter_include_status                 = 4;  // The filter status bits, only values with these status bits will be returned in the response.
    int64 filter_exclude_status                 = 5;  // The filter status bits, only values without these status bits will be returned in the response.
    google.protobuf.Timestamp snapshot          = 6;  // If set, the system will return a snapshot from the given point in time, e.g. what has been stored in the system yesterday.
}

message GetDeviceDataSeriesSelector {
    string device_id   = 1;  // The unique identifier of the device.
    string variable_id = 2;  // The unique identifier of the variable.
}

message DeviceData {
    repeated DeviceDeviceData devices = 1;  // The list of device data items.
}

message DeviceDeviceData {
    string device_id                 = 1;  // The unique identifier of the device.
    repeated VariableDeviceData data = 2;  // The list of variable data items.
}

message VariableDeviceData {
    string variable_id                            = 1;  // The unique identifier of the variable.
    repeated google.protobuf.Timestamp timestamps = 2;  // The list of timestamps for the variable data.
    repeated string units                         = 3;  // The list of units for the variable data.
    repeated MeasuredValue values                 = 4;  // The list of measured values for the variable data.
}

// Device Data Info

message DeviceDataInfo {
    reserved 3;
    DeviceDataInfoSpec spec     = 1;  // The device data info specification.
    DeviceDataInfoStatus status = 2;  // The device data info status.
}

message DeviceDataInfoSpec {
    string device_id   = 1;  // The device identifier.
    string register_id = 2;  // The register identifier.
}

message DeviceDataInfoStatus {
    string register_name                    = 1;  // The register name.
    int32 period                            = 2;  // The period of the regular profile values, if applicable.
    google.protobuf.Timestamp last_value_at = 3;  // The timestamp of the last stored value.
}

message ListOfDeviceDataInfo {
    repeated DeviceDataInfo items = 1;  // The list of device data info items.
    int32 total_count             = 2;  // The total number of items.
}

// Device Events

message GetDeviceEventsRequest {
    google.protobuf.Timestamp range_start = 1;  // The start timestamp of the device events selection. It is inclusive.
    google.protobuf.Timestamp range_end   = 2;  // The end timestamp of the device events selection. It is inclusive.
    string device_id                      = 3;  // The unique identifier of the device.
}

// Device Bulk

message GetDeviceBulksRequest {
    google.protobuf.Timestamp range_start = 1;  // The start timestamp of the bulks selection. It is inclusive.
    google.protobuf.Timestamp range_end   = 2;  // The end timestamp of the bulks selection. It is inclusive.
    string device_id                      = 3;  // The unique identifier of the device.
}

message DeviceBulks {
    repeated Bulk bulks = 1;  // The list of bulks.
}

// TOU

message CreateTimeOfUseTableRequest {
    timeofuse.TimeOfUseTableSpec spec = 1;  // The time-of-use table specification.
    common.MetadataFields metadata    = 2;  // The metadata fields.
}

message ListOfTimeOfUseTable {
    repeated TimeOfUseTable items = 1;  // The list of time-of-use tables.
    int32 total_count             = 2;  // The total number of items.
}

message TimeOfUseTable {
    reserved 2;                             // reserved for status
    timeofuse.TimeOfUseTableSpec spec = 1;  // The time-of-use table specification.
    common.MetadataFields metadata    = 3;  // The metadata fields.
}
