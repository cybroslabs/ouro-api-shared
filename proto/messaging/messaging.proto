// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.messaging;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/messaging";

import "google/protobuf/wrappers.proto";
import "common/fields.proto";
import "common/metadata.proto";

message MessagingConsumerClient {
    oneof kind {
        MessagingConsumerSetup setup    = 1;  // Setup action to initialize the consumer. It must be the first message sent defining the consumer. Any other subsequent setup message will be rejected.
        google.protobuf.StringValue ack = 2;  // Acknowledgement action to confirm the message with the given message ID.
        google.protobuf.StringValue nak = 3;  // Negative-acknowledgement action to reject and requeue the message with the given message ID.
    }
}

message MessagingConsumerServer {
    oneof kine {
        MessagingReceiveMessage receive = 1;  // Receive action to deliver a message to the consumer.
    }
}

message MessagingPublisherClient {
    oneof kind {
        MessagingPublisherSetup setup   = 1;  // Setup action to initialize the publisher. It must be the first message sent defining the publisher. Any other subsequent setup message will be rejected.
        MessagingPublishMessage publish = 2;  // Publish action to send a message to be published.
    }
}

message MessagingPublisherSetup {
    reserved 1, 2;
    common.MetadataFields metadata = 3;  // The metadata fields. The ID and name represents the component ID and name and must be the same for all publishers and consumers of the same component.
}

message MessagingPublishMessage {
    string subject = 1;  // Subject of the message to be published.
    bytes data     = 2;  // The message data to be published.
}

message MessagingConsumerSetup {
    reserved 1;
    MessagingComponentConsumerSettings settings = 2;  // Settings for the messaging component.
    common.MetadataFields metadata              = 3;  // The metadata fields. The ID and name represents the component ID and name and must be the same for all publishers and consumers of the same component.
}

message MessagingReceiveMessage {
    string message_id = 1;  // Unique identifier of the message.
    string subject    = 2;  // Subject of the message.
    bytes data        = 3;  // The message data.
}

message ListOfMessagingComponent {
    repeated MessagingComponent items = 1;  // The list of messaging components known to the system.
    int32 total_count                 = 2;  // The total number of items.
}

message MessagingComponent {
    MessagingComponentSpec spec     = 1;  // Specification of the messaging component.
    MessagingComponentStatus status = 2;  // Specification of the messaging component.
    common.MetadataFields metadata  = 3;  // The metadata fields.
}

message MessagingComponentConsumerSettings {
    string consumer_id           = 1;  // Unique UUID identifier for the consumer. It must be unique across all consumers of the same component.
    int32 max_in_flight_messages = 2;  // Maximum number of in-flight (unacknowledged) messages allowed for the consumer. Value >1 means that multiple consumers may receive messages concurrently without preserving order. Value 1 means that only a single message may be in-flight at any time, preserving order even when multiple consumers are running.
    repeated string subjects     = 3;  // List of non-empty subjects the consumer is interested in. At least one must be set. If it's changed then all instances of the same component will be affected!
}

message MessagingComponentSpec {
    bool enabled                                          = 1;  // Whether the component is enabled or disabled. If disabled, the component will not receive any messages.
    repeated MessagingComponentConsumerSettings consumers = 2;  // Settings for the messaging component.
}

message MessagingComponentStatus {
    // FIXME: Add status fields as needed
}
