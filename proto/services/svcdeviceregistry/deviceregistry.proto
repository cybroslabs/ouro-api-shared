// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcdeviceregistry;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcdeviceregistry";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "acquisition/main.proto";
import "acquisition/internal.proto";
import "acquisition/shared.proto";
import "common/fields.proto";
import "common/internal.proto";
import "common/types.proto";
import "common/metadata.proto";

// The Deviceregistry service definition.
service DeviceRegistryService {
    // Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
    rpc CreateVariable(io.clbs.openhes.models.acquisition.CreateVariableRequest) returns (google.protobuf.StringValue);
    rpc ListVariables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfVariable);
    rpc GetVariable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Variable);
    rpc UpdateVariable(io.clbs.openhes.models.acquisition.Variable) returns (google.protobuf.Empty);
    rpc DeleteVariable(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc AddRegisterToVariable(io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest) returns (google.protobuf.Empty);
    rpc RemoveRegisterFromVariable(io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest) returns (google.protobuf.Empty);

    // Creates a new register. The register object holds the information about the single device register.
    rpc CreateDeviceConfigurationRegister(io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest) returns (google.protobuf.StringValue);
    rpc ListDeviceConfigurationRegisters(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister);
    rpc GetDeviceConfigurationRegister(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationRegister);
    rpc UpdateDeviceConfigurationRegister(io.clbs.openhes.models.acquisition.DeviceConfigurationRegister) returns (google.protobuf.Empty);
    rpc DeleteDeviceConfigurationRegister(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc GetDeviceConfigurationRegisterMap(google.protobuf.Empty) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMap);

    rpc CreateDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest) returns (google.protobuf.StringValue);
    rpc ListDeviceConfigurationTemplates(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate);
    rpc GetDeviceConfigurationTemplate(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate);
    rpc UpdateDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate) returns (google.protobuf.Empty);
    rpc DeleteDeviceConfigurationTemplate(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) returns (google.protobuf.Empty);
    rpc RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) returns (google.protobuf.Empty);

    // The method called by the RestApi to get the list of drivers.
    rpc ListDrivers(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDriver);
    // The method called by the OuroOperator to set the driver templates. The parameter contains the driver templates.
    rpc CreateDriver(io.clbs.openhes.models.acquisition.SetDriver) returns (google.protobuf.Empty);
    // The method called by the RestApi to get the driver templates.
    rpc GetDriver(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Driver);

    // @group: Devices
    // @tag: communicationunit
    // The method called by the RestAPI to register a new communication unit. The parameter contains the communication unit specification.
    rpc CreateCommunicationUnit(io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: communicationunit
    // The method updates the communication unit. The parameter contains the communication unit specification.
    rpc UpdateCommunicationUnit(io.clbs.openhes.models.acquisition.CommunicationUnit) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationunit
    // The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
    rpc ListCommunicationUnits(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationUnit);
    // @group: Devices
    // @tag: communicationunit
    // The method called by the RestAPI to get the information about the communication unit. The parameter contains the search criteria.
    rpc GetCommunicationUnit(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.CommunicationUnit);
    // @group: Devices
    // @tag: communicationunit
    // Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
    rpc GetCommunicationUnitNetworkMap(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.NetworkMap);

    // @group: Devices
    // @tag: communicationbus
    rpc CreateCommunicationBus(io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: communicationbus
    rpc ListCommunicationBuses(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationBus);
    // @group: Devices
    // @tag: communicationbus
    rpc AddCommunicationUnitsToCommunicationBus(io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationbus
    rpc RemoveCommunicationUnitsFromCommunicationBus(io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    // The method called by the RestAPI to register a new device. The parameter contains the device specification.
    rpc CreateDevice(io.clbs.openhes.models.acquisition.CreateDeviceRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: device
    // The method updates the device. The parameter contains the device specification.
    rpc UpdateDevice(io.clbs.openhes.models.acquisition.Device) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    // The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
    rpc ListDevices(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDevice);
    // @group: Devices
    // @tag: device
    // The method called by the RestAPI to get the information about the device. The parameter contains the search criteria.
    rpc GetDevice(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Device);
    // @group: Devices
    // @tag: device
    rpc StreamDeviceType(stream io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesRequest) returns (stream io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesResponse);
    // The method called by the RestAPI to replace ordered set of linked communication units.
    rpc SetDeviceCommunicationUnits(io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get communication units definitions linked to the device(s).
    rpc GetDeviceCommunicationUnits(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit);
    // @group: Devices
    // @tag: device
    // The method called by the RestAPI to get the list of device communication unit changes.
    rpc ListDeviceCommunicationUnitChanges(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange);
    // The method called by the DataProxy to resolve connection info for given device(s).
    rpc GetDeviceConnectionInfo(google.protobuf.ListValue) returns (io.clbs.openhes.models.acquisition.MapDeviceConnectionInfo);
    // Sets the device information.
    rpc SetDeviceInfo(io.clbs.openhes.models.acquisition.SetDeviceInfoRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // The method to stream out profile-typed meter data.
    rpc GetDeviceInfo(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceInfo);
    // @group: Devices
    // @tag: device
    // The method returns a list of device groups that contain the device. The parameter contains the device identifier.
    rpc GetDeviceDeviceGroups(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ListOfDeviceGroup);
    // @group: Devices
    // @tag: device
    // Retrieves the network map (topology) that the data concentrator reports for the specified communication unit.
    rpc GetDeviceNetworkMap(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.NetworkMap);

    // The method called by the RestAPI to create a new device group. The parameter contains the device group specification.
    rpc CreateDeviceGroup(io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest) returns (google.protobuf.StringValue);
    // The method returns a list of device groups.
    rpc ListDeviceGroups(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceGroup);
    // The method returns single device group.
    // @param The device group identifier.
    // @return The device group specification.
    rpc GetDeviceGroup(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceGroup);

    // The method returns stream of devices from the device group.
    // @param The device group identifier.
    rpc StreamDeviceGroup(google.protobuf.StringValue) returns (stream io.clbs.openhes.models.acquisition.StreamDeviceGroup);
    // The method called by the RestAPI to add a new device to the device group. The parameter contains the device group specification.
    rpc AddDevicesToGroup(io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to remove a device from the device group. The parameter contains the device group specification.
    rpc RemoveDevicesFromGroup(io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest) returns (google.protobuf.Empty);
    // The method called by the RestAPI to get the information about the device group. The parameter contains the search criteria.
    rpc ListDeviceGroupDevices(io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest) returns (io.clbs.openhes.models.acquisition.ListOfDevice);

    // The method to get list of the modem pools.
    rpc ListModemPools(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfModemPool);
    // The method to get the information about the modem pool. The method returns the modem pool information.
    rpc GetModemPool(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ModemPool);
    // The method to create a new modem pool.
    rpc CreateModemPool(io.clbs.openhes.models.acquisition.SetModemPoolRequest) returns (google.protobuf.StringValue);
    // The method to update the modem pool.
    rpc UpdateModemPool(io.clbs.openhes.models.acquisition.SetModemPoolRequest) returns (google.protobuf.Empty);
    // The method to delete the modem pool.
    rpc DeleteModemPool(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // The method to create a new modem within the pool.
    rpc CreateModem(io.clbs.openhes.models.acquisition.SetModemRequest) returns (google.protobuf.StringValue);
    // The method to update the modem within the pool.
    rpc UpdateModem(io.clbs.openhes.models.acquisition.SetModemRequest) returns (google.protobuf.Empty);
    // The method to delete the modem within the pool.
    rpc DeleteModem(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Time-Of-Use Tables
    // The method to create a new time-of-use table.
    rpc CreateTimeOfUseTable(io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest) returns (google.protobuf.StringValue);
    // @group: Time-Of-Use Tables
    // The method to get the list of time-of-use tables.
    rpc ListTimeOfUseTables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable);
    // @group: Time-Of-Use Tables
    // The method to get the time-of-use table.
    rpc GetTimeOfUseTable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.TimeOfUseTable);
    // @group: Time-Of-Use Tables
    // The method to update the time-of-use table.
    rpc UpdateTimeOfUseTable(io.clbs.openhes.models.acquisition.TimeOfUseTable) returns (google.protobuf.Empty);
    // @group: Time-Of-Use Tables
    // The method to delete the time-of-use table.
    rpc DeleteTimeOfUseTable(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Fields
    // The method to create a new field descriptor user-defined field descriptor.
    rpc CreateFieldDescriptor(io.clbs.openhes.models.common.CreateFieldDescriptorRequest) returns (google.protobuf.StringValue);
    // @group: Fields
    // The method to update the field descriptor.
    rpc UpdateFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptor) returns (google.protobuf.Empty);
    // @group: Fields
    // The method to delete the field descriptor.
    rpc DeleteFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptorSelector) returns (google.protobuf.Empty);

    // @group: Metadata
    // The method to set the managed fields of the resource(s).
    rpc SetManagedFields(io.clbs.openhes.models.common.SetManagedFieldsRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: device
    // The method returns the list of x-device-identifiers that match the given device-type specific key.
    // The key can be any byte-array like unique physical identifier of the device (e.g. serial number, MAC address, etc.) which must be unique for give driver type.
    // If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
    rpc GetMapDeviceKeyXId(io.clbs.openhes.models.common.ListOfDeviceKey) returns (io.clbs.openhes.models.common.MapDeviceKeyXId);
    // @group: Internal
    // @tag: communicationunit
    // Adds a new log records to the communication unit. Duplicit records are ignored.
    rpc AddCommunicationUnitLogs(io.clbs.openhes.models.acquisition.AddCommunicationUnitLogsRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: communicationunit
    // The method sets currently known unknown devices visible by the communication unit.
    rpc SetUnknownDevices(io.clbs.openhes.models.acquisition.SetUnknownDevicesRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: communicationunit
    // The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
    // If there were other neighbours not listed within the request, they are removed from the neighbours list.
    rpc SetNeightbours(io.clbs.openhes.models.acquisition.SetNeighboursRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: device
    // The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
    // The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
    // The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
    rpc SetCurrentDeviceCommunicationUnit(io.clbs.openhes.models.acquisition.SetCurrentDeviceCommunicationUnitInternalRequest) returns (google.protobuf.Empty);

    // @group: Metadata
    // The method sets the fields of an object. The values are merged with the existing fields to preserve the existing fields that are not set in the request.
    rpc UpdateObjectFields(io.clbs.openhes.models.common.UpdateObjectFieldsRequest) returns (google.protobuf.Empty);
}
