// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcdeviceregistry;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcdeviceregistry";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "acquisition/main.proto";
import "acquisition/internal.proto";
import "acquisition/shared.proto";
import "common/fields.proto";
import "common/internal.proto";
import "common/types.proto";
import "common/metadata.proto";

// The Deviceregistry service definition.
service DeviceRegistryService {
    // Creates a new variable. The variable object defines named variable that provides abstraction for device configuration registers.
    rpc CreateVariable(io.clbs.openhes.models.acquisition.CreateVariableRequest) returns (google.protobuf.StringValue);
    // Retrieves a paginated list of variables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListVariables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfVariable);
    // Retrieves the details of the specified variable.
    rpc GetVariable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Variable);
    // Updates the details of an existing variable. Fields that are omitted from the request will be left unchanged.
    rpc UpdateVariable(io.clbs.openhes.models.acquisition.Variable) returns (google.protobuf.Empty);
    // Deletes the specified variable.
    rpc DeleteVariable(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // Adds a specified register to and existing variable.
    rpc AddRegisterToVariable(io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest) returns (google.protobuf.Empty);
    // Removes a specified register from a variable.
    rpc RemoveRegisterFromVariable(io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest) returns (google.protobuf.Empty);

    // Creates a new device configuration register. Returns the identifier of the newly created register.
    rpc CreateDeviceConfigurationRegister(io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest) returns (google.protobuf.StringValue);
    // Retrieves a paginated list of configuration registers based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    rpc ListDeviceConfigurationRegisters(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister);
    // Retrieves the details of the specified device configuration register.
    rpc GetDeviceConfigurationRegister(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationRegister);
    // Updates the details of an existing device configuration register. Fields that are omitted from the request will be left unchanged.
    rpc UpdateDeviceConfigurationRegister(io.clbs.openhes.models.acquisition.DeviceConfigurationRegister) returns (google.protobuf.Empty);
    // Deletes the specified device configuration register.
    rpc DeleteDeviceConfigurationRegister(google.protobuf.StringValue) returns (google.protobuf.Empty);
    rpc GetDeviceConfigurationRegisterMap(google.protobuf.Empty) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationRegisterMap);

    // Creates a new device configuration template. Returns the identifier of the newly created template.
    rpc CreateDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest) returns (google.protobuf.StringValue);
    // Retrieves a paginated list of device configuration templates based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceConfigurationTemplates(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate);
    // Retrieves the details of the specified device configuration template.
    rpc GetDeviceConfigurationTemplate(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate);
    // Updates the details of an existing device configuration template. Fields that are omitted from the request will be left unchanged.
    rpc UpdateDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate) returns (google.protobuf.Empty);
    // Deletes the specified device configuration template.
    rpc DeleteDeviceConfigurationTemplate(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // Adds a specified device configuration register to an existing device configuration template.
    rpc AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) returns (google.protobuf.Empty);
    // Removes a specified device configuration register from a device configuration template.
    rpc RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) returns (google.protobuf.Empty);

    // Retrieves a paginated list of drivers based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDrivers(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDriver);
    // The method called by the Ouro Operator to set the driver templates. The parameter contains the driver templates.
    rpc CreateDriver(io.clbs.openhes.models.acquisition.SetDriver) returns (google.protobuf.Empty);
    // Retrieves the details of the specified driver.
    rpc GetDriver(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Driver);

    // @group: Devices
    // @tag: communicationunit
    // Creates a new communication unit. Returns the identifier of the newly created register.
    rpc CreateCommunicationUnit(io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: communicationunit
    // Updates an exiting communication unit. Requires the full unit specification; partial updates are not supported.
    rpc UpdateCommunicationUnit(io.clbs.openhes.models.acquisition.CommunicationUnit) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationunit
    // Retrieve a paginated list of communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListCommunicationUnits(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationUnit);
    // @group: Devices
    // @tag: communicationunit
    // Retrieves the details of the specified communication unit.
    rpc GetCommunicationUnit(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.CommunicationUnit);
    // @group: Devices
    // @tag: communicationunit
    // Deletes the specified communication unit.
    rpc DeleteCommunicationUnit(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationunit
    // Retrieves the network map (topology) reported by the data concentrator reports for the specified communication unit.
    rpc GetCommunicationUnitNetworkMap(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.NetworkMap);
    // @group: Drivers
    // @tag: communicationunit
    // Retrieves a paginated list of communication unit log records based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListCommunicationUnitLogRecords(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationUnitLogRecord);

    // @group: Devices
    // @tag: communicationbus
    // Creates a new communication bus. Returns the identifier of the newly created communication bus.
    rpc CreateCommunicationBus(io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: communicationbus
    // Retrieves a paginated list of communication buses. The page size and page number (zero-based) can be defined in the request.
    rpc ListCommunicationBuses(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationBus);
    // @group: Devices
    // @tag: communicationbus
    // Deletes the specified communication bus.
    rpc DeleteCommunicationBus(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationbus
    // Adds a specified communication unit to an existing communication bus.
    rpc AddCommunicationUnitsToCommunicationBus(io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationbus
    // Removes a specified communication bus from an existing communication bus.
    rpc RemoveCommunicationUnitsFromCommunicationBus(io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    // Creates a new device. Returns the identifier of the newly created device.
    rpc CreateDevice(io.clbs.openhes.models.acquisition.CreateDeviceRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: device
    // Updates the details of an existing device. Fields that are omitted from the request will be left unchanged.
    rpc UpdateDevice(io.clbs.openhes.models.acquisition.Device) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    // Retrieves a paginated list of devices based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDevices(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDevice);
    // @group: Devices
    // @tag: device
    // Retrieves the details of the specified device.
    rpc GetDevice(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Device);
    // @group: Devices
    // @tag: device
    // Deletes the specified device.
    rpc DeleteDevice(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    rpc StreamDeviceType(stream io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesRequest) returns (stream io.clbs.openhes.models.acquisition.StreamDevicesDriverTypesResponse);
    // The method called by the RestAPI to replace ordered set of linked communication units.
    rpc SetDeviceCommunicationUnits(io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest) returns (google.protobuf.Empty);
    // Retrieves a list of communication units linked to the specified device.
    rpc GetDeviceCommunicationUnits(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit);
    // @group: Devices
    // @tag: device
    // Retrieves a paginated list of changes to device communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceCommunicationUnitChanges(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange);
    // The method called by the DataProxy to resolve connection info for given device(s).
    rpc GetDeviceConnectionInfo(google.protobuf.ListValue) returns (io.clbs.openhes.models.acquisition.MapDeviceConnectionInfo);
    // Sets the device information.
    rpc SetDeviceInfo(io.clbs.openhes.models.acquisition.SetDeviceInfoRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // Retrieves the profile-typed info of the specified device.
    rpc GetDeviceInfo(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceInfo);
    // @group: Devices
    // @tag: device
    // Retrieves a list of device groups that contain the specified device.
    rpc GetDeviceDeviceGroups(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ListOfDeviceGroup);
    // @group: Devices
    // @tag: device
    // Retrieves the network map (topology) reported by the data concentrator reports for the specified  device.
    rpc GetDeviceNetworkMap(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.NetworkMap);

    // Creates a new device group. Returns the identifier of the newly created device group.
    rpc CreateDeviceGroup(io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest) returns (google.protobuf.StringValue);
    // Retrieves a paginated list of devices groups based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceGroups(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceGroup);
    // @param The device group identifier.
    // @return The device group specification.
    // Retrieves the details of the specified device group.
    rpc GetDeviceGroup(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceGroup);
    // @group: Devices
    // @tag: devicegroup
    // Deletes the specified device group.
    rpc DeleteDeviceGroup(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // The method returns stream of devices from the device group.
    // @param The device group identifier.
    rpc StreamDeviceGroup(google.protobuf.StringValue) returns (stream io.clbs.openhes.models.acquisition.StreamDeviceGroup);
    // Adds the specified devices to an existing device group.
    rpc AddDevicesToGroup(io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest) returns (google.protobuf.Empty);
    // Removes the specified devices from an existing device group.
    rpc RemoveDevicesFromGroup(io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest) returns (google.protobuf.Empty);
    // Retrieves a paginated list of devices in the specified device group. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceGroupDevices(io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest) returns (io.clbs.openhes.models.acquisition.ListOfDevice);

    // Retrieves a paginated list of modem pools. The page size and page number (zero-based) can be defined in the request.
    rpc ListModemPools(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfModemPool);
    // Retrieves the details of the specified modem pool.
    rpc GetModemPool(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ModemPool);
    // Creates a new modem pool. Returns the identifier of the newly created modem pool.
    rpc CreateModemPool(io.clbs.openhes.models.acquisition.SetModemPoolRequest) returns (google.protobuf.StringValue);
    // Updates the details of an existing modem pool. Fields that are omitted from the request will be left unchanged.
    rpc UpdateModemPool(io.clbs.openhes.models.acquisition.SetModemPoolRequest) returns (google.protobuf.Empty);
    // Deletes the specified modem pool.
    rpc DeleteModemPool(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // Creates a new modem within an existing modem pool. Returns the identifier of the newly created modem.
    rpc CreateModem(io.clbs.openhes.models.acquisition.SetModemRequest) returns (google.protobuf.StringValue);
    // Updates the details of an existing modem within the specified modem pool.
    rpc UpdateModem(io.clbs.openhes.models.acquisition.SetModemRequest) returns (google.protobuf.Empty);
    // Deletes th specified modem.
    rpc DeleteModem(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Time-Of-Use Tables
    // Creates a new time-of-use table. Returns the identifier of the newly created table.
    rpc CreateTimeOfUseTable(io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest) returns (google.protobuf.StringValue);
    // @group: Time-Of-Use Tables
    // Retrieves a paginated list of time-of-use tables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListTimeOfUseTables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable);
    // @group: Time-Of-Use Tables
    // Retrieves the details of the spcified time-of-use table.
    rpc GetTimeOfUseTable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.TimeOfUseTable);
    // @group: Time-Of-Use Tables
    // Updates the details of an existing time-of-use table.
    rpc UpdateTimeOfUseTable(io.clbs.openhes.models.acquisition.TimeOfUseTable) returns (google.protobuf.Empty);
    // @group: Time-Of-Use Tables
    // Deletes the specified time-of-use table.
    rpc DeleteTimeOfUseTable(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Fields
    // Creates a new field descriptor. Returns the identifier of the newly created field descriptor.
    rpc CreateFieldDescriptor(io.clbs.openhes.models.common.CreateFieldDescriptorRequest) returns (google.protobuf.StringValue);
    // @group: Fields
    // Updates the details of an existing field descriptor. Fields that are omitted from the request will be left unchanged.
    rpc UpdateFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptor) returns (google.protobuf.Empty);
    // @group: Fields
    // Deletes the specified field descriptor.
    rpc DeleteFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptorSelector) returns (google.protobuf.Empty);

    // @group: Metadata
    // The method to set the managed fields of the resource(s).
    rpc SetManagedFields(io.clbs.openhes.models.common.SetManagedFieldsRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: device
    // The method returns the list of x-device-identifiers that match the given device-type specific key.
    // The key can be any byte-array like unique physical identifier of the device (e.g. serial number, MAC address, etc.) which must be unique for give driver type.
    // If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
    rpc GetMapDeviceKeyXId(io.clbs.openhes.models.common.ListOfDeviceKey) returns (io.clbs.openhes.models.common.MapDeviceKeyXId);
    // @group: Internal
    // @tag: communicationunit
    // Adds a new log records to the communication unit. Duplicit records are ignored.
    rpc AddCommunicationUnitLogs(io.clbs.openhes.models.acquisition.AddCommunicationUnitLogsRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: communicationunit
    // The method sets currently known unknown devices visible by the communication unit.
    rpc SetUnknownDevices(io.clbs.openhes.models.acquisition.SetUnknownDevicesRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: communicationunit
    // The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
    // If there were other neighbours not listed within the request, they are removed from the neighbours list.
    rpc SetNeightbours(io.clbs.openhes.models.acquisition.SetNeighboursRequest) returns (google.protobuf.Empty);
    // @group: Internal
    // @tag: device
    // The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
    // The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
    // The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
    rpc SetCurrentDeviceCommunicationUnit(io.clbs.openhes.models.acquisition.SetCurrentDeviceCommunicationUnitInternalRequest) returns (google.protobuf.Empty);

    // @group: Metadata
    // Updates the fields of the specified object. Field values provided in the request are merged with existing fields, preserving any fields not included in the update.
    rpc UpdateObjectFields(io.clbs.openhes.models.common.UpdateObjectFieldsRequest) returns (google.protobuf.Empty);
}
