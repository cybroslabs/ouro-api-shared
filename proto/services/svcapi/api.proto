// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcapi;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcapi";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "common/fields.proto";
import "common/metadata.proto";
import "common/types.proto";
import "acquisition/main.proto";
import "acquisition/shared.proto";
import "cronjobs/cronjobs.proto";
import "crypto/management.proto";
import "system/main.proto";

// The Dataproxy related service definition.
service ApiService {
    // @group: Variables
    // Creates a new variable. A variable is a named abstraction for device configuration registers. Returns the identifier of the newly created variable.
    rpc CreateVariable(io.clbs.openhes.models.acquisition.CreateVariableRequest) returns (google.protobuf.StringValue);
    // @group: Variables
    // Retrieves a paginated list of variables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListVariables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfVariable);
    // @group: Variables
    // Retrieves the details of the specified variable.
    rpc GetVariable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Variable);
    // @group: Variables
    // Updates the details of an existing variable. Fields that are omitted from the request will be left unchanged.
    rpc UpdateVariable(io.clbs.openhes.models.acquisition.Variable) returns (google.protobuf.Empty);
    // @group: Variables
    // Deletes the specified variable.
    rpc DeleteVariable(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Variables
    // Adds a specified register to and existing variable.
    rpc AddRegisterToVariable(io.clbs.openhes.models.acquisition.AddRegisterToVariableRequest) returns (google.protobuf.Empty);
    // @group: Variables
    // Removes a specified register from a variable.
    rpc RemoveRegisterFromVariable(io.clbs.openhes.models.acquisition.RemoveRegisterFromVariableRequest) returns (google.protobuf.Empty);

    // @group: Device Configuration Registers
    // Creates a new device configuration register. Returns the identifier of the newly created register.
    rpc CreateDeviceConfigurationRegister(io.clbs.openhes.models.acquisition.CreateDeviceConfigurationRegisterRequest) returns (google.protobuf.StringValue);
    // @group: Device Configuration Registers
    // Retrieves a paginated list of configuration registers based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    rpc ListDeviceConfigurationRegisters(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationRegister);
    // @group: Device Configuration Registers
    // Retrieves the details of the specified device configuration register.
    rpc GetDeviceConfigurationRegister(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationRegister);
    // @group: Device Configuration Registers
    // Updates the details of an existing device configuration register. Fields that are omitted from the request will be left unchanged.
    rpc UpdateDeviceConfigurationRegister(io.clbs.openhes.models.acquisition.DeviceConfigurationRegister) returns (google.protobuf.Empty);
    // @group: Device Configuration Registers
    // Deletes the specified device configuration register.
    rpc DeleteDeviceConfigurationRegister(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Device Configuration Templates
    // Creates a new device configuration template. Returns the identifier of the newly created template.
    rpc CreateDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.CreateDeviceConfigurationTemplateRequest) returns (google.protobuf.StringValue);
    // @group: Device Configuration Templates
    // Retrieves a paginated list of device configuration templates based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceConfigurationTemplates(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceConfigurationTemplate);
    // @group: Device Configuration Templates
    // Retrieves the details of the specified device configuration template.
    rpc GetDeviceConfigurationTemplate(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate);
    // @group: Device Configuration Templates
    // Updates the details of an existing device configuration template. Fields that are omitted from the request will be left unchanged.
    rpc UpdateDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.DeviceConfigurationTemplate) returns (google.protobuf.Empty);
    // @group: Device Configuration Templates
    // Deletes the specified device configuration template.
    rpc DeleteDeviceConfigurationTemplate(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Device Configuration Templates
    // Adds a specified device configuration register to an existing device configuration template.
    rpc AddDeviceConfigurationRegisterToDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.AddDeviceConfigurationRegisterToDeviceConfigurationTemplateRequest) returns (google.protobuf.Empty);
    // @group: Device Configuration Templates
    // Removes a specified device configuration register from a device configuration template.
    rpc RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplate(io.clbs.openhes.models.acquisition.RemoveDeviceConfigurationRegisterFromDeviceConfigurationTemplateRequest) returns (google.protobuf.Empty);

    // @group: Fields
    // Creates a new field descriptor. Returns the identifier of the newly created field descriptor.
    rpc CreateFieldDescriptor(io.clbs.openhes.models.common.CreateFieldDescriptorRequest) returns (google.protobuf.StringValue);
    // @group: Fields
    // Updates the details of an existing field descriptor. Fields that are omitted from the request will be left unchanged.
    rpc UpdateFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptor) returns (google.protobuf.Empty);
    // @group: Fields
    // Deletes the specified field descriptor.
    rpc DeleteFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptorSelector) returns (google.protobuf.Empty);
    // @group: Fields
    // Retrieves a paginated list of field descriptors based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListFieldDescriptors(google.protobuf.Empty) returns (io.clbs.openhes.models.common.ListOfFieldDescriptor);
    // @group: Fields
    // Retrieves a paginated list of available options for the field descriptor based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListFieldDescriptorOptions(io.clbs.openhes.models.common.ListFieldDescriptorOptionsRequest) returns (io.clbs.openhes.models.common.FieldDescriptorOptions);

    // @group: Bulks
    // Retrieves a paginated list of bulks based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    // The list contains both proxy and regular bulks.
    rpc ListBulks(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfBulk);
    // @group: Bulks
    // Retrieves a paginated list of jobs based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    // The listing can be used for jobs from both proxy and regular bulks.
    rpc ListBulkJobs(io.clbs.openhes.models.acquisition.ListBulkJobsRequest) returns (io.clbs.openhes.models.acquisition.ListOfBulkJob);
    // @group: Bulks
    // Retrieves the details of the specified job. It can be used for jobs from both proxy and regular bulks.
    rpc GetBulkJob(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.BulkJob);
    // @group: Bulks
    // Updates the job metadata. The metadata is used to store additional information about the job.
    rpc UpdateBulkJob(io.clbs.openhes.models.common.UpdateMetadata) returns (google.protobuf.Empty);
    // @group: Bulks
    // Cancels the specified job bulk. It can be used for both proxy and regular bulks.
    rpc CancelBulk(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Bulks
    // Cancels the specified jobs in an existing bulk.
    rpc CancelBulkJobs(io.clbs.openhes.models.common.ListOfId) returns (google.protobuf.Empty);

    // @group: Bulks
    // @tag: acquisition
    // @tag: action
    // Creates a new proxy bulk. The proxy bulk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
    rpc CreateProxyBulk(io.clbs.openhes.models.acquisition.CreateProxyBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the details of the specified proxy bulk.
    rpc GetProxyBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ProxyBulk);

    // @group: Bulks
    // @tag: acquisition
    // @tag: action
    // Creates a new bulk. The bulk is a collection of jobs where each job represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
    rpc CreateBulk(io.clbs.openhes.models.acquisition.CreateBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the the details of the specified bulk.
    rpc GetBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Bulk);
    // @group: Bulks
    // Updates the metadata of an existing bulk. The metadata is used to store additional information about the job.
    rpc UpdateBulk(io.clbs.openhes.models.common.UpdateMetadata) returns (google.protobuf.Empty);

    // @group: Driver Info
    // Retrieves a paginated list of drivers based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDrivers(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDriver);
    // @group: Driver Info
    // Retrieves the details of the specified driver.
    rpc GetDriver(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Driver);

    // @group: Devices
    // @tag: communicationunit
    // Creates a new communication unit. Returns the identifier of the newly created register.
    rpc CreateCommunicationUnit(io.clbs.openhes.models.acquisition.CreateCommunicationUnitRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: communicationunit
    // Updates an exiting communication unit. Requires the full unit specification; partial updates are not supported.
    rpc UpdateCommunicationUnit(io.clbs.openhes.models.acquisition.CommunicationUnit) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationunit
    // Retrieve a paginated list of communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListCommunicationUnits(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationUnit);
    // @group: Devices
    // @tag: communicationunit
    // Retrieves the details of the specified communication unit.
    rpc GetCommunicationUnit(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.CommunicationUnit);
    // @group: Devices
    // @tag: communicationunit
    // Deletes the specified communication unit.
    rpc DeleteCommunicationUnit(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationunit
    // Retrieves the network map (topology) reported by the data concentrator reports for the specified communication unit.
    rpc GetCommunicationUnitNetworkMap(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.NetworkMap);
    // @group: Devices
    // @tag: communicationunit
    // Retrieves a paginated list of communication unit log records based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListCommunicationUnitLogRecords(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationUnitLogRecord);

    // @group: Devices
    // @tag: communicationbus
    // Creates a new communication bus. Returns the identifier of the newly created communication bus.
    rpc CreateCommunicationBus(io.clbs.openhes.models.acquisition.CreateCommunicationBusRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: communicationbus
    // Retrieves a paginated list of communication buses. The page size and page number (zero-based) can be defined in the request.
    rpc ListCommunicationBuses(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationBus);
    // @group: Devices
    // @tag: communicationbus
    // Deletes the specified communication bus.
    rpc DeleteCommunicationBus(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationbus
    // Adds a specified communication unit to an existing communication bus.
    rpc AddCommunicationUnitsToCommunicationBus(io.clbs.openhes.models.acquisition.AddCommunicationUnitsToCommunicationBusRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: communicationbus
    // Removes a specified communication bus from an existing communication bus.
    rpc RemoveCommunicationUnitsFromCommunicationBus(io.clbs.openhes.models.acquisition.RemoveCommunicationUnitsFromCommunicationBusRequest) returns (google.protobuf.Empty);

    // @group: Devices
    // @tag: device
    // Creates a new device. Returns the identifier of the newly created device.
    rpc CreateDevice(io.clbs.openhes.models.acquisition.CreateDeviceRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: device
    // Updates the details of an existing device. Fields that are omitted from the request will be left unchanged.
    rpc UpdateDevice(io.clbs.openhes.models.acquisition.Device) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    // Retrieves a paginated list of devices based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDevices(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDevice);
    // @group: Devices
    // @tag: device
    // Retrieves the details of the specified device.
    rpc GetDevice(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Device);
    // @group: Devices
    // @tag: device
    // Deletes the specified device.
    rpc DeleteDevice(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // Retrieves the profile-typed info of the specified device.
    rpc GetDeviceInfo(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceInfo);
    // @group: Devices
    // @tag: device
    // Sets or replaces an ordered set of communication units linked to the specified device.
    rpc SetDeviceCommunicationUnits(io.clbs.openhes.models.acquisition.SetDeviceCommunicationUnitsRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: device
    // Retrieves a list of communication units linked to the specified device.
    rpc GetDeviceCommunicationUnits(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnit);
    // @group: Devices
    // @tag: device
    // Retrieves a paginated list of changes to device communication units based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceCommunicationUnitChanges(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceCommunicationUnitChange);
    // @group: Devices
    // @tag: device
    // Retrieves a list of device groups that contain the specified device.
    rpc GetDeviceDeviceGroups(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ListOfDeviceGroup);
    // @group: Devices
    // @tag: device
    // Retrieves the network map (topology) reported by the data concentrator reports for the specified  device.
    rpc GetDeviceNetworkMap(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.NetworkMap);
    // @group: Bulks
    // Retrieves the list of bulk jobs related to a given device within the specified time range. All parameters are required.
    rpc GetDeviceBulks(io.clbs.openhes.models.acquisition.GetDeviceBulksRequest) returns (io.clbs.openhes.models.acquisition.DeviceBulks);

    // @group: Devices
    // @tag: devicegroup
    // Creates a new device group. Returns the identifier of the newly created device group.
    rpc CreateDeviceGroup(io.clbs.openhes.models.acquisition.CreateDeviceGroupRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: devicegroup
    // Retrieves a paginated list of devices groups based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceGroups(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceGroup);
    // @group: Devices
    // @tag: devicegroup
    // Retrieves the details of the specified device group.
    // @param The device group identifier.
    // @return The device group specification.
    rpc GetDeviceGroup(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.DeviceGroup);
    // @group: Devices
    // @tag: devicegroup
    // Deletes the specified device group.
    rpc DeleteDeviceGroup(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: devicegroup
    // Adds the specified devices to an existing device group.
    rpc AddDevicesToGroup(io.clbs.openhes.models.acquisition.AddDevicesToGroupRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: devicegroup
    // Removes the specified devices from an existing device group.
    rpc RemoveDevicesFromGroup(io.clbs.openhes.models.acquisition.RemoveDevicesFromGroupRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: devicegroup
    // Retrieves a paginated list of devices in the specified device group. The page size and page number (zero-based) can be defined in the request.
    rpc ListDeviceGroupDevices(io.clbs.openhes.models.acquisition.ListDeviceGroupDevicesRequest) returns (io.clbs.openhes.models.acquisition.ListOfDevice);

    // @group: Devices
    // @tag: modempool
    // Retrieves a paginated list of modem pools. The page size and page number (zero-based) can be defined in the request.
    rpc ListModemPools(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfModemPool);
    // @group: Devices
    // @tag: modempool
    // Retrieves the details of the specified modem pool.
    rpc GetModemPool(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ModemPool);
    // @group: Devices
    // @tag: modempool
    // Creates a new modem pool. Returns the identifier of the newly craeted modem pool.
    rpc CreateModemPool(io.clbs.openhes.models.acquisition.SetModemPoolRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: modempool
    // Updates the details of an existing modem pool. Fields that are omitted from the request will be left unchanged.
    rpc UpdateModemPool(io.clbs.openhes.models.acquisition.SetModemPoolRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: modempool
    // Deletes the specified modem pool.
    rpc DeleteModemPool(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: modem
    // Creates a new modem within an existing modem pool. Returns the identifier of the newly created modem.
    rpc CreateModem(io.clbs.openhes.models.acquisition.SetModemRequest) returns (google.protobuf.StringValue);
    // @group: Devices
    // @tag: modem
    // Updates the details of an existing modem within the specified modem pool.
    rpc UpdateModem(io.clbs.openhes.models.acquisition.SetModemRequest) returns (google.protobuf.Empty);
    // @group: Devices
    // @tag: modem
    // Deletes th specified modem.
    rpc DeleteModem(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Configuration
    // Retrieves the current application configuration settings.
    rpc GetApplicationConfig(google.protobuf.Empty) returns (io.clbs.openhes.models.system.ApplicationConfigDescriptor);
    // @group: Configuration
    // Updates the details of an existing application configuration. Fields that are omitted from the request will be left unchanged.
    rpc UpdateApplicationConfig(io.clbs.openhes.models.system.ApplicationConfig) returns (google.protobuf.Empty);
    // @group: Configuration
    // Synchronizes the application configuration. The input value shall contain all default values and all known keys (even with null values).
    // The output value will contain currently set values, including details that are not set.
    // Values missing from the defaults will be deleted if they were previously set in the application configuration.
    rpc SynchronizeComponentConfig(io.clbs.openhes.models.system.ComponentConfigDescriptor) returns (io.clbs.openhes.models.system.ComponentConfig);

    // @group: Device Data
    // Retrieves device data of the specified type (register, profile, irregular profile) based on the specified criteria. The method is generic but limited to return
    rpc GetDeviceData(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (io.clbs.openhes.models.acquisition.DeviceData);
    // @group: Device Data
    // Retrieves a paginated list of device data info based on the specified criteria. The page size and page number (zero-based) can be defined in the request. The device data info stores various metadata, such as the period of the regular profiles or the timestamp of the last stored value.
    rpc ListDeviceDataInfo(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo);

    // @group: Device Data
    // Retrieves the list of register-type device data based on the specified criteria.
    rpc GetDeviceDataRegisters(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.RegisterValues);

    // @group: Device Data
    // Retrieves the list of profile-type device data based on the specified criteria.
    rpc GetDeviceDataProfiles(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.ProfileValues);

    // @group: Device Data
    // Retrieves the list of irregular profile-type device data based on the specified criteria.
    rpc GetDeviceDataIrregularProfiles(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.IrregularProfileValues);

    // @group: Device Events
    // Retrieves a list of events for the specified device within the specified time range.
    rpc GetDeviceEvents(io.clbs.openhes.models.acquisition.GetDeviceEventsRequest) returns (io.clbs.openhes.models.acquisition.DeviceEvents);

    // @group: Time-Of-Use Tables
    // Creates a new time-of-use table. Returns the identifier of the newly created table.
    rpc CreateTimeOfUseTable(io.clbs.openhes.models.acquisition.CreateTimeOfUseTableRequest) returns (google.protobuf.StringValue);
    // @group: Time-Of-Use Tables
    // Retrieves a paginated list of time-of-use tables based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListTimeOfUseTables(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfTimeOfUseTable);
    // @group: Time-Of-Use Tables
    // Retrieves the details of the spcified time-of-use table.
    rpc GetTimeOfUseTable(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.TimeOfUseTable);
    // @group: Time-Of-Use Tables
    // Updates the details of an existing time-of-use table.
    rpc UpdateTimeOfUseTable(io.clbs.openhes.models.acquisition.TimeOfUseTable) returns (google.protobuf.Empty);
    // @group: Time-Of-Use Tables
    // Deletes the specified time-of-use table.
    rpc DeleteTimeOfUseTable(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Cron Jobs
    // Creates a new cron job. Returns the identifier of the newly created cron job.
    rpc CreateCronJob(io.clbs.openhes.models.cronjobs.CreateCronJobRequest) returns (google.protobuf.StringValue);
    // @group: Cron Jobs
    // Retrieves a paginated list of cron jobs based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    rpc ListCronJobs(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.cronjobs.ListOfCronJob);
    // @group: Cron Jobs
    // Retrieves the details of the specified cron job.
    rpc GetCronJob(google.protobuf.StringValue) returns (io.clbs.openhes.models.cronjobs.CronJob);
    // @group: Cron Jobs
    // Updates the details of an existing cron job.
    rpc UpdateCronJob(io.clbs.openhes.models.cronjobs.CronJob) returns (google.protobuf.Empty);
    // @group: Cron Jobs
    // Deletes the specified cron job.
    rpc DeleteCronJob(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Cron Jobs
    // Runs the specified cron job immediately.
    rpc RunCronJob(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Cron Jobs
    // Pauses the specified cron job.
    rpc PauseCronJob(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Cron Jobs
    // Resumes a paused cron job and restores its scheduled execution.
    rpc ResumeCronJob(google.protobuf.StringValue) returns (google.protobuf.Empty);

    // @group: Metadata
    // Updates the fields of the specified object. Field values provided in the request are merged with existing fields, preserving any fields not included in the update.
    rpc UpdateObjectFields(io.clbs.openhes.models.common.UpdateObjectFieldsRequest) returns (google.protobuf.Empty);

    // @group: System
    // Retrieves the details of the OpenId configuration, proxied directly from the configured OIDC service.
    // All the authenticated endpoints shall be protected using a token issued by this OIDC service.
    rpc GetOpenIdConfiguration(google.protobuf.Empty) returns (io.clbs.openhes.models.system.OpenIdConfiguration);

    // @group: Cryptography
    // Retrieves a cryptographic secret based on the specified request parameters.
    rpc GetCryptoSecret(io.clbs.openhes.models.crypto.GetCryptoSecretRequest) returns (io.clbs.openhes.models.crypto.CryptoSecrets);
    // @group: Cryptography
    // Creates a cryptographic the secret. If a secret with the same identifier already exists, it will be replaced.
    rpc SetCryptoSecret(io.clbs.openhes.models.crypto.SetCryptoSecretRequest) returns (google.protobuf.Empty);
}
