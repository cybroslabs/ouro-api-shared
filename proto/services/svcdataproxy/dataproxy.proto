// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcdataproxy;
option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcdataproxy";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "acquisition/main.proto";
import "acquisition/shared.proto";
import "common/fields.proto";
import "common/internal.proto";
import "common/metadata.proto";
import "common/types.proto";

// The Dataproxy related service definition.
service DataproxyService {
    // @group: Bulks
    // Retrieves the list of bulks. The list of bulks is paginated. The page size is defined in the request. The page number is 0-based.
    // The list contains both the proxy bulks and the regular bulks.
    rpc ListBulks(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfBulk);
    // @group: Bulks
    // Retrieves the list of jobs. The list of jobs is paginated. The page size is defined in the request. The page number is 0-based.
    // The listing can be used for both proxy bulks and regular bulks.
    rpc ListBulkJobs(io.clbs.openhes.models.acquisition.ListBulkJobsRequest) returns (io.clbs.openhes.models.acquisition.ListOfBulkJob);
    // @group: Bulks
    // Retrieves the job status. It can be used for jobs related to both proxy and regular bulks.
    rpc GetBulkJob(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.BulkJob);
    // @group: Bulks
    // Updates the job metadata. The metadata is used to store additional information about the job.
    rpc UpdateBulkJob(io.clbs.openhes.models.common.UpdateMetadata) returns (google.protobuf.Empty);
    // @group: Bulks
    // Cancels the bulk of jobs. It can be used for both proxy and regular bulks.
    rpc CancelBulk(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Bulks
    // Cancels the job(s) identified by the job identifier(s).
    rpc CancelBulkJobs(io.clbs.openhes.models.common.ListOfId) returns (google.protobuf.Empty);
    // @group: Bulks
    // Retrieves the list of bulk jobs related to given device in the specified time range. All the parameters are required.
    rpc GetDeviceBulks(io.clbs.openhes.models.acquisition.GetDeviceBulksRequest) returns (io.clbs.openhes.models.acquisition.DeviceBulks);

    // @group: Bulks
    // Starts a new proxy bulk. The proxy bolk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
    rpc CreateProxyBulk(io.clbs.openhes.models.acquisition.CreateProxyBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the proxy bulk info and status.
    rpc GetProxyBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ProxyBulk);

    // @group: Bulks
    // Starts a new bulk. The bulk is a collection of jobs where each jobs represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
    rpc CreateBulk(io.clbs.openhes.models.acquisition.CreateBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the bulk info and status.
    rpc GetBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Bulk);

    // @group: Bulks
    // Updates the bulk metadata. The metadata is used to store additional information about the job.
    rpc UpdateBulk(io.clbs.openhes.models.common.UpdateMetadata) returns (google.protobuf.Empty);

    // @group: Device Data
    // The method to returns register/profile/irregular-profile typed device data. The method is generic but limited to return
    rpc GetDeviceData(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (io.clbs.openhes.models.acquisition.DeviceData);
    // @group: Device Data
    // The method to get the list of device data info. The device data info contains various metadata, such as a period of the regular profiles or a timestamp of the last stored value.
    rpc ListDeviceDataInfo(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo);

    // @group: Device Data
    // The method to stream out register-typed meter data.
    rpc GetDeviceDataRegisters(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.RegisterValues);

    // @group: Device Data
    // The method to stream out profile-typed meter data.
    rpc GetDeviceDataProfiles(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.ProfileValues);

    // @group: Device Data
    // The method to stream out profile-typed meter data.
    rpc GetDeviceDataIrregularProfiles(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.IrregularProfileValues);

    // @group: Device Events
    // The method to stream out profile-typed meter data.
    rpc GetDeviceEvents(io.clbs.openhes.models.acquisition.GetDeviceEventsRequest) returns (io.clbs.openhes.models.acquisition.DeviceEvents);

    // @group: Fields
    // The method to create a new field descriptor user-defined field descriptor.
    rpc CreateFieldDescriptor(io.clbs.openhes.models.common.CreateFieldDescriptorRequest) returns (google.protobuf.StringValue);
    // @group: Fields
    // The method to update the field descriptor.
    rpc UpdateFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptor) returns (google.protobuf.Empty);
    // @group: Fields
    // The method to delete the field descriptor.
    rpc DeleteFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptorSelector) returns (google.protobuf.Empty);

    // @group: Metadata
    // The method to set the managed fields of the resource(s).
    rpc SetManagedFields(io.clbs.openhes.models.common.SetManagedFieldsRequest) returns (google.protobuf.Empty);
    // @group: Metadata
    // The method sets the fields of an object. The values are merged with the existing fields to preserve the existing fields that are not set in the request.
    rpc UpdateObjectFields(io.clbs.openhes.models.common.UpdateObjectFieldsRequest) returns (google.protobuf.Empty);
}
