// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcdataproxy;
option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcdataproxy";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "acquisition/main.proto";
import "acquisition/shared.proto";
import "common/fields.proto";
import "common/internal.proto";
import "common/metadata.proto";
import "common/types.proto";

// The Dataproxy related service definition.
service DataproxyService {
    // @group: Bulks
    // Retrieves a paginated list of bulks based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    // The list contains both proxy and regular bulks.
    rpc ListBulks(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfBulk);
    // @group: Bulks
    // Retrieves a paginated list of jobs based on the specified criteria. The page size and page number (zero-based) are defined in the request.
    // The listing can be used for jobs from both proxy and regular bulks.
    rpc ListBulkJobs(io.clbs.openhes.models.acquisition.ListBulkJobsRequest) returns (io.clbs.openhes.models.acquisition.ListOfBulkJob);
    // @group: Bulks
    // Retrieves the details of the specified job. It can be used for jobs from both proxy and regular bulks.
    rpc GetBulkJob(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.BulkJob);
    // @group: Bulks
    // Updates the job metadata. The metadata is used to store additional information about the job.
    rpc UpdateBulkJob(io.clbs.openhes.models.common.UpdateMetadata) returns (google.protobuf.Empty);
    // @group: Bulks
    // Cancels the specified job bulk. It can be used for both proxy and regular bulks.
    rpc CancelBulk(google.protobuf.StringValue) returns (google.protobuf.Empty);
    // @group: Bulks
    // Cancels the specified jobs in an existing bulk.
    rpc CancelBulkJobs(io.clbs.openhes.models.common.ListOfId) returns (google.protobuf.Empty);
    // @group: Bulks
    // Retrieves the list of bulk jobs related to a given device within the specified time range. All parameters are required.
    rpc GetDeviceBulks(io.clbs.openhes.models.acquisition.GetDeviceBulksRequest) returns (io.clbs.openhes.models.acquisition.DeviceBulks);

    // @group: Bulks
    // Creates a new proxy bulk. The proxy bulk is a collection of jobs where each job represents a single device. Devices must be fully defined in the request.
    rpc CreateProxyBulk(io.clbs.openhes.models.acquisition.CreateProxyBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the details of the specified proxy bulk.
    rpc GetProxyBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.ProxyBulk);

    // @group: Bulks
    // Creates a new bulk. The bulk is a collection of jobs where each job represents a single device. Devices that are part of the bulk are identified either as a list of registered device identifiers or as a group identifier.
    rpc CreateBulk(io.clbs.openhes.models.acquisition.CreateBulkRequest) returns (google.protobuf.StringValue);
    // @group: Bulks
    // Retrieves the the details of the specified bulk.
    rpc GetBulk(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Bulk);

    // @group: Bulks
    // Updates the metadata of an existing bulk. The metadata is used to store additional information about the job.
    rpc UpdateBulk(io.clbs.openhes.models.common.UpdateMetadata) returns (google.protobuf.Empty);

    // @group: Device Data
    // Retrieves device data of the specified type (register, profile, irregular profile) based on the specified criteria. The method is generic but limited to return
    rpc GetDeviceData(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (io.clbs.openhes.models.acquisition.DeviceData);
    // @group: Device Data
    // Retrieves a paginated list of device data info based on the specified criteria. The page size and page number (zero-based) can be defined in the request. The device data info stores various metadata, such as the period of the regular profiles or the timestamp of the last stored value.
    rpc ListDeviceDataInfo(io.clbs.openhes.models.common.ListSelector) returns (io.clbs.openhes.models.acquisition.ListOfDeviceDataInfo);

    // @group: Device Data
    // Retrieves the list of register-type device data based on the specified criteria.
    rpc GetDeviceDataRegisters(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.RegisterValues);

    // @group: Device Data
    // Retrieves the list of profile-type device data based on the specified criteria.
    rpc GetDeviceDataProfiles(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.ProfileValues);

    // @group: Device Data
    // Retrieves the list of irregular profile-type device data based on the specified criteria.
    rpc GetDeviceDataIrregularProfiles(io.clbs.openhes.models.acquisition.GetDeviceDataRequest) returns (stream io.clbs.openhes.models.acquisition.IrregularProfileValues);

    // @group: Device Events
    // Retrieves a list of events for the specified device within the specified time range.
    rpc GetDeviceEvents(io.clbs.openhes.models.acquisition.GetDeviceEventsRequest) returns (io.clbs.openhes.models.acquisition.DeviceEvents);

    // @group: Fields
    // Creates a new field descriptor. Returns the identifier of the newly created field descriptor.
    rpc CreateFieldDescriptor(io.clbs.openhes.models.common.CreateFieldDescriptorRequest) returns (google.protobuf.StringValue);
    // @group: Fields
    // Updates the details of an existing field descriptor. Fields that are omitted from the request will be left unchanged.
    rpc UpdateFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptor) returns (google.protobuf.Empty);
    // @group: Fields
    // Deletes the specified field descriptor.
    rpc DeleteFieldDescriptor(io.clbs.openhes.models.common.FieldDescriptorSelector) returns (google.protobuf.Empty);

    // @group: Metadata
    // Sets or replaces the managed fields of the specified resources.
    rpc SetManagedFields(io.clbs.openhes.models.common.SetManagedFieldsRequest) returns (google.protobuf.Empty);
    // @group: Metadata
    // Updates the fields of the specified object. Field values provided in the request are merged with existing fields, preserving any fields not included in the update.
    rpc UpdateObjectFields(io.clbs.openhes.models.common.UpdateObjectFieldsRequest) returns (google.protobuf.Empty);
}
