// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svctaskmaster;
option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svctaskmaster";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "acquisition/main.proto";
import "acquisition/internal.proto";
import "acquisition/shared.proto";
import "common/fields.proto";
import "common/types.proto";
import "common/internal.proto";

// The Taskmaster service definition.
// Those are the gRPC services that the Taskmaster provides for other components.
service TaskmasterService {
    rpc QueueJobs(io.clbs.openhes.models.acquisition.QueueJobsRequest) returns (io.clbs.openhes.models.acquisition.QueueJobsResponse);
    // The method called by the RestApi to get the job status. The parameter contains the job identifier.
    rpc GetJob(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.GetJobResponse);
    // The method called by the RestApi to cancel the job.
    rpc CancelJobs(io.clbs.openhes.models.common.ListOfUInt64) returns (google.protobuf.Empty);

    // @group: Drivers
    // The method called by the driver to inform Taskmaster about the instance existence. The parameter contains the driver version, the listening port, the meter type, the maximum number of concurrent jobs, the typical memory usage, the connection attributes template, and the job action templates.
    rpc SetDriver(io.clbs.openhes.models.acquisition.SetDriver) returns (google.protobuf.Empty);
    // @group: Drivers
    // The method called by the driver to store the cache entry. The parameter contains the cache key and the cache value. The key is unique within the driver type.
    rpc SetCache(io.clbs.openhes.models.acquisition.SetCacheRequest) returns (google.protobuf.Empty);
    // @group: Drivers
    // The method called by the driver to retrieve the cache entry. The parameter contains the cache key. The key is unique within the driver type.
    rpc GetCache(io.clbs.openhes.models.acquisition.GetCacheRequest) returns (io.clbs.openhes.models.acquisition.GetCacheResponse);
    // @group: Drivers
    // SetDriverConfigDefaults sets the default configuration values for the driver type. It also resets the configuration caches.
    rpc SetDriverConfigDefaults(io.clbs.openhes.models.acquisition.SetConfigDefaultsRequest) returns (google.protobuf.Empty);
    // @group: Drivers
    // GetDriverConfig returns the driver configuration for the given driver type.
    // The parameter contains the driver type.
    rpc GetDriverConfig(io.clbs.openhes.models.acquisition.GetDriverConfigRequest) returns (io.clbs.openhes.models.common.FieldValues);
    // @group: Drivers
    // The method sets the managed fields for entities.
    rpc SetManagedFields(io.clbs.openhes.models.common.SetManagedFieldsRequest) returns (google.protobuf.Empty);
    // @group: Drivers
    // The method returns the list of x-device-identifiers that match the given device-type specific key.
    // The key can be any byte-array like unique physical identifier of the device (e.g. system-title, MAC address, etc.) which must be unique for give driver type.
    // If the key is not yet registered, the method creates a new entry in the database. It always returns the list of all x-device-identifiers that match the given key or error.
    rpc GetMapDeviceKeyXId(io.clbs.openhes.models.common.ListOfDeviceKey) returns (io.clbs.openhes.models.common.MapDeviceKeyXId);
    // @group: Drivers
    // Adds a new log records to the communication unit. Duplicit records are ignored.
    rpc AddCommunicationUnitLogs(io.clbs.openhes.models.acquisition.AddCommunicationUnitLogsRequest) returns (google.protobuf.Empty);
    // @group: Drivers
    // The method sets currently known unknown devices visible by the communication unit.
    rpc SetUnknownDevices(io.clbs.openhes.models.acquisition.SetUnknownDevicesRequest) returns (google.protobuf.Empty);
    // @group: Drivers
    // The method returns the list of device identifiers that match the given attributes.
    rpc ListDevicesByAttributes(io.clbs.openhes.models.acquisition.DeviceAttributeSelector) returns (io.clbs.openhes.models.acquisition.ListOfDevice);
    // @group: Drivers
    // The method returns the list of communication unit identifiers that match the given attributes.
    rpc ListCommunicationUnitsByAttributes(io.clbs.openhes.models.acquisition.CommunicationUnitAttributeSelector) returns (io.clbs.openhes.models.acquisition.ListOfCommunicationUnit);
    // @group: Drivers
    // The method sets the communication unit neighbours. The parameter contains the communication unit identifier and the list of neighbour identifiers which can be either communication units or devices.
    // If there were other neighbours not listed within the request, they are removed from the neighbours list.
    rpc SetNeightbours(io.clbs.openhes.models.acquisition.SetNeighboursRequest) returns (google.protobuf.Empty);
    // @group: Drivers
    // The method sets the current device communication unit. The parameter contains the device selector and the communication unit selector.
    // The device selector is used to select the device for which the communication unit is being set. Be ware that all matching devices are updated, from none up to many.
    // The communication unit selector is used to select the communication unit for the device. Be ware that the first matching communication unit is used. If none is found, the method silently ignores the request.
    rpc SetCurrentDeviceCommunicationUnit(io.clbs.openhes.models.acquisition.SetCurrentDeviceCommunicationUnitRequest) returns (google.protobuf.Empty);
}
