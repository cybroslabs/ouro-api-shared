// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.services.svcourooperator;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/services/svcourooperator";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "acquisition/internal.proto";
import "acquisition/main.proto";
import "system/main.proto";

// Defines a specification for the Ouro Operator service.
// The Ouro Operator provides these gRPC services to other components.
service OuroOperatorService {
    // Retrieves a paginated list of drivers based on the specified criteria. The page size and page number (zero-based) can be defined in the request.
    rpc ListDrivers(google.protobuf.Empty) returns (io.clbs.openhes.models.acquisition.ListOfDriver);
    // Creates or updates a driver template. The parameter contains the driver templates.
    rpc SetDriver(io.clbs.openhes.models.acquisition.Driver) returns (google.protobuf.Empty);
    // Retrieves the details of the specified driver.
    rpc GetDriver(google.protobuf.StringValue) returns (io.clbs.openhes.models.acquisition.Driver);

    // Sets the driver scale (number of repllicas) for Taskmaster.
    rpc SetDriverScale(io.clbs.openhes.models.acquisition.SetDriverScaleRequest) returns (google.protobuf.Empty);
    // Retrieves the details of the specified the driver scale.
    rpc GetDriverScale(io.clbs.openhes.models.acquisition.GetDriverScaleRequest) returns (google.protobuf.UInt32Value);

    // Retrieves the current application configuration settings.
    rpc GetApplicationConfig(google.protobuf.Empty) returns (io.clbs.openhes.models.system.ApplicationConfigDescriptor);
    // Updates the details of an existing application configuration. Fields omitted from the request remain unchanged.
    rpc UpdateApplicationConfig(io.clbs.openhes.models.system.ApplicationConfig) returns (google.protobuf.Empty);
    // Synchronizes the application configuration.
    // Input must contain all default values and known keys (including `null` values).
    // Output contains the current values, including details that are not set.
    // Values missing from defaults are deleted if previously set.
    rpc SynchronizeComponentConfig(io.clbs.openhes.models.system.ComponentConfigDescriptor) returns (io.clbs.openhes.models.system.ComponentConfig);

    // Starts a driver in upgrade mode and provides a structure upgrade between driver versions, controlled by the `DeviceRegistry`.
    // The driver runs as a Kubernetes job and ends after completing structure upgrades.
    rpc StartUpgrade(io.clbs.openhes.models.acquisition.StartUpgradeRequest) returns (google.protobuf.Empty);

    // Retrieves the current license key.
    rpc GetLicense(google.protobuf.Empty) returns (io.clbs.openhes.models.system.License);
    // Retrieves the license request code if no license is set. Returns an empty string otherwise.
    rpc GetLicenseRequestCode(google.protobuf.Empty) returns (google.protobuf.StringValue);
    // Creates a new license key. Used only for air-gapped installations.
    rpc SetLicense(google.protobuf.StringValue) returns (google.protobuf.Empty);
}
