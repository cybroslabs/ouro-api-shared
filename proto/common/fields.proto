// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.common;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/common";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "common/objects.proto";

// The listing selector.
message ListSelector {
    uint32 page_size = 1;  // The number of items per page.
    // The offset of the first item to return, zero based.
    // @values: any non-negative integer
    // @example: 15
    uint32 offset                           = 2;
    repeated ListSelectorSortBy sort_by     = 3;  // The sorting criteria.
    repeated ListSelectorFilterBy filter_by = 4;  // The filtering criteria.

    // FIXME: This needs to be designed properly.
    repeated string fields = 5;  // The list of additional fields to be returned.
}

// The sorting criteria.
message ListSelectorSortBy {
    string path = 1;                    // The js_path or path from the FieldDescriptor.
    bool desc   = 2 [default = false];  // Set to true to sort in descending order.
}

// The filter operator.
enum FilterOperator {
    EQUAL                 = 0;   // Single operand operator for text, integer, number, boolean, date fields.
    NOT_EQUAL             = 1;   // Single operand operator for text, integer, number, boolean, date fields.
    GREATER_THAN          = 2;   // Single operand operator for integer, number, date fields.
    GREATER_THAN_OR_EQUAL = 3;   // Single operand operator for integer, number, date fields.
    LESS_THAN             = 4;   // Single operand operator for integer, number, date fields.
    LESS_THAN_OR_EQUAL    = 5;   // Single operand operator for integer, number, date fields.
    CONTAINS              = 6;   // Single operand operator for text fields.
    NOT_CONTAINS          = 7;   // Single operand operator for text fields.
    STARTS_WITH           = 8;   // Single operand operator for text fields.
    ENDS_WITH             = 9;   // Single operand operator for text fields.
    IN                    = 10;  // Multiple operand operator for text, integer, number, boolean fields.
    NOT_IN                = 11;  // Multiple operand operator for text, integer, number, boolean fields.
    BETWEEN               = 12;  // Two operand operator for integer, number, date fields.
    IS_NULL               = 13;  // No operand operator. For both null and empty string.
    IS_NOT_NULL           = 14;  // No operand operator. For both null and empty string.
}

// The filtering criteria.
//
// Depending on the operator, the `text`, `integer`, `number`, `boolean` or `date` field should be used.
// - **No value** must be set for operators: `IS_NULL`, `IS_NOT_NULL`.
// - Exactly **One value** must be set for single operand operators: `EQUAL`, `NOT_EQUAL`, `GREATER_THAN`, `GREATER_THAN_OR_EQUAL`, `LESS_THAN`, `LESS_THAN_OR_EQUAL`, `CONTAINS`, `NOT_CONTAINS`, `STARTS_WITH`, `ENDS_WITH`.
// - Exactly **Two values** must be set for two operand operators: `BETWEEN`.
// - **Zero or more** values can be set for generic operators: `IN`, `NOT_IN`.
//
// Field type determines the data type and only related field should be used. Other fields shall not be set and will be ignored by the system.
message ListSelectorFilterBy {
    string path = 1;                              // The js_path or path from the FieldDescriptor.
    FilterOperator operator = 2;                  // The filter operator.
    FieldDataType data_type                 = 3;  // The data type of the field.
    repeated string text                    = 4;  // The text-typed value(s) used for filtering.
    repeated sint64 integer                 = 5;  // The integer-typed value(s) used for filtering.
    repeated double number                  = 6;  // The number-typed value(s) used for filtering.
    repeated bool boolean                   = 7;  // The boolean-typed value(s) used for filtering.
    repeated google.protobuf.Timestamp date = 8;  // The date-typed value(s) used for filtering.
}

// Enum representing the field data type.
enum FieldDataType {
    TEXT      = 0;  // The text data type.
    INTEGER   = 1;  // The integer data type.
    DOUBLE    = 2;  // The double data type.
    BINARY    = 3;  // The binary data type.
    BOOLEAN   = 4;  // The boolean data type.
    TIMESTAMP = 5;  // The timestamp data type, represented by google.protobuf.Timestamp.
    DURATION  = 6;  // The duration data type, represented by google.protobuf.Duration.
}

// Enum representing the field display format.
enum FieldDisplayFormat {
    DEFAULT       = 0;  // The default display format. The GUI shows text, int, double, date-time or duration in the default format.
    DATE_ONLY     = 1;  // The date-only display format of local date-time. Data type must be TIMESTAMP or string.
    UTC_DATETIME  = 2;  // The date-time display format with in UTC timezone. Data type must be TIMESTAMP or string.
    UTC_DATE_ONLY = 3;  // The date display format with in UTC timezone. Data type must be TIMESTAMP or string.
    TIMEOFDAY     = 4;  // The time of day display format hh:mm:ss, e.g. 12:30:00. Data type must be INTEGER in milliseconds.
    MONEY         = 5;  // The money display format. The unit must be set to the currency code, ISO 4217 standard (e.g. USD, EUR, ...). Data type must be DOUBLE or INTEGER.
    PASSWORD      = 6;  // The password display format. Data type must be TEXT. The GUI must always display six starts (******) not to reveal the actual password length.
    MULTILINE     = 7;  // The multiline-string display format. Data type must be TEXT.
    COMBO         = 8;  // The combo-box display style & format. Data type must be TEXT. The GUI must display the value as a combo-box with the list of options.
    // FIXME: To be added in the future.
    // OBIS_CODE      = 8;  // The OBIS code display format. Data type must be TEXT. The GUI must display the OBIS code in the format: "1-0:1.8.0*255" (e.g., "1-0:1.8.0*255").
    // OBIS_CODE_LIST = 9;  // The OBIS code list display format, separated by semicolon ';' character. Spaces is not allowed.
}

message CreateFieldDescriptorRequest {
    reserved 2, 3;             // Reserved for status and metadata fields.
    FieldDescriptor spec = 1;  // The field descriptor to be created.
}

// The system-wide field descriptor selector.
message FieldDescriptorSelector {
    ObjectType object_type = 1;  // Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
    string gid             = 2;  // The system-wide unique identifier of the field descriptor.
}

// The field descriptor.
message FieldDescriptor {
    bool is_user_defined       = 1;   // Whether the field descriptor is user-defined (e.g., custom fields added by users)
    ObjectType object_type     = 2;   // Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
    string gid                 = 3;   // The system-wide unique identifier of the field descriptor.
    string field_id            = 4;   // Unique identifier for the field descriptor
    string js_path             = 5;   // The path to the field in the TypeScript representation
    string path                = 6;   // The path to the field in the gRPC/JSON simplified representation
    string label               = 7;   // Label displayed for the field
    string group_id            = 8;   // Group (section) identifier for the field
    FieldDataType data_type    = 9;   // Data type of the field (e.g., text, double)
    FieldDisplayFormat format  = 10;  // Display format (e.g., 1h 30m)
    string unit                = 11;  // Unit to display (e.g., kWh, USD)
    int32 precision            = 12;  // Decimal precision for double numbers
    string tooltip             = 13;  // Tooltip or hint text
    bool required              = 14;  // Whether the field is mandatory
    bool editable              = 15;  // Whether the field is editable
    bool visible               = 16;  // Whether the field is visible
    bool multi_value           = 17;  // Whether the field can have multiple values
    bool secured               = 18;  // Whether the field shall be handled as a security fields (e.g., password, certificate input area, ...)
    FieldValidation validation = 19;  // Validation rules for the field
    FieldValue default_value   = 20;  // The default value of the attribute, it does not support multi-value fields
    bool sortable              = 21;  // Whether the field can be used for sorting, default is true
    bool filterable            = 22;  // Whether the field can be used for filtering, default is true
}

// Validation rules for the field.
message FieldValidation {
    string re                   = 1;  // Regular expression describing input format. If not set then any value of given type can be used. It can be used for string, int or double fields only.
    int32 min_length            = 2;  // The minimum length. It's used for string fields only.
    int32 max_length            = 3;  // The maximum length. It's used for string fields only.
    sint64 min_integer          = 4;  // The minimum value. It's used for integer fields only.
    sint64 max_integer          = 5;  // The maximum value. It's used for integer fields only.
    double min_number           = 6;  // The minimum value. It's used for number fields only.
    double max_number           = 7;  // The maximum value. It's used for number fields only.
    map<string, string> options = 8;  // The list of allowed values to be set (key-value pairs). The key here represents the field value to be set and the value here represents the label to be displayed.
    string options_source       = 9;  // The options source. If set, then the options shall be dynamically fetched from the server.
}

message FieldValue {
    oneof kind {
        string string_value                     = 1;  // Represents a string-typed value.
        int64 integer_value                     = 2;  // Represents a 64-bit integer-typed value.
        double double_value                     = 3;  // Represents a 64-bit double-typed value.
        bytes binary_value                      = 4;  // Represents a binary-typed value.
        bool bool_value                         = 5;  // Represents a boolean-typed value.
        google.protobuf.Timestamp date_value    = 6;  // Represents a date-typed value.
        google.protobuf.Duration duration_value = 7;  // Represents a duration-typed value.
    }
}

message FieldValues {
    map<string, common.FieldValue> attributes = 1;  // The field values.
}

message ListOfFieldValue {
    repeated FieldValue items = 1;  // The list of field values.
    int32 total_count         = 2;  // The total number of items.
}

message ListOfFieldDescriptor {
    repeated FieldDescriptor items = 1;  // The list of field descriptors.
    int32 total_count              = 2;  // The total number of items.
}

message ListFieldDescriptorOptionsRequest {
    string options_source  = 1;  // The options source. Must be set to the options_source field of the FieldDescriptor.
    string filter_contains = 2;  // The filter to apply on the options. If set, only options containing this string will be returned.
}

message FieldDescriptorOptions {
    map<string, string> options = 1;                   // The field descriptor options.
    bool complete               = 2 [default = true];  // If set to false, the options were filtered out.
}