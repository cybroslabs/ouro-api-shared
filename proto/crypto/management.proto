// Editions version of proto3 file
edition = "2023";
package io.clbs.openhes.models.crypto;

option go_package = "github.com/cybroslabs/ouro-api-shared/gen/go/crypto";

import "google/protobuf/timestamp.proto";
import "common/objects.proto";

// DLMS crypto mode
enum SecretDataDecryptionMethod {
    SECRET_DATA_UNSPECIFIED = 0;  // Unspecified decryption method.
    SECRET_DATA_PLAIN       = 1;  // Plain data, no decryption needed
    SECRET_DATA_AES256CBC   = 2;  // AES-256-CBC encryption method
}

enum SecretSessionKeyDecryptionMethod {
    SECRET_SESSION_UNSPECIFIED    = 0;  // No session key decryption method, used when the session key is not set or not used.
    SECRET_SESSION_PLAIN          = 1;  // Plain session key, no session-key decryption needed.
    SECRET_SESSION_RSA_OAEPM_GF1P = 2;  // RSA-OAEP-MGF1P decryption method, used for session keys.
}

message GetCryptoSecretRequest {
    common.ObjectType object_type = 1;  // Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
    string driver_type            = 2;  // The driver type for which the secret is requested, e.g., "METERCONTROL_ST402D_DLMS"
    string crypto_id              = 3;  // The crypto ID of the secret to retrieve.
}

message CryptoSecrets {
    repeated CryptoSecret secrets = 1;  // List of secrets.
}

message CryptoSecret {
    reserved 5, 6, 7, 8, 9, 10, 11, 12, 13, 14;  // Reserved fields for future use.
    string access_level                  = 1;    // Access level for the secret, e.g., "admin", "user", etc.
    string key_id                        = 2;    // Unique identifier for the secret key.
    google.protobuf.Timestamp created_at = 3;    // Timestamp when the secret was created.
    google.protobuf.Timestamp updated_at = 4;    // Timestamp when the secret was last updated.
    bytes data                           = 15;   // The secret data.
}

message SetCryptoSecretRequest {
    reserved 11, 12, 13, 14;            // Reserved fields for future use.
    common.ObjectType object_type = 1;  // Defines the resource type for which the field descriptor is defined, e.g., BULK, DEVICE, etc.
    string driver_type            = 2;  // The driver type for which the secret is requested, e.g., "METERCONTROL_ST402D_DLMS"
    string crypto_id              = 3;  // The crypto ID of the secret to retrieve.
    string access_level           = 4;  // Access level for the secret, e.g., "admin", "user", etc.
    string key_id                 = 5;  // Unique identifier for the secret key.

    string decryption_secret_id                                    = 6;   // Identifier for the key used to decrypt the either the session key or the data directly.
    SecretSessionKeyDecryptionMethod session_key_decryption_method = 7;   // Method used to decrypt the session key. May be unset if the session key is unset and no used.
    bytes session_key                                              = 8;   // The session key, usually encrypted, used to decrypt the data.
    SecretDataDecryptionMethod data_decryption_method              = 9;   // Method used to decrypt the secret data. May be unset if the data is not encrypted and vice versa.
    bytes data_decryption_iv                                       = 10;  // Initialization vector for the decryption method, if applicable.

    bytes data = 15;  // The secret data.
}
